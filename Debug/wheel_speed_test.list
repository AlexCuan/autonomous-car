
wheel_speed_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000585c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800599c  0800599c  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000060  08005d78  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005d78  00007364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc61  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f20  00000000  00000000  00013cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00015c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0b  00000000  00000000  00016900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015138  00000000  00000000  0001730b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d645  00000000  00000000  0002c443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d1c  00000000  00000000  00039a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf7a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce8  00000000  00000000  000bf7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c34d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	08005984 	.word	0x08005984

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	08005984 	.word	0x08005984

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_dmul>:
 8000190:	b570      	push	{r4, r5, r6, lr}
 8000192:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000196:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800019a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800019e:	bf1d      	ittte	ne
 80001a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001a4:	ea94 0f0c 	teqne	r4, ip
 80001a8:	ea95 0f0c 	teqne	r5, ip
 80001ac:	f000 f8de 	bleq	800036c <__aeabi_dmul+0x1dc>
 80001b0:	442c      	add	r4, r5
 80001b2:	ea81 0603 	eor.w	r6, r1, r3
 80001b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001c2:	bf18      	it	ne
 80001c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001d0:	d038      	beq.n	8000244 <__aeabi_dmul+0xb4>
 80001d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001d6:	f04f 0500 	mov.w	r5, #0
 80001da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001e6:	f04f 0600 	mov.w	r6, #0
 80001ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ee:	f09c 0f00 	teq	ip, #0
 80001f2:	bf18      	it	ne
 80001f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000200:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000204:	d204      	bcs.n	8000210 <__aeabi_dmul+0x80>
 8000206:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800020a:	416d      	adcs	r5, r5
 800020c:	eb46 0606 	adc.w	r6, r6, r6
 8000210:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000214:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000218:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800021c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000220:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000224:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000228:	bf88      	it	hi
 800022a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800022e:	d81e      	bhi.n	800026e <__aeabi_dmul+0xde>
 8000230:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000234:	bf08      	it	eq
 8000236:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800023a:	f150 0000 	adcs.w	r0, r0, #0
 800023e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000242:	bd70      	pop	{r4, r5, r6, pc}
 8000244:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000248:	ea46 0101 	orr.w	r1, r6, r1
 800024c:	ea40 0002 	orr.w	r0, r0, r2
 8000250:	ea81 0103 	eor.w	r1, r1, r3
 8000254:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000258:	bfc2      	ittt	gt
 800025a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800025e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000262:	bd70      	popgt	{r4, r5, r6, pc}
 8000264:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000268:	f04f 0e00 	mov.w	lr, #0
 800026c:	3c01      	subs	r4, #1
 800026e:	f300 80ab 	bgt.w	80003c8 <__aeabi_dmul+0x238>
 8000272:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000276:	bfde      	ittt	le
 8000278:	2000      	movle	r0, #0
 800027a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800027e:	bd70      	pople	{r4, r5, r6, pc}
 8000280:	f1c4 0400 	rsb	r4, r4, #0
 8000284:	3c20      	subs	r4, #32
 8000286:	da35      	bge.n	80002f4 <__aeabi_dmul+0x164>
 8000288:	340c      	adds	r4, #12
 800028a:	dc1b      	bgt.n	80002c4 <__aeabi_dmul+0x134>
 800028c:	f104 0414 	add.w	r4, r4, #20
 8000290:	f1c4 0520 	rsb	r5, r4, #32
 8000294:	fa00 f305 	lsl.w	r3, r0, r5
 8000298:	fa20 f004 	lsr.w	r0, r0, r4
 800029c:	fa01 f205 	lsl.w	r2, r1, r5
 80002a0:	ea40 0002 	orr.w	r0, r0, r2
 80002a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	fa21 f604 	lsr.w	r6, r1, r4
 80002b4:	eb42 0106 	adc.w	r1, r2, r6
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 040c 	rsb	r4, r4, #12
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f304 	lsl.w	r3, r0, r4
 80002d0:	fa20 f005 	lsr.w	r0, r0, r5
 80002d4:	fa01 f204 	lsl.w	r2, r1, r4
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ec:	bf08      	it	eq
 80002ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f1c4 0520 	rsb	r5, r4, #32
 80002f8:	fa00 f205 	lsl.w	r2, r0, r5
 80002fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000300:	fa20 f304 	lsr.w	r3, r0, r4
 8000304:	fa01 f205 	lsl.w	r2, r1, r5
 8000308:	ea43 0302 	orr.w	r3, r3, r2
 800030c:	fa21 f004 	lsr.w	r0, r1, r4
 8000310:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	fa21 f204 	lsr.w	r2, r1, r4
 8000318:	ea20 0002 	bic.w	r0, r0, r2
 800031c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f094 0f00 	teq	r4, #0
 8000330:	d10f      	bne.n	8000352 <__aeabi_dmul+0x1c2>
 8000332:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000336:	0040      	lsls	r0, r0, #1
 8000338:	eb41 0101 	adc.w	r1, r1, r1
 800033c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000340:	bf08      	it	eq
 8000342:	3c01      	subeq	r4, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1a6>
 8000346:	ea41 0106 	orr.w	r1, r1, r6
 800034a:	f095 0f00 	teq	r5, #0
 800034e:	bf18      	it	ne
 8000350:	4770      	bxne	lr
 8000352:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	eb43 0303 	adc.w	r3, r3, r3
 800035c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000360:	bf08      	it	eq
 8000362:	3d01      	subeq	r5, #1
 8000364:	d0f7      	beq.n	8000356 <__aeabi_dmul+0x1c6>
 8000366:	ea43 0306 	orr.w	r3, r3, r6
 800036a:	4770      	bx	lr
 800036c:	ea94 0f0c 	teq	r4, ip
 8000370:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000374:	bf18      	it	ne
 8000376:	ea95 0f0c 	teqne	r5, ip
 800037a:	d00c      	beq.n	8000396 <__aeabi_dmul+0x206>
 800037c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000380:	bf18      	it	ne
 8000382:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000386:	d1d1      	bne.n	800032c <__aeabi_dmul+0x19c>
 8000388:	ea81 0103 	eor.w	r1, r1, r3
 800038c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800039a:	bf06      	itte	eq
 800039c:	4610      	moveq	r0, r2
 800039e:	4619      	moveq	r1, r3
 80003a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003a4:	d019      	beq.n	80003da <__aeabi_dmul+0x24a>
 80003a6:	ea94 0f0c 	teq	r4, ip
 80003aa:	d102      	bne.n	80003b2 <__aeabi_dmul+0x222>
 80003ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003b0:	d113      	bne.n	80003da <__aeabi_dmul+0x24a>
 80003b2:	ea95 0f0c 	teq	r5, ip
 80003b6:	d105      	bne.n	80003c4 <__aeabi_dmul+0x234>
 80003b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003bc:	bf1c      	itt	ne
 80003be:	4610      	movne	r0, r2
 80003c0:	4619      	movne	r1, r3
 80003c2:	d10a      	bne.n	80003da <__aeabi_dmul+0x24a>
 80003c4:	ea81 0103 	eor.w	r1, r1, r3
 80003c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003e2:	bd70      	pop	{r4, r5, r6, pc}

080003e4 <__aeabi_drsub>:
 80003e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e8:	e002      	b.n	80003f0 <__adddf3>
 80003ea:	bf00      	nop

080003ec <__aeabi_dsub>:
 80003ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003f0 <__adddf3>:
 80003f0:	b530      	push	{r4, r5, lr}
 80003f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	bf1f      	itttt	ne
 8000406:	ea54 0c00 	orrsne.w	ip, r4, r0
 800040a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000412:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000416:	f000 80e2 	beq.w	80005de <__adddf3+0x1ee>
 800041a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000422:	bfb8      	it	lt
 8000424:	426d      	neglt	r5, r5
 8000426:	dd0c      	ble.n	8000442 <__adddf3+0x52>
 8000428:	442c      	add	r4, r5
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	ea82 0000 	eor.w	r0, r2, r0
 8000436:	ea83 0101 	eor.w	r1, r3, r1
 800043a:	ea80 0202 	eor.w	r2, r0, r2
 800043e:	ea81 0303 	eor.w	r3, r1, r3
 8000442:	2d36      	cmp	r5, #54	@ 0x36
 8000444:	bf88      	it	hi
 8000446:	bd30      	pophi	{r4, r5, pc}
 8000448:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800044c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000450:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000454:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000458:	d002      	beq.n	8000460 <__adddf3+0x70>
 800045a:	4240      	negs	r0, r0
 800045c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000460:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000464:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000468:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x84>
 800046e:	4252      	negs	r2, r2
 8000470:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000474:	ea94 0f05 	teq	r4, r5
 8000478:	f000 80a7 	beq.w	80005ca <__adddf3+0x1da>
 800047c:	f1a4 0401 	sub.w	r4, r4, #1
 8000480:	f1d5 0e20 	rsbs	lr, r5, #32
 8000484:	db0d      	blt.n	80004a2 <__adddf3+0xb2>
 8000486:	fa02 fc0e 	lsl.w	ip, r2, lr
 800048a:	fa22 f205 	lsr.w	r2, r2, r5
 800048e:	1880      	adds	r0, r0, r2
 8000490:	f141 0100 	adc.w	r1, r1, #0
 8000494:	fa03 f20e 	lsl.w	r2, r3, lr
 8000498:	1880      	adds	r0, r0, r2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	4159      	adcs	r1, r3
 80004a0:	e00e      	b.n	80004c0 <__adddf3+0xd0>
 80004a2:	f1a5 0520 	sub.w	r5, r5, #32
 80004a6:	f10e 0e20 	add.w	lr, lr, #32
 80004aa:	2a01      	cmp	r2, #1
 80004ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004b0:	bf28      	it	cs
 80004b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b6:	fa43 f305 	asr.w	r3, r3, r5
 80004ba:	18c0      	adds	r0, r0, r3
 80004bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	d507      	bpl.n	80004d6 <__adddf3+0xe6>
 80004c6:	f04f 0e00 	mov.w	lr, #0
 80004ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004da:	d31b      	bcc.n	8000514 <__adddf3+0x124>
 80004dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004e0:	d30c      	bcc.n	80004fc <__adddf3+0x10c>
 80004e2:	0849      	lsrs	r1, r1, #1
 80004e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ec:	f104 0401 	add.w	r4, r4, #1
 80004f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f8:	f080 809a 	bcs.w	8000630 <__adddf3+0x240>
 80004fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000500:	bf08      	it	eq
 8000502:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000506:	f150 0000 	adcs.w	r0, r0, #0
 800050a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050e:	ea41 0105 	orr.w	r1, r1, r5
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000518:	4140      	adcs	r0, r0
 800051a:	eb41 0101 	adc.w	r1, r1, r1
 800051e:	3c01      	subs	r4, #1
 8000520:	bf28      	it	cs
 8000522:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000526:	d2e9      	bcs.n	80004fc <__adddf3+0x10c>
 8000528:	f091 0f00 	teq	r1, #0
 800052c:	bf04      	itt	eq
 800052e:	4601      	moveq	r1, r0
 8000530:	2000      	moveq	r0, #0
 8000532:	fab1 f381 	clz	r3, r1
 8000536:	bf08      	it	eq
 8000538:	3320      	addeq	r3, #32
 800053a:	f1a3 030b 	sub.w	r3, r3, #11
 800053e:	f1b3 0220 	subs.w	r2, r3, #32
 8000542:	da0c      	bge.n	800055e <__adddf3+0x16e>
 8000544:	320c      	adds	r2, #12
 8000546:	dd08      	ble.n	800055a <__adddf3+0x16a>
 8000548:	f102 0c14 	add.w	ip, r2, #20
 800054c:	f1c2 020c 	rsb	r2, r2, #12
 8000550:	fa01 f00c 	lsl.w	r0, r1, ip
 8000554:	fa21 f102 	lsr.w	r1, r1, r2
 8000558:	e00c      	b.n	8000574 <__adddf3+0x184>
 800055a:	f102 0214 	add.w	r2, r2, #20
 800055e:	bfd8      	it	le
 8000560:	f1c2 0c20 	rsble	ip, r2, #32
 8000564:	fa01 f102 	lsl.w	r1, r1, r2
 8000568:	fa20 fc0c 	lsr.w	ip, r0, ip
 800056c:	bfdc      	itt	le
 800056e:	ea41 010c 	orrle.w	r1, r1, ip
 8000572:	4090      	lslle	r0, r2
 8000574:	1ae4      	subs	r4, r4, r3
 8000576:	bfa2      	ittt	ge
 8000578:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800057c:	4329      	orrge	r1, r5
 800057e:	bd30      	popge	{r4, r5, pc}
 8000580:	ea6f 0404 	mvn.w	r4, r4
 8000584:	3c1f      	subs	r4, #31
 8000586:	da1c      	bge.n	80005c2 <__adddf3+0x1d2>
 8000588:	340c      	adds	r4, #12
 800058a:	dc0e      	bgt.n	80005aa <__adddf3+0x1ba>
 800058c:	f104 0414 	add.w	r4, r4, #20
 8000590:	f1c4 0220 	rsb	r2, r4, #32
 8000594:	fa20 f004 	lsr.w	r0, r0, r4
 8000598:	fa01 f302 	lsl.w	r3, r1, r2
 800059c:	ea40 0003 	orr.w	r0, r0, r3
 80005a0:	fa21 f304 	lsr.w	r3, r1, r4
 80005a4:	ea45 0103 	orr.w	r1, r5, r3
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f1c4 040c 	rsb	r4, r4, #12
 80005ae:	f1c4 0220 	rsb	r2, r4, #32
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 f304 	lsl.w	r3, r1, r4
 80005ba:	ea40 0003 	orr.w	r0, r0, r3
 80005be:	4629      	mov	r1, r5
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	fa21 f004 	lsr.w	r0, r1, r4
 80005c6:	4629      	mov	r1, r5
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	f094 0f00 	teq	r4, #0
 80005ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005d2:	bf06      	itte	eq
 80005d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d8:	3401      	addeq	r4, #1
 80005da:	3d01      	subne	r5, #1
 80005dc:	e74e      	b.n	800047c <__adddf3+0x8c>
 80005de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005e2:	bf18      	it	ne
 80005e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e8:	d029      	beq.n	800063e <__adddf3+0x24e>
 80005ea:	ea94 0f05 	teq	r4, r5
 80005ee:	bf08      	it	eq
 80005f0:	ea90 0f02 	teqeq	r0, r2
 80005f4:	d005      	beq.n	8000602 <__adddf3+0x212>
 80005f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005fa:	bf04      	itt	eq
 80005fc:	4619      	moveq	r1, r3
 80005fe:	4610      	moveq	r0, r2
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	ea91 0f03 	teq	r1, r3
 8000606:	bf1e      	ittt	ne
 8000608:	2100      	movne	r1, #0
 800060a:	2000      	movne	r0, #0
 800060c:	bd30      	popne	{r4, r5, pc}
 800060e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000612:	d105      	bne.n	8000620 <__adddf3+0x230>
 8000614:	0040      	lsls	r0, r0, #1
 8000616:	4149      	adcs	r1, r1
 8000618:	bf28      	it	cs
 800061a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061e:	bd30      	pop	{r4, r5, pc}
 8000620:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000624:	bf3c      	itt	cc
 8000626:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800062a:	bd30      	popcc	{r4, r5, pc}
 800062c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000630:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000634:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf1a      	itte	ne
 8000644:	4619      	movne	r1, r3
 8000646:	4610      	movne	r0, r2
 8000648:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800064c:	bf1c      	itt	ne
 800064e:	460b      	movne	r3, r1
 8000650:	4602      	movne	r2, r0
 8000652:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000656:	bf06      	itte	eq
 8000658:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800065c:	ea91 0f03 	teqeq	r1, r3
 8000660:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	bf00      	nop

08000668 <__aeabi_ui2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067c:	f04f 0500 	mov.w	r5, #0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e750      	b.n	8000528 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_i2d>:
 8000688:	f090 0f00 	teq	r0, #0
 800068c:	bf04      	itt	eq
 800068e:	2100      	moveq	r1, #0
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000698:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800069c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006a0:	bf48      	it	mi
 80006a2:	4240      	negmi	r0, r0
 80006a4:	f04f 0100 	mov.w	r1, #0
 80006a8:	e73e      	b.n	8000528 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_f2d>:
 80006ac:	0042      	lsls	r2, r0, #1
 80006ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ba:	bf1f      	itttt	ne
 80006bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c8:	4770      	bxne	lr
 80006ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ce:	bf08      	it	eq
 80006d0:	4770      	bxeq	lr
 80006d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d6:	bf04      	itt	eq
 80006d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	e71c      	b.n	8000528 <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_ul2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f04f 0500 	mov.w	r5, #0
 80006fe:	e00a      	b.n	8000716 <__aeabi_l2d+0x16>

08000700 <__aeabi_l2d>:
 8000700:	ea50 0201 	orrs.w	r2, r0, r1
 8000704:	bf08      	it	eq
 8000706:	4770      	bxeq	lr
 8000708:	b530      	push	{r4, r5, lr}
 800070a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070e:	d502      	bpl.n	8000716 <__aeabi_l2d+0x16>
 8000710:	4240      	negs	r0, r0
 8000712:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000716:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800071a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000722:	f43f aed8 	beq.w	80004d6 <__adddf3+0xe6>
 8000726:	f04f 0203 	mov.w	r2, #3
 800072a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072e:	bf18      	it	ne
 8000730:	3203      	addne	r2, #3
 8000732:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000736:	bf18      	it	ne
 8000738:	3203      	addne	r2, #3
 800073a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073e:	f1c2 0320 	rsb	r3, r2, #32
 8000742:	fa00 fc03 	lsl.w	ip, r0, r3
 8000746:	fa20 f002 	lsr.w	r0, r0, r2
 800074a:	fa01 fe03 	lsl.w	lr, r1, r3
 800074e:	ea40 000e 	orr.w	r0, r0, lr
 8000752:	fa21 f102 	lsr.w	r1, r1, r2
 8000756:	4414      	add	r4, r2
 8000758:	e6bd      	b.n	80004d6 <__adddf3+0xe6>
 800075a:	bf00      	nop

0800075c <__aeabi_d2uiz>:
 800075c:	004a      	lsls	r2, r1, #1
 800075e:	d211      	bcs.n	8000784 <__aeabi_d2uiz+0x28>
 8000760:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000764:	d211      	bcs.n	800078a <__aeabi_d2uiz+0x2e>
 8000766:	d50d      	bpl.n	8000784 <__aeabi_d2uiz+0x28>
 8000768:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800076c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000770:	d40e      	bmi.n	8000790 <__aeabi_d2uiz+0x34>
 8000772:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000776:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800077a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800077e:	fa23 f002 	lsr.w	r0, r3, r2
 8000782:	4770      	bx	lr
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	4770      	bx	lr
 800078a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800078e:	d102      	bne.n	8000796 <__aeabi_d2uiz+0x3a>
 8000790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000794:	4770      	bx	lr
 8000796:	f04f 0000 	mov.w	r0, #0
 800079a:	4770      	bx	lr

0800079c <__aeabi_uldivmod>:
 800079c:	b953      	cbnz	r3, 80007b4 <__aeabi_uldivmod+0x18>
 800079e:	b94a      	cbnz	r2, 80007b4 <__aeabi_uldivmod+0x18>
 80007a0:	2900      	cmp	r1, #0
 80007a2:	bf08      	it	eq
 80007a4:	2800      	cmpeq	r0, #0
 80007a6:	bf1c      	itt	ne
 80007a8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007ac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007b0:	f000 b968 	b.w	8000a84 <__aeabi_idiv0>
 80007b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007bc:	f000 f806 	bl	80007cc <__udivmoddi4>
 80007c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c8:	b004      	add	sp, #16
 80007ca:	4770      	bx	lr

080007cc <__udivmoddi4>:
 80007cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d0:	9d08      	ldr	r5, [sp, #32]
 80007d2:	460c      	mov	r4, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14e      	bne.n	8000876 <__udivmoddi4+0xaa>
 80007d8:	4694      	mov	ip, r2
 80007da:	458c      	cmp	ip, r1
 80007dc:	4686      	mov	lr, r0
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	d962      	bls.n	80008aa <__udivmoddi4+0xde>
 80007e4:	b14a      	cbz	r2, 80007fa <__udivmoddi4+0x2e>
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	4091      	lsls	r1, r2
 80007ec:	fa20 f303 	lsr.w	r3, r0, r3
 80007f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f4:	4319      	orrs	r1, r3
 80007f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	fb07 1114 	mls	r1, r7, r4, r1
 8000806:	fa1f f68c 	uxth.w	r6, ip
 800080a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb04 f106 	mul.w	r1, r4, r6
 8000816:	4299      	cmp	r1, r3
 8000818:	d90a      	bls.n	8000830 <__udivmoddi4+0x64>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000822:	f080 8110 	bcs.w	8000a46 <__udivmoddi4+0x27a>
 8000826:	4299      	cmp	r1, r3
 8000828:	f240 810d 	bls.w	8000a46 <__udivmoddi4+0x27a>
 800082c:	3c02      	subs	r4, #2
 800082e:	4463      	add	r3, ip
 8000830:	1a59      	subs	r1, r3, r1
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	fb00 f606 	mul.w	r6, r0, r6
 800083e:	fa1f f38e 	uxth.w	r3, lr
 8000842:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000846:	429e      	cmp	r6, r3
 8000848:	d90a      	bls.n	8000860 <__udivmoddi4+0x94>
 800084a:	eb1c 0303 	adds.w	r3, ip, r3
 800084e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000852:	f080 80fa 	bcs.w	8000a4a <__udivmoddi4+0x27e>
 8000856:	429e      	cmp	r6, r3
 8000858:	f240 80f7 	bls.w	8000a4a <__udivmoddi4+0x27e>
 800085c:	4463      	add	r3, ip
 800085e:	3802      	subs	r0, #2
 8000860:	2100      	movs	r1, #0
 8000862:	1b9b      	subs	r3, r3, r6
 8000864:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000868:	b11d      	cbz	r5, 8000872 <__udivmoddi4+0xa6>
 800086a:	40d3      	lsrs	r3, r2
 800086c:	2200      	movs	r2, #0
 800086e:	e9c5 3200 	strd	r3, r2, [r5]
 8000872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000876:	428b      	cmp	r3, r1
 8000878:	d905      	bls.n	8000886 <__udivmoddi4+0xba>
 800087a:	b10d      	cbz	r5, 8000880 <__udivmoddi4+0xb4>
 800087c:	e9c5 0100 	strd	r0, r1, [r5]
 8000880:	2100      	movs	r1, #0
 8000882:	4608      	mov	r0, r1
 8000884:	e7f5      	b.n	8000872 <__udivmoddi4+0xa6>
 8000886:	fab3 f183 	clz	r1, r3
 800088a:	2900      	cmp	r1, #0
 800088c:	d146      	bne.n	800091c <__udivmoddi4+0x150>
 800088e:	42a3      	cmp	r3, r4
 8000890:	d302      	bcc.n	8000898 <__udivmoddi4+0xcc>
 8000892:	4290      	cmp	r0, r2
 8000894:	f0c0 80ee 	bcc.w	8000a74 <__udivmoddi4+0x2a8>
 8000898:	1a86      	subs	r6, r0, r2
 800089a:	eb64 0303 	sbc.w	r3, r4, r3
 800089e:	2001      	movs	r0, #1
 80008a0:	2d00      	cmp	r5, #0
 80008a2:	d0e6      	beq.n	8000872 <__udivmoddi4+0xa6>
 80008a4:	e9c5 6300 	strd	r6, r3, [r5]
 80008a8:	e7e3      	b.n	8000872 <__udivmoddi4+0xa6>
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	f040 808f 	bne.w	80009ce <__udivmoddi4+0x202>
 80008b0:	eba1 040c 	sub.w	r4, r1, ip
 80008b4:	2101      	movs	r1, #1
 80008b6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008ba:	fa1f f78c 	uxth.w	r7, ip
 80008be:	fbb4 f6f8 	udiv	r6, r4, r8
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	fb07 f006 	mul.w	r0, r7, r6
 80008ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x11c>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008de:	d202      	bcs.n	80008e6 <__udivmoddi4+0x11a>
 80008e0:	4298      	cmp	r0, r3
 80008e2:	f200 80cb 	bhi.w	8000a7c <__udivmoddi4+0x2b0>
 80008e6:	4626      	mov	r6, r4
 80008e8:	1a1c      	subs	r4, r3, r0
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	fb00 f707 	mul.w	r7, r0, r7
 80008f6:	fa1f f38e 	uxth.w	r3, lr
 80008fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fe:	429f      	cmp	r7, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x148>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x146>
 800090c:	429f      	cmp	r7, r3
 800090e:	f200 80ae 	bhi.w	8000a6e <__udivmoddi4+0x2a2>
 8000912:	4620      	mov	r0, r4
 8000914:	1bdb      	subs	r3, r3, r7
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0x9c>
 800091c:	f1c1 0720 	rsb	r7, r1, #32
 8000920:	408b      	lsls	r3, r1
 8000922:	fa22 fc07 	lsr.w	ip, r2, r7
 8000926:	ea4c 0c03 	orr.w	ip, ip, r3
 800092a:	fa24 f607 	lsr.w	r6, r4, r7
 800092e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000932:	fbb6 f8f9 	udiv	r8, r6, r9
 8000936:	fa1f fe8c 	uxth.w	lr, ip
 800093a:	fb09 6618 	mls	r6, r9, r8, r6
 800093e:	fa20 f307 	lsr.w	r3, r0, r7
 8000942:	408c      	lsls	r4, r1
 8000944:	fa00 fa01 	lsl.w	sl, r0, r1
 8000948:	fb08 f00e 	mul.w	r0, r8, lr
 800094c:	431c      	orrs	r4, r3
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000954:	4298      	cmp	r0, r3
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	d90a      	bls.n	8000972 <__udivmoddi4+0x1a6>
 800095c:	eb1c 0303 	adds.w	r3, ip, r3
 8000960:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000964:	f080 8081 	bcs.w	8000a6a <__udivmoddi4+0x29e>
 8000968:	4298      	cmp	r0, r3
 800096a:	d97e      	bls.n	8000a6a <__udivmoddi4+0x29e>
 800096c:	f1a8 0802 	sub.w	r8, r8, #2
 8000970:	4463      	add	r3, ip
 8000972:	1a1e      	subs	r6, r3, r0
 8000974:	fbb6 f3f9 	udiv	r3, r6, r9
 8000978:	fb09 6613 	mls	r6, r9, r3, r6
 800097c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000980:	b2a4      	uxth	r4, r4
 8000982:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000986:	45a6      	cmp	lr, r4
 8000988:	d908      	bls.n	800099c <__udivmoddi4+0x1d0>
 800098a:	eb1c 0404 	adds.w	r4, ip, r4
 800098e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000992:	d266      	bcs.n	8000a62 <__udivmoddi4+0x296>
 8000994:	45a6      	cmp	lr, r4
 8000996:	d964      	bls.n	8000a62 <__udivmoddi4+0x296>
 8000998:	3b02      	subs	r3, #2
 800099a:	4464      	add	r4, ip
 800099c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80009a0:	fba0 8302 	umull	r8, r3, r0, r2
 80009a4:	eba4 040e 	sub.w	r4, r4, lr
 80009a8:	429c      	cmp	r4, r3
 80009aa:	46c6      	mov	lr, r8
 80009ac:	461e      	mov	r6, r3
 80009ae:	d350      	bcc.n	8000a52 <__udivmoddi4+0x286>
 80009b0:	d04d      	beq.n	8000a4e <__udivmoddi4+0x282>
 80009b2:	b155      	cbz	r5, 80009ca <__udivmoddi4+0x1fe>
 80009b4:	ebba 030e 	subs.w	r3, sl, lr
 80009b8:	eb64 0406 	sbc.w	r4, r4, r6
 80009bc:	fa04 f707 	lsl.w	r7, r4, r7
 80009c0:	40cb      	lsrs	r3, r1
 80009c2:	431f      	orrs	r7, r3
 80009c4:	40cc      	lsrs	r4, r1
 80009c6:	e9c5 7400 	strd	r7, r4, [r5]
 80009ca:	2100      	movs	r1, #0
 80009cc:	e751      	b.n	8000872 <__udivmoddi4+0xa6>
 80009ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d2:	f1c2 0320 	rsb	r3, r2, #32
 80009d6:	40d9      	lsrs	r1, r3
 80009d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009dc:	fa20 f303 	lsr.w	r3, r0, r3
 80009e0:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e4:	fbb1 f0f8 	udiv	r0, r1, r8
 80009e8:	fb08 1110 	mls	r1, r8, r0, r1
 80009ec:	4094      	lsls	r4, r2
 80009ee:	431c      	orrs	r4, r3
 80009f0:	fa1f f78c 	uxth.w	r7, ip
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x248>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29a>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29a>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1a:	fb08 3311 	mls	r3, r8, r1, r3
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x272>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x292>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x292>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e73b      	b.n	80008be <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f2      	b.n	8000830 <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e708      	b.n	8000860 <__udivmoddi4+0x94>
 8000a4e:	45c2      	cmp	sl, r8
 8000a50:	d2af      	bcs.n	80009b2 <__udivmoddi4+0x1e6>
 8000a52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a56:	eb63 060c 	sbc.w	r6, r3, ip
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a9      	b.n	80009b2 <__udivmoddi4+0x1e6>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x272>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e79a      	b.n	800099c <__udivmoddi4+0x1d0>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x248>
 8000a6a:	46b0      	mov	r8, r6
 8000a6c:	e781      	b.n	8000972 <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74f      	b.n	8000914 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e711      	b.n	80008a0 <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e732      	b.n	80008e8 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <setup_log_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setup_log_message(char *text) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	@ 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	char message[40];
	sprintf(message, "[%lu] %s setup OK \r\n", HAL_GetTick(), text);
 8000a90:	f001 fd56 	bl	8002540 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f107 0008 	add.w	r0, r7, #8
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	490a      	ldr	r1, [pc, #40]	@ (8000ac8 <setup_log_message+0x40>)
 8000a9e:	f004 faaf 	bl	8005000 <siprintf>
	HAL_UART_Transmit(&huart1, message, strlen(message), 10000);
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fb6a 	bl	8000180 <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f107 0108 	add.w	r1, r7, #8
 8000ab4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <setup_log_message+0x44>)
 8000aba:	f003 fb95 	bl	80041e8 <HAL_UART_Transmit>
}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	0800599c 	.word	0x0800599c
 8000acc:	20000190 	.word	0x20000190

08000ad0 <general_log_message>:

void general_log_message(char *text) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	@ 0x70
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	char message[100];
	sprintf(message, "[%lu] %s \r\n", HAL_GetTick(), text);
 8000ad8:	f001 fd32 	bl	8002540 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f107 000c 	add.w	r0, r7, #12
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	490a      	ldr	r1, [pc, #40]	@ (8000b10 <general_log_message+0x40>)
 8000ae6:	f004 fa8b 	bl	8005000 <siprintf>
	HAL_UART_Transmit(&huart1, message, strlen(message), 10000);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb46 	bl	8000180 <strlen>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	f107 010c 	add.w	r1, r7, #12
 8000afc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <general_log_message+0x44>)
 8000b02:	f003 fb71 	bl	80041e8 <HAL_UART_Transmit>
}
 8000b06:	bf00      	nop
 8000b08:	3770      	adds	r7, #112	@ 0x70
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	080059b4 	.word	0x080059b4
 8000b14:	20000190 	.word	0x20000190

08000b18 <SET_SPEED>:
			HAL_GetTick(), wheel1_speed, wheel2_speed);

	HAL_UART_Transmit(&huart1, message, strlen(message), 10000);
}

void SET_SPEED(unsigned short dc_left, unsigned short dc_right) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	80fb      	strh	r3, [r7, #6]
 8000b24:	4613      	mov	r3, r2
 8000b26:	80bb      	strh	r3, [r7, #4]
	if (MOVEMENT_DIRECTION != STOPPED) {
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <SET_SPEED+0x44>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d00f      	beq.n	8000b50 <SET_SPEED+0x38>
		DC_RIGHT = dc_right;
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <SET_SPEED+0x48>)
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	8013      	strh	r3, [r2, #0]
		DC_LEFT = dc_left;
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <SET_SPEED+0x4c>)
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	8013      	strh	r3, [r2, #0]
		TIM2->CCR3 = DC_LEFT;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <SET_SPEED+0x4c>)
 8000b3e:	881a      	ldrh	r2, [r3, #0]
 8000b40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b44:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = DC_RIGHT;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <SET_SPEED+0x48>)
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b4e:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	200001e4 	.word	0x200001e4
 8000b64:	200001e6 	.word	0x200001e6

08000b68 <TURN_BACKWARDS>:

void TURN_BACKWARDS(unsigned short dc_left, unsigned short dc_right) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	460a      	mov	r2, r1
 8000b72:	80fb      	strh	r3, [r7, #6]
 8000b74:	4613      	mov	r3, r2
 8000b76:	80bb      	strh	r3, [r7, #4]
	MOVEMENT_DIRECTION = BACKWARDS;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <TURN_BACKWARDS+0x80>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]

	FIRST_HALVED = MAX_DC / 2;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <TURN_BACKWARDS+0x84>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	085b      	lsrs	r3, r3, #1
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <TURN_BACKWARDS+0x88>)
 8000b88:	801a      	strh	r2, [r3, #0]
	SECOND_HALVED = (MAX_DC * 3) / 4;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <TURN_BACKWARDS+0x84>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da00      	bge.n	8000b9c <TURN_BACKWARDS+0x34>
 8000b9a:	3303      	adds	r3, #3
 8000b9c:	109b      	asrs	r3, r3, #2
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <TURN_BACKWARDS+0x8c>)
 8000ba2:	801a      	strh	r2, [r3, #0]
	THIRD_HALVED = (MAX_DC * 4) / 5;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <TURN_BACKWARDS+0x84>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <TURN_BACKWARDS+0x90>)
 8000bac:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb0:	1052      	asrs	r2, r2, #1
 8000bb2:	17db      	asrs	r3, r3, #31
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <TURN_BACKWARDS+0x94>)
 8000bba:	801a      	strh	r2, [r3, #0]
	STOPPED_STATE = MAX_DC;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <TURN_BACKWARDS+0x84>)
 8000bbe:	881a      	ldrh	r2, [r3, #0]
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <TURN_BACKWARDS+0x98>)
 8000bc2:	801a      	strh	r2, [r3, #0]

	GPIOB->BSRR = (1 << 13);
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <TURN_BACKWARDS+0x9c>)
 8000bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bca:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1 << 12);
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <TURN_BACKWARDS+0x9c>)
 8000bce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bd2:	619a      	str	r2, [r3, #24]
	SET_SPEED(dc_left, dc_right);
 8000bd4:	88ba      	ldrh	r2, [r7, #4]
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff9c 	bl	8000b18 <SET_SPEED>

}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	200001d8 	.word	0x200001d8
 8000bf0:	200001dc 	.word	0x200001dc
 8000bf4:	200001de 	.word	0x200001de
 8000bf8:	66666667 	.word	0x66666667
 8000bfc:	200001e0 	.word	0x200001e0
 8000c00:	200001e2 	.word	0x200001e2
 8000c04:	40020400 	.word	0x40020400

08000c08 <STOP>:

void STOP(bool change_state) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	if (MOVEMENT_DIRECTION == FORWARD) {
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <STOP+0x48>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d104      	bne.n	8000c24 <STOP+0x1c>
		SET_SPEED(0, 0);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff ff7b 	bl	8000b18 <SET_SPEED>
 8000c22:	e007      	b.n	8000c34 <STOP+0x2c>
	} else if (MOVEMENT_DIRECTION == BACKWARDS) {
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <STOP+0x48>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d103      	bne.n	8000c34 <STOP+0x2c>
		SET_SPEED(100, 100);
 8000c2c:	2164      	movs	r1, #100	@ 0x64
 8000c2e:	2064      	movs	r0, #100	@ 0x64
 8000c30:	f7ff ff72 	bl	8000b18 <SET_SPEED>
	}
	if (change_state) {
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <STOP+0x3e>
		MOVEMENT_DIRECTION = STOPPED;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <STOP+0x48>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	701a      	strb	r2, [r3, #0]
		general_log_message("Stopping...");
 8000c40:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <STOP+0x4c>)
 8000c42:	f7ff ff45 	bl	8000ad0 <general_log_message>
	}
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000000 	.word	0x20000000
 8000c54:	08005a0c 	.word	0x08005a0c

08000c58 <TURN_FORWARD>:

void TURN_FORWARD(unsigned short dc_left, unsigned short dc_right) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4613      	mov	r3, r2
 8000c66:	80bb      	strh	r3, [r7, #4]
	MOVEMENT_DIRECTION = FORWARD;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <TURN_FORWARD+0x6c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]

	FIRST_HALVED = MAX_DC / 2;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <TURN_FORWARD+0x70>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <TURN_FORWARD+0x74>)
 8000c78:	801a      	strh	r2, [r3, #0]
	SECOND_HALVED = MAX_DC / 4;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <TURN_FORWARD+0x70>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <TURN_FORWARD+0x78>)
 8000c84:	801a      	strh	r2, [r3, #0]
	THIRD_HALVED = MAX_DC / 5;
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <TURN_FORWARD+0x70>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <TURN_FORWARD+0x7c>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <TURN_FORWARD+0x80>)
 8000c96:	801a      	strh	r2, [r3, #0]
	STOPPED_STATE = 0;
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <TURN_FORWARD+0x84>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]

	GPIOB->BSRR = (1 << 13) << 16;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <TURN_FORWARD+0x88>)
 8000ca0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ca4:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1 << 12) << 16;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <TURN_FORWARD+0x88>)
 8000ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cac:	619a      	str	r2, [r3, #24]
	SET_SPEED(dc_left, dc_right);
 8000cae:	88ba      	ldrh	r2, [r7, #4]
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff2f 	bl	8000b18 <SET_SPEED>

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	200001d8 	.word	0x200001d8
 8000ccc:	200001dc 	.word	0x200001dc
 8000cd0:	200001de 	.word	0x200001de
 8000cd4:	cccccccd 	.word	0xcccccccd
 8000cd8:	200001e0 	.word	0x200001e0
 8000cdc:	200001e2 	.word	0x200001e2
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <TURN_DIRECTION>:

void TURN_DIRECTION() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	if (MOVEMENT_DIRECTION == FORWARD) {
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <TURN_DIRECTION+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10b      	bne.n	8000d08 <TURN_DIRECTION+0x24>
		TURN_BACKWARDS(INVERTED_MAX_DC, INVERTED_MAX_DC);
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <TURN_DIRECTION+0x5c>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <TURN_DIRECTION+0x5c>)
 8000cf6:	8812      	ldrh	r2, [r2, #0]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff34 	bl	8000b68 <TURN_BACKWARDS>
		general_log_message("Turn backwards");
 8000d00:	4810      	ldr	r0, [pc, #64]	@ (8000d44 <TURN_DIRECTION+0x60>)
 8000d02:	f7ff fee5 	bl	8000ad0 <general_log_message>
	} else if (MOVEMENT_DIRECTION == STOPPED) {
		TURN_FORWARD(MAX_DC, MAX_DC);
		general_log_message("Turn forwards");

	}
}
 8000d06:	e016      	b.n	8000d36 <TURN_DIRECTION+0x52>
	} else if (MOVEMENT_DIRECTION == BACKWARDS) {
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <TURN_DIRECTION+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d103      	bne.n	8000d18 <TURN_DIRECTION+0x34>
		STOP(true);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff ff79 	bl	8000c08 <STOP>
}
 8000d16:	e00e      	b.n	8000d36 <TURN_DIRECTION+0x52>
	} else if (MOVEMENT_DIRECTION == STOPPED) {
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <TURN_DIRECTION+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10a      	bne.n	8000d36 <TURN_DIRECTION+0x52>
		TURN_FORWARD(MAX_DC, MAX_DC);
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <TURN_DIRECTION+0x64>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <TURN_DIRECTION+0x64>)
 8000d26:	8812      	ldrh	r2, [r2, #0]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff94 	bl	8000c58 <TURN_FORWARD>
		general_log_message("Turn forwards");
 8000d30:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <TURN_DIRECTION+0x68>)
 8000d32:	f7ff fecd 	bl	8000ad0 <general_log_message>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	200001da 	.word	0x200001da
 8000d44:	08005a18 	.word	0x08005a18
 8000d48:	200001d8 	.word	0x200001d8
 8000d4c:	08005a28 	.word	0x08005a28

08000d50 <SETUP_WHEELS>:
void SETUP_WHEELS() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

	GPIOB->MODER |= (1 << (11 * 2 + 1));
 8000d54:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d5e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 11 * 2);
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a22      	ldr	r2, [pc, #136]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d66:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000d6a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] &= ~(0xF << 12);
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d70:	4a1f      	ldr	r2, [pc, #124]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000d76:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1 << 12);
 8000d78:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d82:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->MODER |= (1 << (10 * 2 + 1));
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d8e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << (10 * 2));
 8000d90:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d96:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000d9a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] &= ~(0xF << 8);
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da0:	4a13      	ldr	r2, [pc, #76]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000da2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000da6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1 << 8);
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dac:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->MODER &= ~(1 << (13 * 2 + 1));
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dba:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000dbe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << 13 * 2);
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dca:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1 << (12 * 2 + 1));
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000dd6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << 12 * 2);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <SETUP_WHEELS+0xa0>)
 8000dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000de2:	6013      	str	r3, [r2, #0]

	setup_log_message("Wheels");
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <SETUP_WHEELS+0xa4>)
 8000de6:	f7ff fe4f 	bl	8000a88 <setup_log_message>

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40020400 	.word	0x40020400
 8000df4:	08005a38 	.word	0x08005a38

08000df8 <TURN_90_RIGHT>:
void TURN_90_RIGHT(bool backwards) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	enum direction temp = MOVEMENT_DIRECTION;
 8000e02:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <TURN_90_RIGHT+0xb4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	73fb      	strb	r3, [r7, #15]
	TIM4->DIER = 0x0002;
 8000e08:	4b29      	ldr	r3, [pc, #164]	@ (8000eb0 <TURN_90_RIGHT+0xb8>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	60da      	str	r2, [r3, #12]

	STOP(true);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff fefa 	bl	8000c08 <STOP>
	general_log_message("Turning 90 degrees to the Right");
 8000e14:	4827      	ldr	r0, [pc, #156]	@ (8000eb4 <TURN_90_RIGHT+0xbc>)
 8000e16:	f7ff fe5b 	bl	8000ad0 <general_log_message>

	COUNT = 0;
 8000e1a:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <TURN_90_RIGHT+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	801a      	strh	r2, [r3, #0]
	while (COUNT != 5) {
 8000e20:	bf00      	nop
 8000e22:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <TURN_90_RIGHT+0xc0>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d1fb      	bne.n	8000e22 <TURN_90_RIGHT+0x2a>
	}

	if (backwards) {
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <TURN_90_RIGHT+0x42>
		TURN_BACKWARDS(0, 100);
 8000e30:	2164      	movs	r1, #100	@ 0x64
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fe98 	bl	8000b68 <TURN_BACKWARDS>
 8000e38:	e003      	b.n	8000e42 <TURN_90_RIGHT+0x4a>
	} else {
		TURN_FORWARD(100, 0);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2064      	movs	r0, #100	@ 0x64
 8000e3e:	f7ff ff0b 	bl	8000c58 <TURN_FORWARD>
	}

	COUNT = 0;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <TURN_90_RIGHT+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	801a      	strh	r2, [r3, #0]
	while (COUNT != 7) {
 8000e48:	bf00      	nop
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <TURN_90_RIGHT+0xc0>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	2b07      	cmp	r3, #7
 8000e50:	d1fb      	bne.n	8000e4a <TURN_90_RIGHT+0x52>
	}

	STOP(true);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fed8 	bl	8000c08 <STOP>
	COUNT = 0;
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <TURN_90_RIGHT+0xc0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
	while (COUNT != 5) {
 8000e5e:	bf00      	nop
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <TURN_90_RIGHT+0xc0>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d1fb      	bne.n	8000e60 <TURN_90_RIGHT+0x68>
	}
	TIM4->DIER = 0x0008;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <TURN_90_RIGHT+0xb8>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	60da      	str	r2, [r3, #12]

	if (temp == FORWARD) {
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d108      	bne.n	8000e86 <TURN_90_RIGHT+0x8e>
		TURN_FORWARD(MAX_DC, MAX_DC);
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <TURN_90_RIGHT+0xc4>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <TURN_90_RIGHT+0xc4>)
 8000e7a:	8812      	ldrh	r2, [r2, #0]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff feea 	bl	8000c58 <TURN_FORWARD>
 8000e84:	e00a      	b.n	8000e9c <TURN_90_RIGHT+0xa4>
	} else if (temp == BACKWARDS) {
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d107      	bne.n	8000e9c <TURN_90_RIGHT+0xa4>
		TURN_BACKWARDS(INVERTED_MAX_DC, INVERTED_MAX_DC);
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <TURN_90_RIGHT+0xc8>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <TURN_90_RIGHT+0xc8>)
 8000e92:	8812      	ldrh	r2, [r2, #0]
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fe66 	bl	8000b68 <TURN_BACKWARDS>
	}
	COUNT = 0;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <TURN_90_RIGHT+0xc0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	801a      	strh	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	40000800 	.word	0x40000800
 8000eb4:	08005a40 	.word	0x08005a40
 8000eb8:	200001f4 	.word	0x200001f4
 8000ebc:	200001d8 	.word	0x200001d8
 8000ec0:	200001da 	.word	0x200001da

08000ec4 <TURN_90_LEFT>:

void TURN_90_LEFT(bool backwards) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	enum direction temp = MOVEMENT_DIRECTION;
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <TURN_90_LEFT+0xac>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	73fb      	strb	r3, [r7, #15]
	TIM4->DIER = 0x0002;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <TURN_90_LEFT+0xb0>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	60da      	str	r2, [r3, #12]
	STOP(true);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff fe94 	bl	8000c08 <STOP>
	general_log_message("Turning 90 degrees to the left");
 8000ee0:	4825      	ldr	r0, [pc, #148]	@ (8000f78 <TURN_90_LEFT+0xb4>)
 8000ee2:	f7ff fdf5 	bl	8000ad0 <general_log_message>
	while (COUNT != 5) {
 8000ee6:	bf00      	nop
 8000ee8:	4b24      	ldr	r3, [pc, #144]	@ (8000f7c <TURN_90_LEFT+0xb8>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d1fb      	bne.n	8000ee8 <TURN_90_LEFT+0x24>
	}
	if (backwards) {
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <TURN_90_LEFT+0x3c>

		TURN_BACKWARDS(100, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2064      	movs	r0, #100	@ 0x64
 8000efa:	f7ff fe35 	bl	8000b68 <TURN_BACKWARDS>
 8000efe:	e003      	b.n	8000f08 <TURN_90_LEFT+0x44>
	} else {

		TURN_FORWARD(0, 100);
 8000f00:	2164      	movs	r1, #100	@ 0x64
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fea8 	bl	8000c58 <TURN_FORWARD>
	}
	COUNT = 0;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <TURN_90_LEFT+0xb8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	801a      	strh	r2, [r3, #0]
	while (COUNT != 7) {
 8000f0e:	bf00      	nop
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <TURN_90_LEFT+0xb8>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	2b07      	cmp	r3, #7
 8000f16:	d1fb      	bne.n	8000f10 <TURN_90_LEFT+0x4c>
	}
	STOP(true);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fe75 	bl	8000c08 <STOP>
	COUNT = 0;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <TURN_90_LEFT+0xb8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	801a      	strh	r2, [r3, #0]
	while (COUNT != 5) {
 8000f24:	bf00      	nop
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <TURN_90_LEFT+0xb8>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	2b05      	cmp	r3, #5
 8000f2c:	d1fb      	bne.n	8000f26 <TURN_90_LEFT+0x62>
	}
	TIM4->DIER = 0x0008;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <TURN_90_LEFT+0xb0>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	60da      	str	r2, [r3, #12]
	if (temp == FORWARD) {
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d108      	bne.n	8000f4c <TURN_90_LEFT+0x88>
		TURN_FORWARD(MAX_DC, MAX_DC);
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <TURN_90_LEFT+0xbc>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <TURN_90_LEFT+0xbc>)
 8000f40:	8812      	ldrh	r2, [r2, #0]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe87 	bl	8000c58 <TURN_FORWARD>
 8000f4a:	e00a      	b.n	8000f62 <TURN_90_LEFT+0x9e>
	} else if (temp == BACKWARDS) {
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d107      	bne.n	8000f62 <TURN_90_LEFT+0x9e>
		TURN_BACKWARDS(INVERTED_MAX_DC, INVERTED_MAX_DC);
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <TURN_90_LEFT+0xc0>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	4a0b      	ldr	r2, [pc, #44]	@ (8000f84 <TURN_90_LEFT+0xc0>)
 8000f58:	8812      	ldrh	r2, [r2, #0]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe03 	bl	8000b68 <TURN_BACKWARDS>
	}

	COUNT = 0;
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <TURN_90_LEFT+0xb8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	801a      	strh	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	40000800 	.word	0x40000800
 8000f78:	08005a60 	.word	0x08005a60
 8000f7c:	200001f4 	.word	0x200001f4
 8000f80:	200001d8 	.word	0x200001d8
 8000f84:	200001da 	.word	0x200001da

08000f88 <SETUP_PWM>:
void SETUP_PWM() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	TIM2->CR1 = 0x0080;
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	601a      	str	r2, [r3, #0]
	TIM2->CR2 = 0x0000;
 8000f94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
	TIM2->SMCR = 0x0000;
 8000f9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 32000;
 8000fa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fa8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->CNT = 0;
 8000fae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->ARR = 99;
 8000fb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fba:	2263      	movs	r2, #99	@ 0x63
 8000fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->DIER = 0x0000;
 8000fbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
	TIM2->CCMR2 = 0x6868;
 8000fc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fca:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000fce:	61da      	str	r2, [r3, #28]
	TIM2->CCER = 0x1100;
 8000fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd4:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8000fd8:	621a      	str	r2, [r3, #32]
	TIM2->EGR |= 0x0001;
 8000fda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= 0x0001;
 8000fea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6013      	str	r3, [r2, #0]
	TIM2->SR = 0;
 8000ffa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]

	setup_log_message("PWM");
 8001002:	4802      	ldr	r0, [pc, #8]	@ (800100c <SETUP_PWM+0x84>)
 8001004:	f7ff fd40 	bl	8000a88 <setup_log_message>

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	08005a80 	.word	0x08005a80

08001010 <CYCLE_TURN_POSITION>:

void CYCLE_TURN_POSITION() {
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	switch (TURN_POSITION) {
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <CYCLE_TURN_POSITION+0x5c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d821      	bhi.n	8001060 <CYCLE_TURN_POSITION+0x50>
 800101c:	a201      	add	r2, pc, #4	@ (adr r2, 8001024 <CYCLE_TURN_POSITION+0x14>)
 800101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001022:	bf00      	nop
 8001024:	08001039 	.word	0x08001039
 8001028:	08001041 	.word	0x08001041
 800102c:	08001049 	.word	0x08001049
 8001030:	08001051 	.word	0x08001051
 8001034:	08001059 	.word	0x08001059
	case CLEAR:
		TURN_POSITION = FIRST_OBSTACLE_BACKWARDS;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <CYCLE_TURN_POSITION+0x5c>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
		break;
 800103e:	e010      	b.n	8001062 <CYCLE_TURN_POSITION+0x52>
	case FIRST_OBSTACLE_BACKWARDS:
		TURN_POSITION = FIRST_OBSTACLE_FORWARD;
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <CYCLE_TURN_POSITION+0x5c>)
 8001042:	2202      	movs	r2, #2
 8001044:	701a      	strb	r2, [r3, #0]
		break;
 8001046:	e00c      	b.n	8001062 <CYCLE_TURN_POSITION+0x52>
	case FIRST_OBSTACLE_FORWARD:
		TURN_POSITION = SECOND_OBSTACLE_BACKWARDS;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <CYCLE_TURN_POSITION+0x5c>)
 800104a:	2203      	movs	r2, #3
 800104c:	701a      	strb	r2, [r3, #0]
		break;
 800104e:	e008      	b.n	8001062 <CYCLE_TURN_POSITION+0x52>
	case SECOND_OBSTACLE_BACKWARDS:
		TURN_POSITION = SECOND_OBSTACLE_FORWARD;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <CYCLE_TURN_POSITION+0x5c>)
 8001052:	2204      	movs	r2, #4
 8001054:	701a      	strb	r2, [r3, #0]
		break;
 8001056:	e004      	b.n	8001062 <CYCLE_TURN_POSITION+0x52>
	case SECOND_OBSTACLE_FORWARD:
		TURN_POSITION = DOOMED;
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <CYCLE_TURN_POSITION+0x5c>)
 800105a:	2205      	movs	r2, #5
 800105c:	701a      	strb	r2, [r3, #0]
		break;
 800105e:	e000      	b.n	8001062 <CYCLE_TURN_POSITION+0x52>
	default:
		break;
 8001060:	bf00      	nop
	}
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200001fa 	.word	0x200001fa

08001070 <BUZZ>:

void BUZZ() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	if (CRITICAL_CLOSE) {
 8001074:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <BUZZ+0xc0>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <BUZZ+0x14>
		TIM4->CCMR2 = 0x0050;
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <BUZZ+0xc4>)
 800107e:	2250      	movs	r2, #80	@ 0x50
 8001080:	61da      	str	r2, [r3, #28]
 8001082:	e04b      	b.n	800111c <BUZZ+0xac>
	} else if (CLOSE) {
 8001084:	4b2c      	ldr	r3, [pc, #176]	@ (8001138 <BUZZ+0xc8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <BUZZ+0x34>
		TIM4->CCMR2 = 0x0030;
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <BUZZ+0xc4>)
 800108e:	2230      	movs	r2, #48	@ 0x30
 8001090:	61da      	str	r2, [r3, #28]
		SET_SPEED(THIRD_HALVED, THIRD_HALVED);
 8001092:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <BUZZ+0xcc>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4a29      	ldr	r2, [pc, #164]	@ (800113c <BUZZ+0xcc>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fd3b 	bl	8000b18 <SET_SPEED>
 80010a2:	e03b      	b.n	800111c <BUZZ+0xac>
	}

	else if (MEDIUM) {
 80010a4:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <BUZZ+0xd0>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <BUZZ+0x54>
		TIM4->CCMR2 = 0x0030;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <BUZZ+0xc4>)
 80010ae:	2230      	movs	r2, #48	@ 0x30
 80010b0:	61da      	str	r2, [r3, #28]
		SET_SPEED(SECOND_HALVED, SECOND_HALVED);
 80010b2:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <BUZZ+0xd4>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	4a23      	ldr	r2, [pc, #140]	@ (8001144 <BUZZ+0xd4>)
 80010b8:	8812      	ldrh	r2, [r2, #0]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fd2b 	bl	8000b18 <SET_SPEED>
 80010c2:	e02b      	b.n	800111c <BUZZ+0xac>
	}

	else if (RELATIVELY_FAR) {
 80010c4:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <BUZZ+0xd8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <BUZZ+0x74>
		TIM4->CCMR2 = 0x0040;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <BUZZ+0xc4>)
 80010ce:	2240      	movs	r2, #64	@ 0x40
 80010d0:	61da      	str	r2, [r3, #28]

		SET_SPEED(FIRST_HALVED, FIRST_HALVED);
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <BUZZ+0xdc>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <BUZZ+0xdc>)
 80010d8:	8812      	ldrh	r2, [r2, #0]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fd1b 	bl	8000b18 <SET_SPEED>
 80010e2:	e01b      	b.n	800111c <BUZZ+0xac>
	}

	else {
		TIM4->CCMR2 = 0x0040;
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <BUZZ+0xc4>)
 80010e6:	2240      	movs	r2, #64	@ 0x40
 80010e8:	61da      	str	r2, [r3, #28]
		if (MOVEMENT_DIRECTION == FORWARD) {
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <BUZZ+0xe0>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d108      	bne.n	8001104 <BUZZ+0x94>
			SET_SPEED(MAX_DC, MAX_DC);
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <BUZZ+0xe4>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <BUZZ+0xe4>)
 80010f8:	8812      	ldrh	r2, [r2, #0]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd0b 	bl	8000b18 <SET_SPEED>
 8001102:	e00b      	b.n	800111c <BUZZ+0xac>

		} else if (MOVEMENT_DIRECTION == BACKWARDS) {
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <BUZZ+0xe0>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <BUZZ+0xac>
			SET_SPEED(INVERTED_MAX_DC, INVERTED_MAX_DC);
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <BUZZ+0xe8>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <BUZZ+0xe8>)
 8001112:	8812      	ldrh	r2, [r2, #0]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fcfe 	bl	8000b18 <SET_SPEED>

		}

	}
	TIM2->EGR |= 0x0001;
 800111c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6153      	str	r3, [r2, #20]
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001f6 	.word	0x200001f6
 8001134:	40000800 	.word	0x40000800
 8001138:	200001f7 	.word	0x200001f7
 800113c:	200001e0 	.word	0x200001e0
 8001140:	200001f8 	.word	0x200001f8
 8001144:	200001de 	.word	0x200001de
 8001148:	200001f9 	.word	0x200001f9
 800114c:	200001dc 	.word	0x200001dc
 8001150:	20000000 	.word	0x20000000
 8001154:	200001d8 	.word	0x200001d8
 8001158:	200001da 	.word	0x200001da

0800115c <MEASSURE>:

void MEASSURE() {
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

	if (((DISTANCE_U1 / 2) <= CRITICAL_CLOSE_DISTANCE && DISTANCE_U1 != 0)
 8001160:	4b5b      	ldr	r3, [pc, #364]	@ (80012d0 <MEASSURE+0x174>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	085b      	lsrs	r3, r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	4a5a      	ldr	r2, [pc, #360]	@ (80012d4 <MEASSURE+0x178>)
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	4293      	cmp	r3, r2
 800116e:	d803      	bhi.n	8001178 <MEASSURE+0x1c>
 8001170:	4b57      	ldr	r3, [pc, #348]	@ (80012d0 <MEASSURE+0x174>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d107      	bne.n	8001188 <MEASSURE+0x2c>
			|| ((DISTANCE_U2 / 2) <= 5 && DISTANCE_U2 != 0)) {
 8001178:	4b57      	ldr	r3, [pc, #348]	@ (80012d8 <MEASSURE+0x17c>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	2b0b      	cmp	r3, #11
 800117e:	d81b      	bhi.n	80011b8 <MEASSURE+0x5c>
 8001180:	4b55      	ldr	r3, [pc, #340]	@ (80012d8 <MEASSURE+0x17c>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d017      	beq.n	80011b8 <MEASSURE+0x5c>
		if (TURN_POSITION == CLEAR && MOVEMENT_DIRECTION != STOPPED) {
 8001188:	4b54      	ldr	r3, [pc, #336]	@ (80012dc <MEASSURE+0x180>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d106      	bne.n	800119e <MEASSURE+0x42>
 8001190:	4b53      	ldr	r3, [pc, #332]	@ (80012e0 <MEASSURE+0x184>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d002      	beq.n	800119e <MEASSURE+0x42>
			TURN_POSITION = FIRST_OBSTACLE_BACKWARDS;
 8001198:	4b50      	ldr	r3, [pc, #320]	@ (80012dc <MEASSURE+0x180>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
		}
		CRITICAL_CLOSE = true;
 800119e:	4b51      	ldr	r3, [pc, #324]	@ (80012e4 <MEASSURE+0x188>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 80011a4:	4b50      	ldr	r3, [pc, #320]	@ (80012e8 <MEASSURE+0x18c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 80011aa:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <MEASSURE+0x190>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 80011b0:	4b4f      	ldr	r3, [pc, #316]	@ (80012f0 <MEASSURE+0x194>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e087      	b.n	80012c8 <MEASSURE+0x16c>
	} else if (((DISTANCE_U2 / 2) > CRITICAL_CLOSE_DISTANCE
 80011b8:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <MEASSURE+0x17c>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	085b      	lsrs	r3, r3, #1
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <MEASSURE+0x178>)
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d907      	bls.n	80011d8 <MEASSURE+0x7c>
			&& (DISTANCE_U2 / 2) <= CLOSE_DISTANCE)
 80011c8:	4b43      	ldr	r3, [pc, #268]	@ (80012d8 <MEASSURE+0x17c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4a48      	ldr	r2, [pc, #288]	@ (80012f4 <MEASSURE+0x198>)
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d907      	bls.n	80011e8 <MEASSURE+0x8c>
			|| ((DISTANCE_U1 / 2) > 5 && (DISTANCE_U1 / 2) <= 10)) {
 80011d8:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <MEASSURE+0x174>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b0b      	cmp	r3, #11
 80011de:	d913      	bls.n	8001208 <MEASSURE+0xac>
 80011e0:	4b3b      	ldr	r3, [pc, #236]	@ (80012d0 <MEASSURE+0x174>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2b15      	cmp	r3, #21
 80011e6:	d80f      	bhi.n	8001208 <MEASSURE+0xac>
		TURN_POSITION = CLEAR;
 80011e8:	4b3c      	ldr	r3, [pc, #240]	@ (80012dc <MEASSURE+0x180>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 80011ee:	4b3d      	ldr	r3, [pc, #244]	@ (80012e4 <MEASSURE+0x188>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
		CLOSE = true;
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <MEASSURE+0x18c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 80011fa:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <MEASSURE+0x190>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 8001200:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <MEASSURE+0x194>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e05f      	b.n	80012c8 <MEASSURE+0x16c>

	} else if (((DISTANCE_U2 / 2) > CLOSE_DISTANCE
 8001208:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <MEASSURE+0x17c>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	085b      	lsrs	r3, r3, #1
 800120e:	b29b      	uxth	r3, r3
 8001210:	4a38      	ldr	r2, [pc, #224]	@ (80012f4 <MEASSURE+0x198>)
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	4293      	cmp	r3, r2
 8001216:	d907      	bls.n	8001228 <MEASSURE+0xcc>
			&& (DISTANCE_U2 / 2) <= MEDIUM_DISTANCE)
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <MEASSURE+0x17c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	4a35      	ldr	r2, [pc, #212]	@ (80012f8 <MEASSURE+0x19c>)
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	4293      	cmp	r3, r2
 8001226:	d907      	bls.n	8001238 <MEASSURE+0xdc>
			|| ((DISTANCE_U1 / 2) > 10 && (DISTANCE_U1 / 2) <= 20)) {
 8001228:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <MEASSURE+0x174>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	2b15      	cmp	r3, #21
 800122e:	d913      	bls.n	8001258 <MEASSURE+0xfc>
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <MEASSURE+0x174>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	2b29      	cmp	r3, #41	@ 0x29
 8001236:	d80f      	bhi.n	8001258 <MEASSURE+0xfc>
		TURN_POSITION = CLEAR;
 8001238:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <MEASSURE+0x180>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 800123e:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <MEASSURE+0x188>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <MEASSURE+0x18c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		MEDIUM = true;
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <MEASSURE+0x190>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <MEASSURE+0x194>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	e037      	b.n	80012c8 <MEASSURE+0x16c>

	} else if (((DISTANCE_U2 / 2) > MEDIUM_DISTANCE
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MEASSURE+0x17c>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	4a25      	ldr	r2, [pc, #148]	@ (80012f8 <MEASSURE+0x19c>)
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	4293      	cmp	r3, r2
 8001266:	d907      	bls.n	8001278 <MEASSURE+0x11c>
			&& (DISTANCE_U2 / 2) <= RELATIVELY_FAR_DISTANCE)
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MEASSURE+0x17c>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	085b      	lsrs	r3, r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <MEASSURE+0x1a0>)
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	4293      	cmp	r3, r2
 8001276:	d907      	bls.n	8001288 <MEASSURE+0x12c>
			|| ((DISTANCE_U1 / 2) > 20 && (DISTANCE_U1 / 2) <= 30)) {
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MEASSURE+0x174>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	2b29      	cmp	r3, #41	@ 0x29
 800127e:	d913      	bls.n	80012a8 <MEASSURE+0x14c>
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MEASSURE+0x174>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	2b3d      	cmp	r3, #61	@ 0x3d
 8001286:	d80f      	bhi.n	80012a8 <MEASSURE+0x14c>
		TURN_POSITION = CLEAR;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MEASSURE+0x180>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MEASSURE+0x188>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MEASSURE+0x18c>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MEASSURE+0x190>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = true;
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MEASSURE+0x194>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e00f      	b.n	80012c8 <MEASSURE+0x16c>

	} else {
		TURN_POSITION = CLEAR;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MEASSURE+0x180>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <MEASSURE+0x188>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MEASSURE+0x18c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MEASSURE+0x190>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MEASSURE+0x194>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	}
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	200001ec 	.word	0x200001ec
 80012d4:	20000001 	.word	0x20000001
 80012d8:	200001f2 	.word	0x200001f2
 80012dc:	200001fa 	.word	0x200001fa
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200001f6 	.word	0x200001f6
 80012e8:	200001f7 	.word	0x200001f7
 80012ec:	200001f8 	.word	0x200001f8
 80012f0:	200001f9 	.word	0x200001f9
 80012f4:	20000210 	.word	0x20000210
 80012f8:	20000211 	.word	0x20000211
 80012fc:	20000212 	.word	0x20000212

08001300 <START_COUNTER_3>:

void START_COUNTER_3() {
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	TIM3->SR = 0;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <START_COUNTER_3+0x38>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
	TIM3->EGR |= (1 << 0);
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <START_COUNTER_3+0x38>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <START_COUNTER_3+0x38>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= 0x0001;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <START_COUNTER_3+0x38>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a07      	ldr	r2, [pc, #28]	@ (8001338 <START_COUNTER_3+0x38>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] |= (1 << 29);
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <START_COUNTER_3+0x3c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <START_COUNTER_3+0x3c>)
 8001328:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800132c:	6013      	str	r3, [r2, #0]

}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40000400 	.word	0x40000400
 800133c:	e000e100 	.word	0xe000e100

08001340 <START_COUNTER_2>:

void START_COUNTER_2() {
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	TIM4->SR = 0;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <START_COUNTER_2+0x2c>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
	TIM4->CR1 |= 0x0001;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <START_COUNTER_2+0x2c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a07      	ldr	r2, [pc, #28]	@ (800136c <START_COUNTER_2+0x2c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] |= (1 << 30);
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <START_COUNTER_2+0x30>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <START_COUNTER_2+0x30>)
 800135c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001360:	6013      	str	r3, [r2, #0]

}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40000800 	.word	0x40000800
 8001370:	e000e100 	.word	0xe000e100
 8001374:	00000000 	.word	0x00000000

08001378 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

	if ((TIM3->SR & (1 << 2)) != 0) {
 800137c:	4b42      	ldr	r3, [pc, #264]	@ (8001488 <TIM3_IRQHandler+0x110>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d02e      	beq.n	80013e6 <TIM3_IRQHandler+0x6e>
		if ((GPIOC->IDR & 0x80) != 0) {
 8001388:	4b40      	ldr	r3, [pc, #256]	@ (800148c <TIM3_IRQHandler+0x114>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <TIM3_IRQHandler+0x28>
			RELATIVE_INIT_U1 = TIM3->CCR2;
 8001394:	4b3c      	ldr	r3, [pc, #240]	@ (8001488 <TIM3_IRQHandler+0x110>)
 8001396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b3d      	ldr	r3, [pc, #244]	@ (8001490 <TIM3_IRQHandler+0x118>)
 800139c:	801a      	strh	r2, [r3, #0]
 800139e:	e01c      	b.n	80013da <TIM3_IRQHandler+0x62>
		} else {
			PULSE_TIME_U1 = TIM3->CCR2 - RELATIVE_INIT_U1;
 80013a0:	4b39      	ldr	r3, [pc, #228]	@ (8001488 <TIM3_IRQHandler+0x110>)
 80013a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001490 <TIM3_IRQHandler+0x118>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b39      	ldr	r3, [pc, #228]	@ (8001494 <TIM3_IRQHandler+0x11c>)
 80013b0:	801a      	strh	r2, [r3, #0]
			DISTANCE_U1 = 0.034 * PULSE_TIME_U1;
 80013b2:	4b38      	ldr	r3, [pc, #224]	@ (8001494 <TIM3_IRQHandler+0x11c>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f966 	bl	8000688 <__aeabi_i2d>
 80013bc:	a330      	add	r3, pc, #192	@ (adr r3, 8001480 <TIM3_IRQHandler+0x108>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7fe fee5 	bl	8000190 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff f9c5 	bl	800075c <__aeabi_d2uiz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <TIM3_IRQHandler+0x120>)
 80013d8:	801a      	strh	r2, [r3, #0]
		}

		TIM3->SR &= ~(0x0004);
 80013da:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <TIM3_IRQHandler+0x110>)
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	4a2a      	ldr	r2, [pc, #168]	@ (8001488 <TIM3_IRQHandler+0x110>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6113      	str	r3, [r2, #16]
	}
	if ((TIM3->SR & (1 << 4)) != 0) {
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <TIM3_IRQHandler+0x110>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d02e      	beq.n	8001450 <TIM3_IRQHandler+0xd8>
		if ((GPIOC->IDR & 0x200) != 0) {
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <TIM3_IRQHandler+0x114>)
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <TIM3_IRQHandler+0x92>
			RELATIVE_INIT_U2 = TIM3->CCR4;
 80013fe:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <TIM3_IRQHandler+0x110>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b25      	ldr	r3, [pc, #148]	@ (800149c <TIM3_IRQHandler+0x124>)
 8001406:	801a      	strh	r2, [r3, #0]
 8001408:	e01c      	b.n	8001444 <TIM3_IRQHandler+0xcc>
		} else {
			PULSE_TIME_U2 = TIM3->CCR4 - RELATIVE_INIT_U2;
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <TIM3_IRQHandler+0x110>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <TIM3_IRQHandler+0x124>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <TIM3_IRQHandler+0x128>)
 800141a:	801a      	strh	r2, [r3, #0]
			DISTANCE_U2 = 0.034 * PULSE_TIME_U2;
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <TIM3_IRQHandler+0x128>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f931 	bl	8000688 <__aeabi_i2d>
 8001426:	a316      	add	r3, pc, #88	@ (adr r3, 8001480 <TIM3_IRQHandler+0x108>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7fe feb0 	bl	8000190 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff f990 	bl	800075c <__aeabi_d2uiz>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <TIM3_IRQHandler+0x12c>)
 8001442:	801a      	strh	r2, [r3, #0]
		}
		TIM3->SR &= ~(0x0010);
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <TIM3_IRQHandler+0x110>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <TIM3_IRQHandler+0x110>)
 800144a:	f023 0310 	bic.w	r3, r3, #16
 800144e:	6113      	str	r3, [r2, #16]
	}
	if ((TIM3->SR & (1 << 1)) != 0) {
 8001450:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <TIM3_IRQHandler+0x110>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00d      	beq.n	8001478 <TIM3_IRQHandler+0x100>
		GPIOC->BSRR = (1 << 6) << 16;
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <TIM3_IRQHandler+0x114>)
 800145e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001462:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1 << 8) << 16;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <TIM3_IRQHandler+0x114>)
 8001466:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800146a:	619a      	str	r2, [r3, #24]

		TIM3->SR &= ~(0x0002);
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <TIM3_IRQHandler+0x110>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <TIM3_IRQHandler+0x110>)
 8001472:	f023 0302 	bic.w	r3, r3, #2
 8001476:	6113      	str	r3, [r2, #16]
	}
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	b020c49c 	.word	0xb020c49c
 8001484:	3fa16872 	.word	0x3fa16872
 8001488:	40000400 	.word	0x40000400
 800148c:	40020800 	.word	0x40020800
 8001490:	200001e8 	.word	0x200001e8
 8001494:	200001ea 	.word	0x200001ea
 8001498:	200001ec 	.word	0x200001ec
 800149c:	200001ee 	.word	0x200001ee
 80014a0:	200001f0 	.word	0x200001f0
 80014a4:	200001f2 	.word	0x200001f2

080014a8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0

	if ((TIM4->SR & TIM_SR_CC3IF) && (TIM4->DIER & TIM_DIER_CC3IE)) {
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <TIM4_IRQHandler+0x74>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d017      	beq.n	80014e8 <TIM4_IRQHandler+0x40>
 80014b8:	4b18      	ldr	r3, [pc, #96]	@ (800151c <TIM4_IRQHandler+0x74>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d011      	beq.n	80014e8 <TIM4_IRQHandler+0x40>
		BUZZ();
 80014c4:	f7ff fdd4 	bl	8001070 <BUZZ>

		GPIOC->BSRR = (1 << 6);
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <TIM4_IRQHandler+0x78>)
 80014ca:	2240      	movs	r2, #64	@ 0x40
 80014cc:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1 << 8);
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <TIM4_IRQHandler+0x78>)
 80014d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014d4:	619a      	str	r2, [r3, #24]

		START_COUNTER_3();
 80014d6:	f7ff ff13 	bl	8001300 <START_COUNTER_3>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <TIM4_IRQHandler+0x74>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <TIM4_IRQHandler+0x74>)
 80014e0:	f023 0308 	bic.w	r3, r3, #8
 80014e4:	6113      	str	r3, [r2, #16]
	else if ((TIM4->SR & TIM_SR_CC1IF) && (TIM4->DIER & TIM_DIER_CC1IE)) {
		COUNT++;
		TIM4->SR &= ~TIM_SR_CC1IF;
	}

}
 80014e6:	e017      	b.n	8001518 <TIM4_IRQHandler+0x70>
	else if ((TIM4->SR & TIM_SR_CC1IF) && (TIM4->DIER & TIM_DIER_CC1IE)) {
 80014e8:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <TIM4_IRQHandler+0x74>)
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d011      	beq.n	8001518 <TIM4_IRQHandler+0x70>
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <TIM4_IRQHandler+0x74>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <TIM4_IRQHandler+0x70>
		COUNT++;
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <TIM4_IRQHandler+0x7c>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <TIM4_IRQHandler+0x7c>)
 800150a:	801a      	strh	r2, [r3, #0]
		TIM4->SR &= ~TIM_SR_CC1IF;
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <TIM4_IRQHandler+0x74>)
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	4a02      	ldr	r2, [pc, #8]	@ (800151c <TIM4_IRQHandler+0x74>)
 8001512:	f023 0302 	bic.w	r3, r3, #2
 8001516:	6113      	str	r3, [r2, #16]
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40000800 	.word	0x40000800
 8001520:	40020800 	.word	0x40020800
 8001524:	200001f4 	.word	0x200001f4

08001528 <INIT_TIM3>:

void INIT_TIM3() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	TIM3->CR1 = 0x0000;
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <INIT_TIM3+0x60>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
	TIM3->CR2 = 0x0000;
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <INIT_TIM3+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
	TIM3->SMCR = 0x0000;
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <INIT_TIM3+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
	TIM3->ARR = 0xFFFF;
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <INIT_TIM3+0x60>)
 8001540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001544:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->PSC = 31;
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <INIT_TIM3+0x60>)
 8001548:	221f      	movs	r2, #31
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CNT = 0;
 800154c:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <INIT_TIM3+0x60>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CCR1 = 11;
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <INIT_TIM3+0x60>)
 8001554:	220b      	movs	r2, #11
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR3 = 0xFFFF;
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <INIT_TIM3+0x60>)
 800155a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->DIER = 0x0016;
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <INIT_TIM3+0x60>)
 8001562:	2216      	movs	r2, #22
 8001564:	60da      	str	r2, [r3, #12]
	TIM3->CCMR1 = 0x0100;
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <INIT_TIM3+0x60>)
 8001568:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800156c:	619a      	str	r2, [r3, #24]
	TIM3->CCMR2 = 0x0100;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <INIT_TIM3+0x60>)
 8001570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001574:	61da      	str	r2, [r3, #28]
	TIM3->CCER = 0xB0B0;
 8001576:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <INIT_TIM3+0x60>)
 8001578:	f24b 02b0 	movw	r2, #45232	@ 0xb0b0
 800157c:	621a      	str	r2, [r3, #32]

	setup_log_message("TIM3");
 800157e:	4803      	ldr	r0, [pc, #12]	@ (800158c <INIT_TIM3+0x64>)
 8001580:	f7ff fa82 	bl	8000a88 <setup_log_message>

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40000400 	.word	0x40000400
 800158c:	08005a84 	.word	0x08005a84

08001590 <INIT_TIM4>:

void INIT_TIM4() {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

	TIM4->CR1 = 0x0080;
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <INIT_TIM4+0x60>)
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	601a      	str	r2, [r3, #0]
	TIM4->CR2 = 0x0000;
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <INIT_TIM4+0x60>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
	TIM4->SMCR = 0x0000;
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <INIT_TIM4+0x60>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
	TIM4->ARR = 1000;
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <INIT_TIM4+0x60>)
 80015a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 3199;
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <INIT_TIM4+0x60>)
 80015b0:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->CNT = 0;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <INIT_TIM4+0x60>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CCR3 = 1000;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <INIT_TIM4+0x60>)
 80015be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR1 = 1000;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <INIT_TIM4+0x60>)
 80015c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->DIER = 0x0008;
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <INIT_TIM4+0x60>)
 80015ce:	2208      	movs	r2, #8
 80015d0:	60da      	str	r2, [r3, #12]
	TIM4->CCMR2 = 0x0000;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <INIT_TIM4+0x60>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
	TIM4->CCMR1 = 0x0000;
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <INIT_TIM4+0x60>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
	TIM4->CCER = 0x0100;
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <INIT_TIM4+0x60>)
 80015e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015e4:	621a      	str	r2, [r3, #32]

	setup_log_message("TIM4");
 80015e6:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <INIT_TIM4+0x64>)
 80015e8:	f7ff fa4e 	bl	8000a88 <setup_log_message>

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40000800 	.word	0x40000800
 80015f4:	08005a8c 	.word	0x08005a8c

080015f8 <INIT_3V_OUTPUT>:

void INIT_3V_OUTPUT() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	GPIOB->MODER |= (1 << (8 * 2 + 1));
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 8001602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001606:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << (8 * 2));
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001612:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] &= ~(0xF << (0));
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 800161a:	f023 030f 	bic.w	r3, r3, #15
 800161e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (2 << (0));
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <INIT_3V_OUTPUT+0x40>)
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	6253      	str	r3, [r2, #36]	@ 0x24

	setup_log_message("Buzzer output");
 800162c:	4803      	ldr	r0, [pc, #12]	@ (800163c <INIT_3V_OUTPUT+0x44>)
 800162e:	f7ff fa2b 	bl	8000a88 <setup_log_message>

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40020400 	.word	0x40020400
 800163c:	08005a94 	.word	0x08005a94

08001640 <INIT_TRIGG_ECHO>:

void INIT_TRIGG_ECHO() {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	GPIOC->MODER &= ~(1 << (2 * 6 + 1));
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a25      	ldr	r2, [pc, #148]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800164a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800164e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1 << (2 * 6));
 8001650:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a22      	ldr	r2, [pc, #136]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001656:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800165a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1 << (2 * 7 + 1));
 800165c:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1f      	ldr	r2, [pc, #124]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001666:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1 << (2 * 7));
 8001668:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1c      	ldr	r2, [pc, #112]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800166e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001672:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] &= ~(0xF << (7 * 4));
 8001674:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800167a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800167e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (2 << (7 * 4));
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a16      	ldr	r2, [pc, #88]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001686:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800168a:	6213      	str	r3, [r2, #32]
	GPIOC->MODER &= ~(1 << (2 * 8 + 1));
 800168c:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a13      	ldr	r2, [pc, #76]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 8001692:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001696:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1 << (2 * 8));
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1 << (2 * 9 + 1));
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016ae:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1 << (2 * 9));
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ba:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] &= ~(0xF << (1 * 4));
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |= (2 << (1 * 4));
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <INIT_TRIGG_ECHO+0xa0>)
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	6253      	str	r3, [r2, #36]	@ 0x24

	setup_log_message("Ultrasonic GPIO");
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <INIT_TRIGG_ECHO+0xa4>)
 80016d6:	f7ff f9d7 	bl	8000a88 <setup_log_message>

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40020800 	.word	0x40020800
 80016e4:	08005aa4 	.word	0x08005aa4

080016e8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b092      	sub	sp, #72	@ 0x48
 80016ec:	af00      	add	r7, sp, #0
	if (EXTI->PR != 0) {
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <EXTI0_IRQHandler+0x4c>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d019      	beq.n	800172a <EXTI0_IRQHandler+0x42>

		char message[70];
		sprintf(message, "[%lu] User button pressed - Direction: %d\r\n",
 80016f6:	f000 ff23 	bl	8002540 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <EXTI0_IRQHandler+0x50>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4638      	mov	r0, r7
 8001702:	490e      	ldr	r1, [pc, #56]	@ (800173c <EXTI0_IRQHandler+0x54>)
 8001704:	f003 fc7c 	bl	8005000 <siprintf>
				HAL_GetTick(), MOVEMENT_DIRECTION);
		HAL_UART_Transmit(&huart1, message, strlen(message), 10000);
 8001708:	463b      	mov	r3, r7
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fd38 	bl	8000180 <strlen>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	4639      	mov	r1, r7
 8001716:	f242 7310 	movw	r3, #10000	@ 0x2710
 800171a:	4809      	ldr	r0, [pc, #36]	@ (8001740 <EXTI0_IRQHandler+0x58>)
 800171c:	f002 fd64 	bl	80041e8 <HAL_UART_Transmit>

		TURN_DIRECTION();
 8001720:	f7ff fae0 	bl	8000ce4 <TURN_DIRECTION>

		EXTI->PR = 0x01;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <EXTI0_IRQHandler+0x4c>)
 8001726:	2201      	movs	r2, #1
 8001728:	615a      	str	r2, [r3, #20]
	}
}
 800172a:	bf00      	nop
 800172c:	3748      	adds	r7, #72	@ 0x48
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40010400 	.word	0x40010400
 8001738:	20000000 	.word	0x20000000
 800173c:	08005ab4 	.word	0x08005ab4
 8001740:	20000190 	.word	0x20000190

08001744 <SETUP_USER_BUTTON>:

void SETUP_USER_BUTTON() {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

	GPIOA->MODER &= ~(1 << (0 * 2 + 1));
 8001748:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <SETUP_USER_BUTTON+0x5c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a14      	ldr	r2, [pc, #80]	@ (80017a0 <SETUP_USER_BUTTON+0x5c>)
 800174e:	f023 0302 	bic.w	r3, r3, #2
 8001752:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << (0 * 2));
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <SETUP_USER_BUTTON+0x5c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <SETUP_USER_BUTTON+0x5c>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= 0x01;
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <SETUP_USER_BUTTON+0x60>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <SETUP_USER_BUTTON+0x60>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(0x01);
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <SETUP_USER_BUTTON+0x60>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <SETUP_USER_BUTTON+0x60>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] = 0;
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <SETUP_USER_BUTTON+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
	EXTI->IMR |= 0x01;
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <SETUP_USER_BUTTON+0x60>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a08      	ldr	r2, [pc, #32]	@ (80017a4 <SETUP_USER_BUTTON+0x60>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] |= (1 << 6);
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <SETUP_USER_BUTTON+0x68>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a07      	ldr	r2, [pc, #28]	@ (80017ac <SETUP_USER_BUTTON+0x68>)
 8001790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001794:	6013      	str	r3, [r2, #0]

	setup_log_message("User Button");
 8001796:	4806      	ldr	r0, [pc, #24]	@ (80017b0 <SETUP_USER_BUTTON+0x6c>)
 8001798:	f7ff f976 	bl	8000a88 <setup_log_message>

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40010400 	.word	0x40010400
 80017a8:	40010000 	.word	0x40010000
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	08005ae0 	.word	0x08005ae0

080017b4 <SETUP_ADC>:

void SETUP_ADC() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

	GPIOA->MODER |= 0x00000030;
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <SETUP_ADC+0x68>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a17      	ldr	r2, [pc, #92]	@ (800181c <SETUP_ADC+0x68>)
 80017be:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80017c2:	6013      	str	r3, [r2, #0]
	ADC1->CR2 &= ~(0x00000001);
 80017c4:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <SETUP_ADC+0x6c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4a15      	ldr	r2, [pc, #84]	@ (8001820 <SETUP_ADC+0x6c>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6093      	str	r3, [r2, #8]
	ADC1->CR1 = 0x00000000;
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <SETUP_ADC+0x6c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0x00000412;
 80017d6:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <SETUP_ADC+0x6c>)
 80017d8:	f240 4212 	movw	r2, #1042	@ 0x412
 80017dc:	609a      	str	r2, [r3, #8]
	ADC1->SQR1 = 0x00000000;
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <SETUP_ADC+0x6c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC1->SQR5 = 0x00000002;
 80017e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <SETUP_ADC+0x6c>)
 80017e6:	2202      	movs	r2, #2
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40
	ADC1->CR2 |= 0x00000001;
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <SETUP_ADC+0x6c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <SETUP_ADC+0x6c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6093      	str	r3, [r2, #8]
	while ((ADC1->SR & 0x0040) == 0)
 80017f6:	e005      	b.n	8001804 <SETUP_ADC+0x50>
		ADC1->CR2 |= 0x40000000;
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <SETUP_ADC+0x6c>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <SETUP_ADC+0x6c>)
 80017fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001802:	6093      	str	r3, [r2, #8]
	while ((ADC1->SR & 0x0040) == 0)
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <SETUP_ADC+0x6c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f3      	beq.n	80017f8 <SETUP_ADC+0x44>

	setup_log_message("ADC");
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <SETUP_ADC+0x70>)
 8001812:	f7ff f939 	bl	8000a88 <setup_log_message>

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40020000 	.word	0x40020000
 8001820:	40012400 	.word	0x40012400
 8001824:	08005aec 	.word	0x08005aec

08001828 <UPDATE_DC>:

void UPDATE_DC() {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	MAX_DC = (ADC1->DR) * 100 / 4096;
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <UPDATE_DC+0x5c>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	2264      	movs	r2, #100	@ 0x64
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	0b1b      	lsrs	r3, r3, #12
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <UPDATE_DC+0x60>)
 800183c:	801a      	strh	r2, [r3, #0]
	INVERTED_MAX_DC = 100 - MAX_DC;
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <UPDATE_DC+0x60>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <UPDATE_DC+0x64>)
 800184a:	801a      	strh	r2, [r3, #0]
	if (MOVEMENT_DIRECTION == FORWARD) {
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <UPDATE_DC+0x68>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d108      	bne.n	8001866 <UPDATE_DC+0x3e>
		TURN_FORWARD(MAX_DC, MAX_DC);
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <UPDATE_DC+0x60>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <UPDATE_DC+0x60>)
 800185a:	8812      	ldrh	r2, [r2, #0]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f9fa 	bl	8000c58 <TURN_FORWARD>
	} else if (MOVEMENT_DIRECTION == BACKWARDS) {
		TURN_BACKWARDS(INVERTED_MAX_DC, INVERTED_MAX_DC);
	}

}
 8001864:	e00b      	b.n	800187e <UPDATE_DC+0x56>
	} else if (MOVEMENT_DIRECTION == BACKWARDS) {
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <UPDATE_DC+0x68>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <UPDATE_DC+0x56>
		TURN_BACKWARDS(INVERTED_MAX_DC, INVERTED_MAX_DC);
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <UPDATE_DC+0x64>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4a06      	ldr	r2, [pc, #24]	@ (800188c <UPDATE_DC+0x64>)
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f975 	bl	8000b68 <TURN_BACKWARDS>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40012400 	.word	0x40012400
 8001888:	200001d8 	.word	0x200001d8
 800188c:	200001da 	.word	0x200001da
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	// Process the command
//	TURN_DIRECTION();
	memcpy(RxData + indx, temp, 1);
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_UART_RxCpltCallback+0x44>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_UART_RxCpltCallback+0x48>)
 80018a4:	4413      	add	r3, r2
 80018a6:	4a0e      	ldr	r2, [pc, #56]	@ (80018e0 <HAL_UART_RxCpltCallback+0x4c>)
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	701a      	strb	r2, [r3, #0]
	if (++indx >= 10)
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_UART_RxCpltCallback+0x44>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <HAL_UART_RxCpltCallback+0x44>)
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_UART_RxCpltCallback+0x44>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b09      	cmp	r3, #9
 80018bc:	dd02      	ble.n	80018c4 <HAL_UART_RxCpltCallback+0x30>
		indx = 0;
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_UART_RxCpltCallback+0x44>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
	// Reactivate reception for 4 characters
	HAL_UART_Receive_IT(huart, temp, 1);
 80018c4:	2201      	movs	r2, #1
 80018c6:	4906      	ldr	r1, [pc, #24]	@ (80018e0 <HAL_UART_RxCpltCallback+0x4c>)
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f002 fd18 	bl	80042fe <HAL_UART_Receive_IT>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000020c 	.word	0x2000020c
 80018dc:	200001fc 	.word	0x200001fc
 80018e0:	20000208 	.word	0x20000208

080018e4 <EXECUTE_REMOTE_COMMAND>:

void EXECUTE_REMOTE_COMMAND() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
	if (temp[0] == '\n') {
 80018ea:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <EXECUTE_REMOTE_COMMAND+0x16c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b0a      	cmp	r3, #10
 80018f0:	f040 80a9 	bne.w	8001a46 <EXECUTE_REMOTE_COMMAND+0x162>

		if (strncmp((char*) RxData, "STOP", 4) == 0) {
 80018f4:	2204      	movs	r2, #4
 80018f6:	4957      	ldr	r1, [pc, #348]	@ (8001a54 <EXECUTE_REMOTE_COMMAND+0x170>)
 80018f8:	4857      	ldr	r0, [pc, #348]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 80018fa:	f003 fba9 	bl	8005050 <strncmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <EXECUTE_REMOTE_COMMAND+0x28>
			STOP(true);
 8001904:	2001      	movs	r0, #1
 8001906:	f7ff f97f 	bl	8000c08 <STOP>
 800190a:	e08f      	b.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		} else if (strncmp((char*) RxData, "CYCL", 4) == 0) {
 800190c:	2204      	movs	r2, #4
 800190e:	4953      	ldr	r1, [pc, #332]	@ (8001a5c <EXECUTE_REMOTE_COMMAND+0x178>)
 8001910:	4851      	ldr	r0, [pc, #324]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 8001912:	f003 fb9d 	bl	8005050 <strncmp>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <EXECUTE_REMOTE_COMMAND+0x3e>
			TURN_DIRECTION();
 800191c:	f7ff f9e2 	bl	8000ce4 <TURN_DIRECTION>
 8001920:	e084      	b.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		} else if (strncmp((char*) RxData, "RIGH", 4) == 0) {
 8001922:	2204      	movs	r2, #4
 8001924:	494e      	ldr	r1, [pc, #312]	@ (8001a60 <EXECUTE_REMOTE_COMMAND+0x17c>)
 8001926:	484c      	ldr	r0, [pc, #304]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 8001928:	f003 fb92 	bl	8005050 <strncmp>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <EXECUTE_REMOTE_COMMAND+0x56>
			TURN_90_RIGHT(true);
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fa60 	bl	8000df8 <TURN_90_RIGHT>
 8001938:	e078      	b.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		} else if (strncmp((char*) RxData, "LEFT", 4) == 0) {
 800193a:	2204      	movs	r2, #4
 800193c:	4949      	ldr	r1, [pc, #292]	@ (8001a64 <EXECUTE_REMOTE_COMMAND+0x180>)
 800193e:	4846      	ldr	r0, [pc, #280]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 8001940:	f003 fb86 	bl	8005050 <strncmp>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d103      	bne.n	8001952 <EXECUTE_REMOTE_COMMAND+0x6e>
			TURN_90_LEFT(true);
 800194a:	2001      	movs	r0, #1
 800194c:	f7ff faba 	bl	8000ec4 <TURN_90_LEFT>
 8001950:	e06c      	b.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		} else if (strncmp((char*) RxData, "FORW", 4) == 0) {
 8001952:	2204      	movs	r2, #4
 8001954:	4944      	ldr	r1, [pc, #272]	@ (8001a68 <EXECUTE_REMOTE_COMMAND+0x184>)
 8001956:	4840      	ldr	r0, [pc, #256]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 8001958:	f003 fb7a 	bl	8005050 <strncmp>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <EXECUTE_REMOTE_COMMAND+0x90>
			TURN_FORWARD(MAX_DC, MAX_DC);
 8001962:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <EXECUTE_REMOTE_COMMAND+0x188>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	4a41      	ldr	r2, [pc, #260]	@ (8001a6c <EXECUTE_REMOTE_COMMAND+0x188>)
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f973 	bl	8000c58 <TURN_FORWARD>
 8001972:	e05b      	b.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		} else if (strncmp((char*) RxData, "BACK", 4) == 0) {
 8001974:	2204      	movs	r2, #4
 8001976:	493e      	ldr	r1, [pc, #248]	@ (8001a70 <EXECUTE_REMOTE_COMMAND+0x18c>)
 8001978:	4837      	ldr	r0, [pc, #220]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 800197a:	f003 fb69 	bl	8005050 <strncmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d108      	bne.n	8001996 <EXECUTE_REMOTE_COMMAND+0xb2>
			TURN_BACKWARDS(INVERTED_MAX_DC, INVERTED_MAX_DC);
 8001984:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <EXECUTE_REMOTE_COMMAND+0x190>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	4a3a      	ldr	r2, [pc, #232]	@ (8001a74 <EXECUTE_REMOTE_COMMAND+0x190>)
 800198a:	8812      	ldrh	r2, [r2, #0]
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f8ea 	bl	8000b68 <TURN_BACKWARDS>
 8001994:	e04a      	b.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		} else if (strncmp((char*) RxData, "MD", 2) == 0&& isdigit(RxData[2])
 8001996:	2202      	movs	r2, #2
 8001998:	4937      	ldr	r1, [pc, #220]	@ (8001a78 <EXECUTE_REMOTE_COMMAND+0x194>)
 800199a:	482f      	ldr	r0, [pc, #188]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 800199c:	f003 fb58 	bl	8005050 <strncmp>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11d      	bne.n	80019e2 <EXECUTE_REMOTE_COMMAND+0xfe>
 80019a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 80019a8:	789b      	ldrb	r3, [r3, #2]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a33      	ldr	r2, [pc, #204]	@ (8001a7c <EXECUTE_REMOTE_COMMAND+0x198>)
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d013      	beq.n	80019e2 <EXECUTE_REMOTE_COMMAND+0xfe>
		&& isdigit(RxData[3])) {
 80019ba:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 80019bc:	78db      	ldrb	r3, [r3, #3]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a7c <EXECUTE_REMOTE_COMMAND+0x198>)
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <EXECUTE_REMOTE_COMMAND+0xfe>
			uint8_t new_distance = atoi((char*) &RxData[2]);
 80019ce:	482c      	ldr	r0, [pc, #176]	@ (8001a80 <EXECUTE_REMOTE_COMMAND+0x19c>)
 80019d0:	f003 fa8e 	bl	8004ef0 <atoi>
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
			CHANGE_MIN_DISTANCE(new_distance);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f876 	bl	8001acc <CHANGE_MIN_DISTANCE>
		&& isdigit(RxData[3])) {
 80019e0:	e024      	b.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		}

		else if (strncmp((char*) RxData, "MA", 2) == 0&& isdigit(RxData[2])
 80019e2:	2202      	movs	r2, #2
 80019e4:	4927      	ldr	r1, [pc, #156]	@ (8001a84 <EXECUTE_REMOTE_COMMAND+0x1a0>)
 80019e6:	481c      	ldr	r0, [pc, #112]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 80019e8:	f003 fb32 	bl	8005050 <strncmp>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d11c      	bne.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 80019f4:	789b      	ldrb	r3, [r3, #2]
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a20      	ldr	r2, [pc, #128]	@ (8001a7c <EXECUTE_REMOTE_COMMAND+0x198>)
 80019fa:	4413      	add	r3, r2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d012      	beq.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
		&& isdigit(RxData[3])) {
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 8001a08:	78db      	ldrb	r3, [r3, #3]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a7c <EXECUTE_REMOTE_COMMAND+0x198>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <EXECUTE_REMOTE_COMMAND+0x148>
			uint8_t new_distance = atoi((char*) &RxData[2]);
 8001a1a:	4819      	ldr	r0, [pc, #100]	@ (8001a80 <EXECUTE_REMOTE_COMMAND+0x19c>)
 8001a1c:	f003 fa68 	bl	8004ef0 <atoi>
 8001a20:	4603      	mov	r3, r0
 8001a22:	71bb      	strb	r3, [r7, #6]
			CHANGE_MAX_DISTANCE(new_distance);
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f880 	bl	8001b2c <CHANGE_MAX_DISTANCE>
		}

		memset(temp, 0, sizeof(temp));
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4807      	ldr	r0, [pc, #28]	@ (8001a50 <EXECUTE_REMOTE_COMMAND+0x16c>)
 8001a32:	f003 fb05 	bl	8005040 <memset>
		memset(RxData, 0, sizeof(RxData));
 8001a36:	220a      	movs	r2, #10
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <EXECUTE_REMOTE_COMMAND+0x174>)
 8001a3c:	f003 fb00 	bl	8005040 <memset>
		indx = 0;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <EXECUTE_REMOTE_COMMAND+0x1a4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
	}
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000208 	.word	0x20000208
 8001a54:	08005af0 	.word	0x08005af0
 8001a58:	200001fc 	.word	0x200001fc
 8001a5c:	08005af8 	.word	0x08005af8
 8001a60:	08005b00 	.word	0x08005b00
 8001a64:	08005b08 	.word	0x08005b08
 8001a68:	08005b10 	.word	0x08005b10
 8001a6c:	200001d8 	.word	0x200001d8
 8001a70:	08005b18 	.word	0x08005b18
 8001a74:	200001da 	.word	0x200001da
 8001a78:	08005b20 	.word	0x08005b20
 8001a7c:	08005bd4 	.word	0x08005bd4
 8001a80:	200001fe 	.word	0x200001fe
 8001a84:	08005b24 	.word	0x08005b24
 8001a88:	2000020c 	.word	0x2000020c

08001a8c <INIT_DISTANCES>:

void INIT_DISTANCES() {
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
	CLOSE_DISTANCE = CRITICAL_CLOSE + 5;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <INIT_DISTANCES+0x30>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3305      	adds	r3, #5
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <INIT_DISTANCES+0x34>)
 8001a9a:	701a      	strb	r2, [r3, #0]
	MEDIUM_DISTANCE = CRITICAL_CLOSE + 15;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <INIT_DISTANCES+0x30>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	330f      	adds	r3, #15
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <INIT_DISTANCES+0x38>)
 8001aa6:	701a      	strb	r2, [r3, #0]
	RELATIVELY_FAR_DISTANCE = CRITICAL_CLOSE + 25;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <INIT_DISTANCES+0x30>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3319      	adds	r3, #25
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <INIT_DISTANCES+0x3c>)
 8001ab2:	701a      	strb	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	200001f6 	.word	0x200001f6
 8001ac0:	20000210 	.word	0x20000210
 8001ac4:	20000211 	.word	0x20000211
 8001ac8:	20000212 	.word	0x20000212

08001acc <CHANGE_MIN_DISTANCE>:

void CHANGE_MIN_DISTANCE(uint8_t new_distance) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09c      	sub	sp, #112	@ 0x70
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	if (new_distance > 0 && new_distance <= 99) {
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <CHANGE_MIN_DISTANCE+0x1c>
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b63      	cmp	r3, #99	@ 0x63
 8001ae0:	d802      	bhi.n	8001ae8 <CHANGE_MIN_DISTANCE+0x1c>
		CRITICAL_CLOSE_DISTANCE = new_distance;
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <CHANGE_MIN_DISTANCE+0x54>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	7013      	strb	r3, [r2, #0]
	}

	char message[100];
	sprintf(message, "[%lu] Changing new minimun distance to: %d cm \r\n",
 8001ae8:	f000 fd2a 	bl	8002540 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f107 000c 	add.w	r0, r7, #12
 8001af4:	490b      	ldr	r1, [pc, #44]	@ (8001b24 <CHANGE_MIN_DISTANCE+0x58>)
 8001af6:	f003 fa83 	bl	8005000 <siprintf>
			HAL_GetTick(), new_distance);
	HAL_UART_Transmit(&huart1, message, strlen(message), 10000);
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb3e 	bl	8000180 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	f107 010c 	add.w	r1, r7, #12
 8001b0c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <CHANGE_MIN_DISTANCE+0x5c>)
 8001b12:	f002 fb69 	bl	80041e8 <HAL_UART_Transmit>
}
 8001b16:	bf00      	nop
 8001b18:	3770      	adds	r7, #112	@ 0x70
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000001 	.word	0x20000001
 8001b24:	08005b28 	.word	0x08005b28
 8001b28:	20000190 	.word	0x20000190

08001b2c <CHANGE_MAX_DISTANCE>:

void CHANGE_MAX_DISTANCE(uint8_t new_distance) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b09c      	sub	sp, #112	@ 0x70
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	if (new_distance > 0 && new_distance <= 99) {
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01c      	beq.n	8001b76 <CHANGE_MAX_DISTANCE+0x4a>
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2b63      	cmp	r3, #99	@ 0x63
 8001b40:	d819      	bhi.n	8001b76 <CHANGE_MAX_DISTANCE+0x4a>
		RELATIVELY_FAR_DISTANCE = new_distance;
 8001b42:	4a0f      	ldr	r2, [pc, #60]	@ (8001b80 <CHANGE_MAX_DISTANCE+0x54>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	7013      	strb	r3, [r2, #0]

		char message[100];
		sprintf(message, "[%lu] Changing new maximum distance to: %d cm \r\n",
 8001b48:	f000 fcfa 	bl	8002540 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f107 000c 	add.w	r0, r7, #12
 8001b54:	490b      	ldr	r1, [pc, #44]	@ (8001b84 <CHANGE_MAX_DISTANCE+0x58>)
 8001b56:	f003 fa53 	bl	8005000 <siprintf>
				HAL_GetTick(), new_distance);
		HAL_UART_Transmit(&huart1, message, strlen(message), 10000);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fb0e 	bl	8000180 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	f107 010c 	add.w	r1, r7, #12
 8001b6c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <CHANGE_MAX_DISTANCE+0x5c>)
 8001b72:	f002 fb39 	bl	80041e8 <HAL_UART_Transmit>
	}
}
 8001b76:	bf00      	nop
 8001b78:	3770      	adds	r7, #112	@ 0x70
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000212 	.word	0x20000212
 8001b84:	08005b5c 	.word	0x08005b5c
 8001b88:	20000190 	.word	0x20000190

08001b8c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b92:	f000 fc70 	bl	8002476 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b96:	f000 f895 	bl	8001cc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b9a:	f000 fa53 	bl	8002044 <MX_GPIO_Init>
	MX_ADC_Init();
 8001b9e:	f000 f8df 	bl	8001d60 <MX_ADC_Init>
	MX_TS_Init();
 8001ba2:	f000 fa1f 	bl	8001fe4 <MX_TS_Init>
	MX_TIM2_Init();
 8001ba6:	f000 f935 	bl	8001e14 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001baa:	f000 f97f 	bl	8001eac <MX_TIM3_Init>
	MX_TIM4_Init();
 8001bae:	f000 f9cb 	bl	8001f48 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8001bb2:	f000 fa1d 	bl	8001ff0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	general_log_message("_________ BOARD INIT _________");
 8001bb6:	483d      	ldr	r0, [pc, #244]	@ (8001cac <main+0x120>)
 8001bb8:	f7fe ff8a 	bl	8000ad0 <general_log_message>

	SETUP_ADC();
 8001bbc:	f7ff fdfa 	bl	80017b4 <SETUP_ADC>
	UPDATE_DC();
 8001bc0:	f7ff fe32 	bl	8001828 <UPDATE_DC>
	INIT_DISTANCES();
 8001bc4:	f7ff ff62 	bl	8001a8c <INIT_DISTANCES>
	INIT_TRIGG_ECHO();
 8001bc8:	f7ff fd3a 	bl	8001640 <INIT_TRIGG_ECHO>
	INIT_3V_OUTPUT();
 8001bcc:	f7ff fd14 	bl	80015f8 <INIT_3V_OUTPUT>
	INIT_TIM4();
 8001bd0:	f7ff fcde 	bl	8001590 <INIT_TIM4>
	INIT_TIM3();
 8001bd4:	f7ff fca8 	bl	8001528 <INIT_TIM3>
	START_COUNTER_2();
 8001bd8:	f7ff fbb2 	bl	8001340 <START_COUNTER_2>
	SETUP_WHEELS();
 8001bdc:	f7ff f8b8 	bl	8000d50 <SETUP_WHEELS>

	SETUP_PWM();
 8001be0:	f7ff f9d2 	bl	8000f88 <SETUP_PWM>
	SETUP_USER_BUTTON();
 8001be4:	f7ff fdae 	bl	8001744 <SETUP_USER_BUTTON>
	HAL_UART_Receive_IT(&huart1, temp, 1);
 8001be8:	2201      	movs	r2, #1
 8001bea:	4931      	ldr	r1, [pc, #196]	@ (8001cb0 <main+0x124>)
 8001bec:	4831      	ldr	r0, [pc, #196]	@ (8001cb4 <main+0x128>)
 8001bee:	f002 fb86 	bl	80042fe <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
//		general_log_message(texto);
		EXECUTE_REMOTE_COMMAND();
 8001bf2:	f7ff fe77 	bl	80018e4 <EXECUTE_REMOTE_COMMAND>
		UPDATE_DC();
 8001bf6:	f7ff fe17 	bl	8001828 <UPDATE_DC>
		if (CRITICAL_CLOSE) {
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <main+0x12c>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d051      	beq.n	8001ca6 <main+0x11a>
			bool isBackward = (MOVEMENT_DIRECTION == FORWARD);
 8001c02:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <main+0x130>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	71fb      	strb	r3, [r7, #7]
			switch (TURN_POSITION) {
 8001c10:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc0 <main+0x134>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d845      	bhi.n	8001ca4 <main+0x118>
 8001c18:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <main+0x94>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001ca5 	.word	0x08001ca5
 8001c24:	08001c39 	.word	0x08001c39
 8001c28:	08001c47 	.word	0x08001c47
 8001c2c:	08001c6b 	.word	0x08001c6b
 8001c30:	08001c79 	.word	0x08001c79
 8001c34:	08001c9d 	.word	0x08001c9d
			case FIRST_OBSTACLE_BACKWARDS:
				TURN_90_LEFT(isBackward);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f942 	bl	8000ec4 <TURN_90_LEFT>
				CYCLE_TURN_POSITION();
 8001c40:	f7ff f9e6 	bl	8001010 <CYCLE_TURN_POSITION>
				break;
 8001c44:	e02f      	b.n	8001ca6 <main+0x11a>

			case FIRST_OBSTACLE_FORWARD:
				TURN_90_LEFT(!isBackward);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f930 	bl	8000ec4 <TURN_90_LEFT>
				CYCLE_TURN_POSITION();
 8001c64:	f7ff f9d4 	bl	8001010 <CYCLE_TURN_POSITION>
				break;
 8001c68:	e01d      	b.n	8001ca6 <main+0x11a>

			case SECOND_OBSTACLE_BACKWARDS:
				TURN_90_RIGHT(isBackward);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f8c3 	bl	8000df8 <TURN_90_RIGHT>
				CYCLE_TURN_POSITION();
 8001c72:	f7ff f9cd 	bl	8001010 <CYCLE_TURN_POSITION>
				break;
 8001c76:	e016      	b.n	8001ca6 <main+0x11a>

			case SECOND_OBSTACLE_FORWARD:
				TURN_90_RIGHT(!isBackward);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f8b1 	bl	8000df8 <TURN_90_RIGHT>
				CYCLE_TURN_POSITION();
 8001c96:	f7ff f9bb 	bl	8001010 <CYCLE_TURN_POSITION>
				break;
 8001c9a:	e004      	b.n	8001ca6 <main+0x11a>

			case DOOMED:
				STOP(true);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f7fe ffb3 	bl	8000c08 <STOP>
				break;
 8001ca2:	e000      	b.n	8001ca6 <main+0x11a>

			case CLEAR:
				break;

			default:
				break;
 8001ca4:	bf00      	nop
			}
		}

		MEASSURE();
 8001ca6:	f7ff fa59 	bl	800115c <MEASSURE>
		EXECUTE_REMOTE_COMMAND();
 8001caa:	e7a2      	b.n	8001bf2 <main+0x66>
 8001cac:	08005b90 	.word	0x08005b90
 8001cb0:	20000208 	.word	0x20000208
 8001cb4:	20000190 	.word	0x20000190
 8001cb8:	200001f6 	.word	0x200001f6
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	200001fa 	.word	0x200001fa

08001cc4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b092      	sub	sp, #72	@ 0x48
 8001cc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2234      	movs	r2, #52	@ 0x34
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 f9b4 	bl	8005040 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001cd8:	463b      	mov	r3, r7
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <SystemClock_Config+0x98>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001cee:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <SystemClock_Config+0x98>)
 8001cf0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cf4:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfe:	2310      	movs	r3, #16
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d02:	2302      	movs	r3, #2
 8001d04:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001d0a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001d0e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001d10:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001d14:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 f9bc 	bl	8003098 <HAL_RCC_OscConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0x66>
		Error_Handler();
 8001d26:	f000 fa09 	bl	800213c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2101      	movs	r1, #1
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 fcd8 	bl	80036f8 <HAL_RCC_ClockConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <SystemClock_Config+0x8e>
		Error_Handler();
 8001d4e:	f000 f9f5 	bl	800213c <Error_Handler>
	}
}
 8001d52:	bf00      	nop
 8001d54:	3748      	adds	r7, #72	@ 0x48
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40007000 	.word	0x40007000

08001d60 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8001d70:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d72:	4a27      	ldr	r2, [pc, #156]	@ (8001e10 <MX_ADC_Init+0xb0>)
 8001d74:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d76:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d82:	4b22      	ldr	r3, [pc, #136]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d88:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc.Init.NbrOfConversion = 1;
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001db4:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001dbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc2:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dca:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001dd6:	f000 fbbd 	bl	8002554 <HAL_ADC_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_ADC_Init+0x84>
		Error_Handler();
 8001de0:	f000 f9ac 	bl	800213c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001de4:	2304      	movs	r3, #4
 8001de6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_ADC_Init+0xac>)
 8001df6:	f000 fcf3 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_ADC_Init+0xa4>
		Error_Handler();
 8001e00:	f000 f99c 	bl	800213c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000007c 	.word	0x2000007c
 8001e10:	40012400 	.word	0x40012400

08001e14 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001e28:	463b      	mov	r3, r7
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e36:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001e44:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e58:	4813      	ldr	r0, [pc, #76]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e5a:	f001 ff13 	bl	8003c84 <HAL_TIM_Base_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001e64:	f000 f96a 	bl	800213c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e6c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e76:	f001 ff44 	bl	8003d02 <HAL_TIM_ConfigClockSource>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001e80:	f000 f95c 	bl	800213c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_TIM2_Init+0x94>)
 8001e92:	f002 f8fb 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001e9c:	f000 f94e 	bl	800213c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200000d0 	.word	0x200000d0

08001eac <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001eca:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <MX_TIM3_Init+0x98>)
 8001ecc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ee0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001eee:	4814      	ldr	r0, [pc, #80]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001ef0:	f001 fec8 	bl	8003c84 <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM3_Init+0x52>
		Error_Handler();
 8001efa:	f000 f91f 	bl	800213c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f02:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480d      	ldr	r0, [pc, #52]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001f0c:	f001 fef9 	bl	8003d02 <HAL_TIM_ConfigClockSource>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001f16:	f000 f911 	bl	800213c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001f22:	463b      	mov	r3, r7
 8001f24:	4619      	mov	r1, r3
 8001f26:	4806      	ldr	r0, [pc, #24]	@ (8001f40 <MX_TIM3_Init+0x94>)
 8001f28:	f002 f8b0 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001f32:	f000 f903 	bl	800213c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000110 	.word	0x20000110
 8001f44:	40000400 	.word	0x40000400

08001f48 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001f66:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <MX_TIM4_Init+0x98>)
 8001f68:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f7c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001f8a:	4814      	ldr	r0, [pc, #80]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001f8c:	f001 fe7a 	bl	8003c84 <HAL_TIM_Base_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM4_Init+0x52>
		Error_Handler();
 8001f96:	f000 f8d1 	bl	800213c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001fa8:	f001 feab 	bl	8003d02 <HAL_TIM_ConfigClockSource>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8001fb2:	f000 f8c3 	bl	800213c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_TIM4_Init+0x94>)
 8001fc4:	f002 f862 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001fce:	f000 f8b5 	bl	800213c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000150 	.word	0x20000150
 8001fe0:	40000800 	.word	0x40000800

08001fe4 <MX_TS_Init>:
/**
 * @brief TS Initialization Function
 * @param None
 * @retval None
 */
static void MX_TS_Init(void) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	/* USER CODE END TS_Init 1 */
	/* USER CODE BEGIN TS_Init 2 */

	/* USER CODE END TS_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <MX_USART1_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 8001ffc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002000:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002026:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_USART1_UART_Init+0x4c>)
 8002028:	f002 f88e 	bl	8004148 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002032:	f000 f883 	bl	800213c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000190 	.word	0x20000190
 8002040:	40013800 	.word	0x40013800

08002044 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	4b34      	ldr	r3, [pc, #208]	@ (800212c <MX_GPIO_Init+0xe8>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a33      	ldr	r2, [pc, #204]	@ (800212c <MX_GPIO_Init+0xe8>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b31      	ldr	r3, [pc, #196]	@ (800212c <MX_GPIO_Init+0xe8>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b2e      	ldr	r3, [pc, #184]	@ (800212c <MX_GPIO_Init+0xe8>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <MX_GPIO_Init+0xe8>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b2b      	ldr	r3, [pc, #172]	@ (800212c <MX_GPIO_Init+0xe8>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <MX_GPIO_Init+0xe8>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a27      	ldr	r2, [pc, #156]	@ (800212c <MX_GPIO_Init+0xe8>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b25      	ldr	r3, [pc, #148]	@ (800212c <MX_GPIO_Init+0xe8>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : SEG14_Pin SEG15_Pin SEG16_Pin SEG17_Pin
	 SEG18_Pin SEG19_Pin SEG20_Pin SEG21_Pin
	 SEG22_Pin SEG23_Pin */
	GPIO_InitStruct.Pin = SEG14_Pin | SEG15_Pin | SEG16_Pin | SEG17_Pin
 80020a2:	f640 73cf 	movw	r3, #4047	@ 0xfcf
 80020a6:	60fb      	str	r3, [r7, #12]
			| SEG18_Pin | SEG19_Pin | SEG20_Pin | SEG21_Pin | SEG22_Pin
			| SEG23_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80020b4:	230b      	movs	r3, #11
 80020b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	481c      	ldr	r0, [pc, #112]	@ (8002130 <MX_GPIO_Init+0xec>)
 80020c0:	f000 fe6a 	bl	8002d98 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80020c4:	2301      	movs	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80020cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	4816      	ldr	r0, [pc, #88]	@ (8002134 <MX_GPIO_Init+0xf0>)
 80020da:	f000 fe5d 	bl	8002d98 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG0_Pin SEG2_Pin COM0_Pin COM1_Pin
	 COM2_Pin SEG12_Pin */
	GPIO_InitStruct.Pin = SEG0_Pin | SEG2_Pin | COM0_Pin | COM1_Pin | COM2_Pin
 80020de:	f248 730a 	movw	r3, #34570	@ 0x870a
 80020e2:	60fb      	str	r3, [r7, #12]
			| SEG12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80020f0:	230b      	movs	r3, #11
 80020f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	4619      	mov	r1, r3
 80020fa:	480e      	ldr	r0, [pc, #56]	@ (8002134 <MX_GPIO_Init+0xf0>)
 80020fc:	f000 fe4c 	bl	8002d98 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG6_Pin SEG7_Pin SEG8_Pin SEG9_Pin
	 SEG10_Pin SEG11_Pin SEG3_Pin SEG4_Pin
	 SEG5_Pin SEG13_Pin COM3_Pin */
	GPIO_InitStruct.Pin = SEG6_Pin | SEG7_Pin | SEG8_Pin | SEG9_Pin | SEG10_Pin
 8002100:	f64f 7338 	movw	r3, #65336	@ 0xff38
 8002104:	60fb      	str	r3, [r7, #12]
			| SEG11_Pin | SEG3_Pin | SEG4_Pin | SEG5_Pin | SEG13_Pin | COM3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002112:	230b      	movs	r3, #11
 8002114:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	4619      	mov	r1, r3
 800211c:	4806      	ldr	r0, [pc, #24]	@ (8002138 <MX_GPIO_Init+0xf4>)
 800211e:	f000 fe3b 	bl	8002d98 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002122:	bf00      	nop
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40020800 	.word	0x40020800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400

0800213c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002144:	bf00      	nop
 8002146:	e7fd      	b.n	8002144 <Error_Handler+0x8>

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002158:	6253      	str	r3, [r2, #36]	@ 0x24
 800215a:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_MspInit+0x5c>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <HAL_MspInit+0x5c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_MspInit+0x5c>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002188:	6253      	str	r3, [r2, #36]	@ 0x24
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_MspInit+0x5c>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002196:	2007      	movs	r0, #7
 8002198:	f000 fd3e 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a15      	ldr	r2, [pc, #84]	@ (800221c <HAL_ADC_MspInit+0x74>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d123      	bne.n	8002212 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_ADC_MspInit+0x78>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <HAL_ADC_MspInit+0x78>)
 80021d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_ADC_MspInit+0x78>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <HAL_ADC_MspInit+0x78>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <HAL_ADC_MspInit+0x78>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_ADC_MspInit+0x78>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|IDD_Measurement_Pin;
 80021fa:	2314      	movs	r3, #20
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2303      	movs	r3, #3
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_ADC_MspInit+0x7c>)
 800220e:	f000 fdc3 	bl	8002d98 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	@ 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40012400 	.word	0x40012400
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000

08002228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002238:	d10c      	bne.n	8002254 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	4a19      	ldr	r2, [pc, #100]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6253      	str	r3, [r2, #36]	@ 0x24
 8002246:	4b17      	ldr	r3, [pc, #92]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002252:	e022      	b.n	800229a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a13      	ldr	r2, [pc, #76]	@ (80022a8 <HAL_TIM_Base_MspInit+0x80>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10c      	bne.n	8002278 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6253      	str	r3, [r2, #36]	@ 0x24
 800226a:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
}
 8002276:	e010      	b.n	800229a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0b      	ldr	r2, [pc, #44]	@ (80022ac <HAL_TIM_Base_MspInit+0x84>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10b      	bne.n	800229a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6253      	str	r3, [r2, #36]	@ 0x24
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_TIM_Base_MspInit+0x7c>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
}
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800

080022b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1b      	ldr	r2, [pc, #108]	@ (800233c <HAL_UART_MspInit+0x8c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12f      	bne.n	8002332 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_UART_MspInit+0x90>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <HAL_UART_MspInit+0x90>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_UART_MspInit+0x90>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_UART_MspInit+0x90>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_UART_MspInit+0x90>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	61d3      	str	r3, [r2, #28]
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_UART_MspInit+0x90>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002302:	23c0      	movs	r3, #192	@ 0xc0
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002312:	2307      	movs	r3, #7
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	4809      	ldr	r0, [pc, #36]	@ (8002344 <HAL_UART_MspInit+0x94>)
 800231e:	f000 fd3b 	bl	8002d98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2025      	movs	r0, #37	@ 0x25
 8002328:	f000 fc81 	bl	8002c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800232c:	2025      	movs	r0, #37	@ 0x25
 800232e:	f000 fc9a 	bl	8002c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40013800 	.word	0x40013800
 8002340:	40023800 	.word	0x40023800
 8002344:	40020400 	.word	0x40020400

08002348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <NMI_Handler+0x4>

08002350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <MemManage_Handler+0x4>

08002360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <UsageFault_Handler+0x4>

08002370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002398:	f000 f8c0 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <USART1_IRQHandler+0x10>)
 80023a6:	f001 ffcf 	bl	8004348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000190 	.word	0x20000190

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	@ (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f002 fe46 	bl	8005074 <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20004000 	.word	0x20004000
 8002414:	00000400 	.word	0x00000400
 8002418:	20000214 	.word	0x20000214
 800241c:	20000368 	.word	0x20000368

08002420 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <Reset_Handler>:
Reset_Handler:


/* Call the clock system initialization function.*/

    bl  SystemInit
 800242c:	f7ff fff8 	bl	8002420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002430:	480b      	ldr	r0, [pc, #44]	@ (8002460 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002432:	490c      	ldr	r1, [pc, #48]	@ (8002464 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002434:	4a0c      	ldr	r2, [pc, #48]	@ (8002468 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002448:	4c09      	ldr	r4, [pc, #36]	@ (8002470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002456:	f002 fe13 	bl	8005080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800245a:	f7ff fb97 	bl	8001b8c <main>
  bx lr
 800245e:	4770      	bx	lr
  ldr r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002464:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002468:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 800246c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002470:	20000364 	.word	0x20000364

08002474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC1_IRQHandler>

08002476 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002480:	2003      	movs	r0, #3
 8002482:	f000 fbc9 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002486:	2000      	movs	r0, #0
 8002488:	f000 f80e 	bl	80024a8 <HAL_InitTick>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e001      	b.n	800249c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002498:	f7ff fe56 	bl	8002148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800249c:	79fb      	ldrb	r3, [r7, #7]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_InitTick+0x68>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d022      	beq.n	8002502 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024bc:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_InitTick+0x6c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <HAL_InitTick+0x68>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fbd6 	bl	8002c82 <HAL_SYSTICK_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10f      	bne.n	80024fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b0f      	cmp	r3, #15
 80024e0:	d809      	bhi.n	80024f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e2:	2200      	movs	r2, #0
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024ea:	f000 fba0 	bl	8002c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002518 <HAL_InitTick+0x70>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e007      	b.n	8002506 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e004      	b.n	8002506 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e001      	b.n	8002506 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000000c 	.word	0x2000000c
 8002514:	20000004 	.word	0x20000004
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_IncTick+0x1c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_IncTick+0x20>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4413      	add	r3, r2
 800252a:	4a03      	ldr	r2, [pc, #12]	@ (8002538 <HAL_IncTick+0x1c>)
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000218 	.word	0x20000218
 800253c:	2000000c 	.word	0x2000000c

08002540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return uwTick;
 8002544:	4b02      	ldr	r3, [pc, #8]	@ (8002550 <HAL_GetTick+0x10>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000218 	.word	0x20000218

08002554 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08e      	sub	sp, #56	@ 0x38
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e127      	b.n	80027c4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d115      	bne.n	80025ae <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	4b8e      	ldr	r3, [pc, #568]	@ (80027cc <HAL_ADC_Init+0x278>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a8d      	ldr	r2, [pc, #564]	@ (80027cc <HAL_ADC_Init+0x278>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	4b8b      	ldr	r3, [pc, #556]	@ (80027cc <HAL_ADC_Init+0x278>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fdfd 	bl	80021a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 80ff 	bne.w	80027ba <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025c4:	f023 0302 	bic.w	r3, r3, #2
 80025c8:	f043 0202 	orr.w	r2, r3, #2
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80025d0:	4b7f      	ldr	r3, [pc, #508]	@ (80027d0 <HAL_ADC_Init+0x27c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	497c      	ldr	r1, [pc, #496]	@ (80027d0 <HAL_ADC_Init+0x27c>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80025ea:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f2:	4619      	mov	r1, r3
 80025f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025f8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800260e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002614:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	2302      	movs	r3, #2
 8002620:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002636:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800263a:	4313      	orrs	r3, r2
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002642:	2b10      	cmp	r3, #16
 8002644:	d007      	beq.n	8002656 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800264e:	4313      	orrs	r3, r2
 8002650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002652:	4313      	orrs	r3, r2
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002660:	2b40      	cmp	r3, #64	@ 0x40
 8002662:	d04f      	beq.n	8002704 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800266a:	4313      	orrs	r3, r2
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002676:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6912      	ldr	r2, [r2, #16]
 800267c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002680:	d003      	beq.n	800268a <HAL_ADC_Init+0x136>
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6912      	ldr	r2, [r2, #16]
 8002686:	2a01      	cmp	r2, #1
 8002688:	d102      	bne.n	8002690 <HAL_ADC_Init+0x13c>
 800268a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800268e:	e000      	b.n	8002692 <HAL_ADC_Init+0x13e>
 8002690:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002692:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002696:	4313      	orrs	r3, r2
 8002698:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d125      	bne.n	80026f0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d114      	bne.n	80026d8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80026b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	fa92 f2a2 	rbit	r2, r2
 80026c0:	617a      	str	r2, [r7, #20]
  return result;
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	fab2 f282 	clz	r2, r2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4093      	lsls	r3, r2
 80026cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026d2:	4313      	orrs	r3, r2
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80026d6:	e00b      	b.n	80026f0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <HAL_ADC_Init+0x280>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002700:	430b      	orrs	r3, r1
 8002702:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	4b33      	ldr	r3, [pc, #204]	@ (80027d8 <HAL_ADC_Init+0x284>)
 800270c:	4013      	ands	r3, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002720:	d003      	beq.n	800272a <HAL_ADC_Init+0x1d6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d119      	bne.n	800275e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800273e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	fa92 f2a2 	rbit	r2, r2
 8002746:	60fa      	str	r2, [r7, #12]
  return result;
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	fab2 f282 	clz	r2, r2
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	fa03 f202 	lsl.w	r2, r3, r2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30
 800275c:	e007      	b.n	800276e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_ADC_Init+0x288>)
 8002776:	4013      	ands	r3, r2
 8002778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800277a:	429a      	cmp	r2, r3
 800277c:	d10b      	bne.n	8002796 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002788:	f023 0303 	bic.w	r3, r3, #3
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002794:	e014      	b.n	80027c0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	f023 0312 	bic.w	r3, r3, #18
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3738      	adds	r7, #56	@ 0x38
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40012700 	.word	0x40012700
 80027d4:	fcfc16ff 	.word	0xfcfc16ff
 80027d8:	c0fff18d 	.word	0xc0fff18d
 80027dc:	bf80fffe 	.word	0xbf80fffe

080027e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x20>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e134      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x28a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b06      	cmp	r3, #6
 800280e:	d81c      	bhi.n	800284a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	3b05      	subs	r3, #5
 8002822:	221f      	movs	r2, #31
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	4019      	ands	r1, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b05      	subs	r3, #5
 800283c:	fa00 f203 	lsl.w	r2, r0, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40
 8002848:	e07e      	b.n	8002948 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d81c      	bhi.n	800288c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b23      	subs	r3, #35	@ 0x23
 8002864:	221f      	movs	r2, #31
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	4019      	ands	r1, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b23      	subs	r3, #35	@ 0x23
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	63da      	str	r2, [r3, #60]	@ 0x3c
 800288a:	e05d      	b.n	8002948 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b12      	cmp	r3, #18
 8002892:	d81c      	bhi.n	80028ce <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b41      	subs	r3, #65	@ 0x41
 80028a6:	221f      	movs	r2, #31
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4019      	ands	r1, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	3b41      	subs	r3, #65	@ 0x41
 80028c0:	fa00 f203 	lsl.w	r2, r0, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80028cc:	e03c      	b.n	8002948 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b18      	cmp	r3, #24
 80028d4:	d81c      	bhi.n	8002910 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b5f      	subs	r3, #95	@ 0x5f
 80028e8:	221f      	movs	r2, #31
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4019      	ands	r1, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3b5f      	subs	r3, #95	@ 0x5f
 8002902:	fa00 f203 	lsl.w	r2, r0, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	635a      	str	r2, [r3, #52]	@ 0x34
 800290e:	e01b      	b.n	8002948 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	3b7d      	subs	r3, #125	@ 0x7d
 8002922:	221f      	movs	r2, #31
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	4019      	ands	r1, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	3b7d      	subs	r3, #125	@ 0x7d
 800293c:	fa00 f203 	lsl.w	r2, r0, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b09      	cmp	r3, #9
 800294e:	d81a      	bhi.n	8002986 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6959      	ldr	r1, [r3, #20]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	2207      	movs	r2, #7
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	4019      	ands	r1, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6898      	ldr	r0, [r3, #8]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	fa00 f203 	lsl.w	r2, r0, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	e042      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b13      	cmp	r3, #19
 800298c:	d81c      	bhi.n	80029c8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6919      	ldr	r1, [r3, #16]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	3b1e      	subs	r3, #30
 80029a0:	2207      	movs	r2, #7
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	4019      	ands	r1, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6898      	ldr	r0, [r3, #8]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	3b1e      	subs	r3, #30
 80029ba:	fa00 f203 	lsl.w	r2, r0, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	e021      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b1a      	cmp	r3, #26
 80029ce:	d81c      	bhi.n	8002a0a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b3c      	subs	r3, #60	@ 0x3c
 80029e2:	2207      	movs	r2, #7
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	4019      	ands	r1, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6898      	ldr	r0, [r3, #8]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	3b3c      	subs	r3, #60	@ 0x3c
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	e000      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002a0a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d003      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a18:	2b11      	cmp	r3, #17
 8002a1a:	d121      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_ADC_ConfigChannel+0x294>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11b      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_ADC_ConfigChannel+0x294>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	@ (8002a74 <HAL_ADC_ConfigChannel+0x294>)
 8002a2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a32:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d111      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <HAL_ADC_ConfigChannel+0x298>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0e      	ldr	r2, [pc, #56]	@ (8002a7c <HAL_ADC_ConfigChannel+0x29c>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	0c9a      	lsrs	r2, r3, #18
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002a52:	e002      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	40012700 	.word	0x40012700
 8002a78:	20000004 	.word	0x20000004
 8002a7c:	431bde83 	.word	0x431bde83

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <__NVIC_EnableIRQ+0x34>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	@ (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	@ (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be4:	d301      	bcc.n	8002bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00f      	b.n	8002c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bea:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <SysTick_Config+0x40>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf2:	210f      	movs	r1, #15
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bf8:	f7ff ff90 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <SysTick_Config+0x40>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c02:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <SysTick_Config+0x40>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff2d 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff42 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff90 	bl	8002b70 <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5f 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff35 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa2 	bl	8002bd4 <SysTick_Config>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d008      	beq.n	8002cc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e022      	b.n	8002d0a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 020e 	bic.w	r2, r2, #14
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	f003 021c 	and.w	r2, r3, #28
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d005      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e029      	b.n	8002d8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020e 	bic.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f003 021c 	and.w	r2, r3, #28
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
    }
  }
  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dae:	e154      	b.n	800305a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2101      	movs	r1, #1
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8146 	beq.w	8003054 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d005      	beq.n	8002de0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d130      	bne.n	8002e42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002e16:	2201      	movs	r2, #1
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	f003 0201 	and.w	r2, r3, #1
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d017      	beq.n	8002e7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d123      	bne.n	8002ed2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	08da      	lsrs	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	6939      	ldr	r1, [r7, #16]
 8002ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0203 	and.w	r2, r3, #3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80a0 	beq.w	8003054 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f14:	4b58      	ldr	r3, [pc, #352]	@ (8003078 <HAL_GPIO_Init+0x2e0>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a57      	ldr	r2, [pc, #348]	@ (8003078 <HAL_GPIO_Init+0x2e0>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	4b55      	ldr	r3, [pc, #340]	@ (8003078 <HAL_GPIO_Init+0x2e0>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f2c:	4a53      	ldr	r2, [pc, #332]	@ (800307c <HAL_GPIO_Init+0x2e4>)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a4b      	ldr	r2, [pc, #300]	@ (8003080 <HAL_GPIO_Init+0x2e8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d019      	beq.n	8002f8c <HAL_GPIO_Init+0x1f4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003084 <HAL_GPIO_Init+0x2ec>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d013      	beq.n	8002f88 <HAL_GPIO_Init+0x1f0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a49      	ldr	r2, [pc, #292]	@ (8003088 <HAL_GPIO_Init+0x2f0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00d      	beq.n	8002f84 <HAL_GPIO_Init+0x1ec>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a48      	ldr	r2, [pc, #288]	@ (800308c <HAL_GPIO_Init+0x2f4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <HAL_GPIO_Init+0x1e8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a47      	ldr	r2, [pc, #284]	@ (8003090 <HAL_GPIO_Init+0x2f8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d101      	bne.n	8002f7c <HAL_GPIO_Init+0x1e4>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e008      	b.n	8002f8e <HAL_GPIO_Init+0x1f6>
 8002f7c:	2305      	movs	r3, #5
 8002f7e:	e006      	b.n	8002f8e <HAL_GPIO_Init+0x1f6>
 8002f80:	2303      	movs	r3, #3
 8002f82:	e004      	b.n	8002f8e <HAL_GPIO_Init+0x1f6>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e002      	b.n	8002f8e <HAL_GPIO_Init+0x1f6>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_GPIO_Init+0x1f6>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	f002 0203 	and.w	r2, r2, #3
 8002f94:	0092      	lsls	r2, r2, #2
 8002f96:	4093      	lsls	r3, r2
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f9e:	4937      	ldr	r1, [pc, #220]	@ (800307c <HAL_GPIO_Init+0x2e4>)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fac:	4b39      	ldr	r3, [pc, #228]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fd0:	4a30      	ldr	r2, [pc, #192]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ffa:	4a26      	ldr	r2, [pc, #152]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003000:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003024:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800304e:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <HAL_GPIO_Init+0x2fc>)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f aea3 	bne.w	8002db0 <HAL_GPIO_Init+0x18>
  }
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	40010000 	.word	0x40010000
 8003080:	40020000 	.word	0x40020000
 8003084:	40020400 	.word	0x40020400
 8003088:	40020800 	.word	0x40020800
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40021000 	.word	0x40021000
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e31d      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b94      	ldr	r3, [pc, #592]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b91      	ldr	r3, [pc, #580]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030bc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d07b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d006      	beq.n	80030de <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x5e>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030de:	4b87      	ldr	r3, [pc, #540]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d06a      	beq.n	80031c0 <HAL_RCC_OscConfig+0x128>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d166      	bne.n	80031c0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e2f7      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b7f      	ldr	r3, [pc, #508]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7e      	ldr	r2, [pc, #504]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e02d      	b.n	8003168 <HAL_RCC_OscConfig+0xd0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10c      	bne.n	800312e <HAL_RCC_OscConfig+0x96>
 8003114:	4b79      	ldr	r3, [pc, #484]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a78      	ldr	r2, [pc, #480]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b76      	ldr	r3, [pc, #472]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a75      	ldr	r2, [pc, #468]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e01c      	b.n	8003168 <HAL_RCC_OscConfig+0xd0>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0xb8>
 8003136:	4b71      	ldr	r3, [pc, #452]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a70      	ldr	r2, [pc, #448]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b6e      	ldr	r3, [pc, #440]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6d      	ldr	r2, [pc, #436]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0xd0>
 8003150:	4b6a      	ldr	r3, [pc, #424]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a69      	ldr	r2, [pc, #420]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b67      	ldr	r3, [pc, #412]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a66      	ldr	r2, [pc, #408]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7ff f9e6 	bl	8002540 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003178:	f7ff f9e2 	bl	8002540 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	@ 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e2ad      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800318a:	4b5c      	ldr	r3, [pc, #368]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff f9d2 	bl	8002540 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7ff f9ce 	bl	8002540 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	@ 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e299      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031b2:	4b52      	ldr	r3, [pc, #328]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d05a      	beq.n	8003284 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d119      	bne.n	800320e <HAL_RCC_OscConfig+0x176>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e0:	4b46      	ldr	r3, [pc, #280]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_OscConfig+0x160>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e276      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b40      	ldr	r3, [pc, #256]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	493d      	ldr	r1, [pc, #244]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320c:	e03a      	b.n	8003284 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003216:	4b3a      	ldr	r3, [pc, #232]	@ (8003300 <HAL_RCC_OscConfig+0x268>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff f990 	bl	8002540 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003224:	f7ff f98c 	bl	8002540 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e257      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003236:	4b31      	ldr	r3, [pc, #196]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b2e      	ldr	r3, [pc, #184]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	492a      	ldr	r1, [pc, #168]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	e015      	b.n	8003284 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003258:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <HAL_RCC_OscConfig+0x268>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7ff f96f 	bl	8002540 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003266:	f7ff f96b 	bl	8002540 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e236      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003278:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80b8 	beq.w	8003402 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d170      	bne.n	800337a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003298:	4b18      	ldr	r3, [pc, #96]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x218>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e21a      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80032bc:	429a      	cmp	r2, r3
 80032be:	d921      	bls.n	8003304 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fc7d 	bl	8003bc4 <RCC_SetFlashLatencyFromMSIRange>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e208      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4906      	ldr	r1, [pc, #24]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	4901      	ldr	r1, [pc, #4]	@ (80032fc <HAL_RCC_OscConfig+0x264>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
 80032fa:	e020      	b.n	800333e <HAL_RCC_OscConfig+0x2a6>
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003304:	4b99      	ldr	r3, [pc, #612]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4996      	ldr	r1, [pc, #600]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003316:	4b95      	ldr	r3, [pc, #596]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	061b      	lsls	r3, r3, #24
 8003324:	4991      	ldr	r1, [pc, #580]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fc48 	bl	8003bc4 <RCC_SetFlashLatencyFromMSIRange>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1d3      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	0b5b      	lsrs	r3, r3, #13
 8003344:	3301      	adds	r3, #1
 8003346:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800334e:	4a87      	ldr	r2, [pc, #540]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003350:	6892      	ldr	r2, [r2, #8]
 8003352:	0912      	lsrs	r2, r2, #4
 8003354:	f002 020f 	and.w	r2, r2, #15
 8003358:	4985      	ldr	r1, [pc, #532]	@ (8003570 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	5c8a      	ldrb	r2, [r1, r2]
 800335c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800335e:	4a85      	ldr	r2, [pc, #532]	@ (8003574 <HAL_RCC_OscConfig+0x4dc>)
 8003360:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003362:	4b85      	ldr	r3, [pc, #532]	@ (8003578 <HAL_RCC_OscConfig+0x4e0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff f89e 	bl	80024a8 <HAL_InitTick>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d045      	beq.n	8003402 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	e1b5      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d029      	beq.n	80033d6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003382:	4b7e      	ldr	r3, [pc, #504]	@ (800357c <HAL_RCC_OscConfig+0x4e4>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7ff f8da 	bl	8002540 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003390:	f7ff f8d6 	bl	8002540 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1a1      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033a2:	4b72      	ldr	r3, [pc, #456]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ae:	4b6f      	ldr	r3, [pc, #444]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	496c      	ldr	r1, [pc, #432]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c0:	4b6a      	ldr	r3, [pc, #424]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	4967      	ldr	r1, [pc, #412]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
 80033d4:	e015      	b.n	8003402 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033d6:	4b69      	ldr	r3, [pc, #420]	@ (800357c <HAL_RCC_OscConfig+0x4e4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7ff f8b0 	bl	8002540 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e4:	f7ff f8ac 	bl	8002540 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e177      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80033f6:	4b5d      	ldr	r3, [pc, #372]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d030      	beq.n	8003470 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003416:	4b5a      	ldr	r3, [pc, #360]	@ (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	2201      	movs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7ff f890 	bl	8002540 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7ff f88c 	bl	8002540 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e157      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003436:	4b4d      	ldr	r3, [pc, #308]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x38c>
 8003442:	e015      	b.n	8003470 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003444:	4b4e      	ldr	r3, [pc, #312]	@ (8003580 <HAL_RCC_OscConfig+0x4e8>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7ff f879 	bl	8002540 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003452:	f7ff f875 	bl	8002540 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e140      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003464:	4b41      	ldr	r3, [pc, #260]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80b5 	beq.w	80035e8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b3a      	ldr	r3, [pc, #232]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b37      	ldr	r3, [pc, #220]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	4a36      	ldr	r2, [pc, #216]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003498:	6253      	str	r3, [r2, #36]	@ 0x24
 800349a:	4b34      	ldr	r3, [pc, #208]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034aa:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <HAL_RCC_OscConfig+0x4ec>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d118      	bne.n	80034e8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b6:	4b33      	ldr	r3, [pc, #204]	@ (8003584 <HAL_RCC_OscConfig+0x4ec>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a32      	ldr	r2, [pc, #200]	@ (8003584 <HAL_RCC_OscConfig+0x4ec>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7ff f83d 	bl	8002540 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7ff f839 	bl	8002540 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	@ 0x64
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e104      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b29      	ldr	r3, [pc, #164]	@ (8003584 <HAL_RCC_OscConfig+0x4ec>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x466>
 80034f0:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80034f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f4:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80034fc:	e02d      	b.n	800355a <HAL_RCC_OscConfig+0x4c2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x488>
 8003506:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350a:	4a18      	ldr	r2, [pc, #96]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 800350c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003510:	6353      	str	r3, [r2, #52]	@ 0x34
 8003512:	4b16      	ldr	r3, [pc, #88]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	4a15      	ldr	r2, [pc, #84]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800351c:	6353      	str	r3, [r2, #52]	@ 0x34
 800351e:	e01c      	b.n	800355a <HAL_RCC_OscConfig+0x4c2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b05      	cmp	r3, #5
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x4aa>
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 800352a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352c:	4a0f      	ldr	r2, [pc, #60]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 800352e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003532:	6353      	str	r3, [r2, #52]	@ 0x34
 8003534:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	4a0c      	ldr	r2, [pc, #48]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003540:	e00b      	b.n	800355a <HAL_RCC_OscConfig+0x4c2>
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003546:	4a09      	ldr	r2, [pc, #36]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800354c:	6353      	str	r3, [r2, #52]	@ 0x34
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	4a06      	ldr	r2, [pc, #24]	@ (800356c <HAL_RCC_OscConfig+0x4d4>)
 8003554:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003558:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d024      	beq.n	80035ac <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fe ffed 	bl	8002540 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003568:	e019      	b.n	800359e <HAL_RCC_OscConfig+0x506>
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800
 8003570:	08005bbc 	.word	0x08005bbc
 8003574:	20000004 	.word	0x20000004
 8003578:	20000008 	.word	0x20000008
 800357c:	42470020 	.word	0x42470020
 8003580:	42470680 	.word	0x42470680
 8003584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7fe ffda 	bl	8002540 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e0a3      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800359e:	4b54      	ldr	r3, [pc, #336]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 80035a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0ee      	beq.n	8003588 <HAL_RCC_OscConfig+0x4f0>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ac:	f7fe ffc8 	bl	8002540 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f7fe ffc4 	bl	8002540 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e08d      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035ca:	4b49      	ldr	r3, [pc, #292]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 80035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1ee      	bne.n	80035b4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d6:	7ffb      	ldrb	r3, [r7, #31]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b44      	ldr	r3, [pc, #272]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	4a43      	ldr	r2, [pc, #268]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d079      	beq.n	80036e4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d056      	beq.n	80036a4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d13b      	bne.n	8003676 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b3d      	ldr	r3, [pc, #244]	@ (80036f4 <HAL_RCC_OscConfig+0x65c>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe ff9c 	bl	8002540 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fe ff98 	bl	8002540 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e063      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800361e:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362a:	4b31      	ldr	r3, [pc, #196]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	4319      	orrs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	430b      	orrs	r3, r1
 8003642:	492b      	ldr	r1, [pc, #172]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003648:	4b2a      	ldr	r3, [pc, #168]	@ (80036f4 <HAL_RCC_OscConfig+0x65c>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe ff77 	bl	8002540 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003656:	f7fe ff73 	bl	8002540 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e03e      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003668:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x5be>
 8003674:	e036      	b.n	80036e4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b1f      	ldr	r3, [pc, #124]	@ (80036f4 <HAL_RCC_OscConfig+0x65c>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe ff60 	bl	8002540 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe ff5c 	bl	8002540 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e027      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003696:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x5ec>
 80036a2:	e01f      	b.n	80036e4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e01a      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	@ (80036f0 <HAL_RCC_OscConfig+0x658>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d106      	bne.n	80036e0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	42470060 	.word	0x42470060

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e11a      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b8f      	ldr	r3, [pc, #572]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d919      	bls.n	800374e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_ClockConfig+0x34>
 8003720:	4b8a      	ldr	r3, [pc, #552]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a89      	ldr	r2, [pc, #548]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b87      	ldr	r3, [pc, #540]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 0201 	bic.w	r2, r3, #1
 8003734:	4985      	ldr	r1, [pc, #532]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373c:	4b83      	ldr	r3, [pc, #524]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0f9      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375a:	4b7d      	ldr	r3, [pc, #500]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	497a      	ldr	r1, [pc, #488]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 808e 	beq.w	8003896 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003782:	4b73      	ldr	r3, [pc, #460]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d121      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0d7      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800379a:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d115      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0cb      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b2:	4b67      	ldr	r3, [pc, #412]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0bf      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037c2:	4b63      	ldr	r3, [pc, #396]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0b7      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	495c      	ldr	r1, [pc, #368]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e4:	f7fe feac 	bl	8002540 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d112      	bne.n	8003818 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fe fea4 	bl	8002540 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e09b      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800380a:	4b51      	ldr	r3, [pc, #324]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b08      	cmp	r3, #8
 8003814:	d1ee      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xfc>
 8003816:	e03e      	b.n	8003896 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d112      	bne.n	8003846 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003822:	f7fe fe8d 	bl	8002540 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e084      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003838:	4b45      	ldr	r3, [pc, #276]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d1ee      	bne.n	8003822 <HAL_RCC_ClockConfig+0x12a>
 8003844:	e027      	b.n	8003896 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d11d      	bne.n	800388a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003850:	f7fe fe76 	bl	8002540 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e06d      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003866:	4b3a      	ldr	r3, [pc, #232]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d1ee      	bne.n	8003850 <HAL_RCC_ClockConfig+0x158>
 8003872:	e010      	b.n	8003896 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe fe64 	bl	8002540 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e05b      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800388a:	4b31      	ldr	r3, [pc, #196]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ee      	bne.n	8003874 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003896:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d219      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d105      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x1be>
 80038aa:	4b28      	ldr	r3, [pc, #160]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a27      	ldr	r2, [pc, #156]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	4923      	ldr	r1, [pc, #140]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b21      	ldr	r3, [pc, #132]	@ (800394c <HAL_RCC_ClockConfig+0x254>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e034      	b.n	8003942 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4917      	ldr	r1, [pc, #92]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003902:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490f      	ldr	r1, [pc, #60]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f823 	bl	8003960 <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <HAL_RCC_ClockConfig+0x258>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490b      	ldr	r1, [pc, #44]	@ (8003954 <HAL_RCC_ClockConfig+0x25c>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <HAL_RCC_ClockConfig+0x260>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003932:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <HAL_RCC_ClockConfig+0x264>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fdb6 	bl	80024a8 <HAL_InitTick>
 800393c:	4603      	mov	r3, r0
 800393e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003940:	7afb      	ldrb	r3, [r7, #11]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	08005bbc 	.word	0x08005bbc
 8003958:	20000004 	.word	0x20000004
 800395c:	20000008 	.word	0x20000008

08003960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b092      	sub	sp, #72	@ 0x48
 8003966:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003968:	4b79      	ldr	r3, [pc, #484]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800396e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d00d      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x34>
 8003978:	2b0c      	cmp	r3, #12
 800397a:	f200 80d5 	bhi.w	8003b28 <HAL_RCC_GetSysClockFreq+0x1c8>
 800397e:	2b04      	cmp	r3, #4
 8003980:	d002      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x28>
 8003982:	2b08      	cmp	r3, #8
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x2e>
 8003986:	e0cf      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4b72      	ldr	r3, [pc, #456]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800398a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800398c:	e0da      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800398e:	4b72      	ldr	r3, [pc, #456]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003990:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003992:	e0d7      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003996:	0c9b      	lsrs	r3, r3, #18
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800399e:	5c9b      	ldrb	r3, [r3, r2]
 80039a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a4:	0d9b      	lsrs	r3, r3, #22
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	3301      	adds	r3, #1
 80039ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ae:	4b68      	ldr	r3, [pc, #416]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d05d      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	2200      	movs	r2, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	4611      	mov	r1, r2
 80039c2:	4604      	mov	r4, r0
 80039c4:	460d      	mov	r5, r1
 80039c6:	4622      	mov	r2, r4
 80039c8:	462b      	mov	r3, r5
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	0159      	lsls	r1, r3, #5
 80039d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d8:	0150      	lsls	r0, r2, #5
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4621      	mov	r1, r4
 80039e0:	1a51      	subs	r1, r2, r1
 80039e2:	6139      	str	r1, [r7, #16]
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f8:	4659      	mov	r1, fp
 80039fa:	018b      	lsls	r3, r1, #6
 80039fc:	4651      	mov	r1, sl
 80039fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a02:	4651      	mov	r1, sl
 8003a04:	018a      	lsls	r2, r1, #6
 8003a06:	46d4      	mov	ip, sl
 8003a08:	ebb2 080c 	subs.w	r8, r2, ip
 8003a0c:	4659      	mov	r1, fp
 8003a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a26:	4690      	mov	r8, r2
 8003a28:	4699      	mov	r9, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	eb18 0303 	adds.w	r3, r8, r3
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	462b      	mov	r3, r5
 8003a34:	eb49 0303 	adc.w	r3, r9, r3
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a46:	4629      	mov	r1, r5
 8003a48:	024b      	lsls	r3, r1, #9
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4604      	mov	r4, r0
 8003a50:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003a54:	4601      	mov	r1, r0
 8003a56:	024a      	lsls	r2, r1, #9
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5e:	2200      	movs	r2, #0
 8003a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a68:	f7fc fe98 	bl	800079c <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4613      	mov	r3, r2
 8003a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a74:	e055      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a78:	2200      	movs	r2, #0
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a7e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a82:	4642      	mov	r2, r8
 8003a84:	464b      	mov	r3, r9
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	0159      	lsls	r1, r3, #5
 8003a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a94:	0150      	lsls	r0, r2, #5
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	46c4      	mov	ip, r8
 8003a9c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	468c      	mov	ip, r1
 8003aa6:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ab6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003aba:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003abe:	ebb2 040a 	subs.w	r4, r2, sl
 8003ac2:	eb63 050b 	sbc.w	r5, r3, fp
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	00eb      	lsls	r3, r5, #3
 8003ad0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad4:	00e2      	lsls	r2, r4, #3
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	461d      	mov	r5, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	18e3      	adds	r3, r4, r3
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	eb45 0303 	adc.w	r3, r5, r3
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003af4:	4629      	mov	r1, r5
 8003af6:	028b      	lsls	r3, r1, #10
 8003af8:	4620      	mov	r0, r4
 8003afa:	4629      	mov	r1, r5
 8003afc:	4604      	mov	r4, r0
 8003afe:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003b02:	4601      	mov	r1, r0
 8003b04:	028a      	lsls	r2, r1, #10
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
 8003b10:	61fa      	str	r2, [r7, #28]
 8003b12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b16:	f7fc fe41 	bl	800079c <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4613      	mov	r3, r2
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8003b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b24:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003b26:	e00d      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0b5b      	lsrs	r3, r3, #13
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	3301      	adds	r3, #1
 8003b38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003b42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3748      	adds	r7, #72	@ 0x48
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	00f42400 	.word	0x00f42400
 8003b58:	007a1200 	.word	0x007a1200
 8003b5c:	08005bb0 	.word	0x08005bb0

08003b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b02      	ldr	r3, [pc, #8]	@ (8003b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	20000004 	.word	0x20000004

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b78:	f7ff fff2 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	08005bcc 	.word	0x08005bcc

08003b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba0:	f7ff ffde 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0adb      	lsrs	r3, r3, #11
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	@ (8003bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08005bcc 	.word	0x08005bcc

08003bc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bd0:	4b29      	ldr	r3, [pc, #164]	@ (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d12c      	bne.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bdc:	4b26      	ldr	r3, [pc, #152]	@ (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003be8:	4b24      	ldr	r3, [pc, #144]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e016      	b.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	6253      	str	r3, [r2, #36]	@ 0x24
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003c14:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4b18      	ldr	r3, [pc, #96]	@ (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003c28:	d105      	bne.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c30:	d101      	bne.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c32:	2301      	movs	r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003c3c:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0f      	ldr	r2, [pc, #60]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 0201 	bic.w	r2, r3, #1
 8003c50:	490b      	ldr	r1, [pc, #44]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c58:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d001      	beq.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e031      	b.n	8003cfa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fe fabc 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 f8e4 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_ConfigClockSource+0x1c>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0b4      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x186>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d56:	d03e      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0xd4>
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	f200 8087 	bhi.w	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d64:	f000 8086 	beq.w	8003e74 <HAL_TIM_ConfigClockSource+0x172>
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6c:	d87f      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d6e:	2b70      	cmp	r3, #112	@ 0x70
 8003d70:	d01a      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0xa6>
 8003d72:	2b70      	cmp	r3, #112	@ 0x70
 8003d74:	d87b      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d76:	2b60      	cmp	r3, #96	@ 0x60
 8003d78:	d050      	beq.n	8003e1c <HAL_TIM_ConfigClockSource+0x11a>
 8003d7a:	2b60      	cmp	r3, #96	@ 0x60
 8003d7c:	d877      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d7e:	2b50      	cmp	r3, #80	@ 0x50
 8003d80:	d03c      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xfa>
 8003d82:	2b50      	cmp	r3, #80	@ 0x50
 8003d84:	d873      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d058      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x13a>
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d86f      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d8e:	2b30      	cmp	r3, #48	@ 0x30
 8003d90:	d064      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003d92:	2b30      	cmp	r3, #48	@ 0x30
 8003d94:	d86b      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d060      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d867      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d05c      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d05a      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003da6:	e062      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	f000 f949 	bl	800404e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
      break;
 8003dd4:	e04f      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de6:	f000 f932 	bl	800404e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df8:	609a      	str	r2, [r3, #8]
      break;
 8003dfa:	e03c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f000 f8a9 	bl	8003f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2150      	movs	r1, #80	@ 0x50
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 f900 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003e1a:	e02c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f000 f8c7 	bl	8003fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2160      	movs	r1, #96	@ 0x60
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f8f0 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003e3a:	e01c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f000 f889 	bl	8003f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2140      	movs	r1, #64	@ 0x40
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f8e0 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003e5a:	e00c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 f8d7 	bl	800401a <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e003      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
      break;
 8003e72:	e000      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea6:	d007      	beq.n	8003eb8 <TIM_Base_SetConfig+0x28>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a28      	ldr	r2, [pc, #160]	@ (8003f4c <TIM_Base_SetConfig+0xbc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x28>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a27      	ldr	r2, [pc, #156]	@ (8003f50 <TIM_Base_SetConfig+0xc0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed0:	d013      	beq.n	8003efa <TIM_Base_SetConfig+0x6a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <TIM_Base_SetConfig+0xbc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00f      	beq.n	8003efa <TIM_Base_SetConfig+0x6a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <TIM_Base_SetConfig+0xc0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x6a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f54 <TIM_Base_SetConfig+0xc4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x6a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <TIM_Base_SetConfig+0xc8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x6a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a19      	ldr	r2, [pc, #100]	@ (8003f5c <TIM_Base_SetConfig+0xcc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40010800 	.word	0x40010800
 8003f58:	40010c00 	.word	0x40010c00
 8003f5c:	40011000 	.word	0x40011000

08003f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 030a 	bic.w	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0210 	bic.w	r2, r3, #16
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	031b      	lsls	r3, r3, #12
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	f043 0307 	orr.w	r3, r3, #7
 800403c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404e:	b480      	push	{r7}
 8004050:	b087      	sub	sp, #28
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004068:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	431a      	orrs	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	609a      	str	r2, [r3, #8]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e046      	b.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e6:	d00e      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a13      	ldr	r2, [pc, #76]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a10      	ldr	r2, [pc, #64]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10c      	bne.n	8004120 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800410c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40010800 	.word	0x40010800

08004148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e042      	b.n	80041e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fe f89e 	bl	80022b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	@ 0x24
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800418a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fdcb 	bl	8004d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	@ 0x28
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b20      	cmp	r3, #32
 8004206:	d175      	bne.n	80042f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_UART_Transmit+0x2c>
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e06e      	b.n	80042f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	@ 0x21
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004226:	f7fe f98b 	bl	8002540 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004240:	d108      	bne.n	8004254 <HAL_UART_Transmit+0x6c>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e003      	b.n	800425c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800425c:	e02e      	b.n	80042bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	@ 0x80
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fb32 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e03a      	b.n	80042f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	3302      	adds	r3, #2
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	e007      	b.n	80042ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1cb      	bne.n	800425e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2140      	movs	r1, #64	@ 0x40
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fafe 	bl	80048d2 <UART_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e006      	b.n	80042f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d112      	bne.n	800433e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_UART_Receive_IT+0x26>
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e00b      	b.n	8004340 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	461a      	mov	r2, r3
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fb25 	bl	8004984 <UART_Start_Receive_IT>
 800433a:	4603      	mov	r3, r0
 800433c:	e000      	b.n	8004340 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b0ba      	sub	sp, #232	@ 0xe8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004374:	2300      	movs	r3, #0
 8004376:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_UART_IRQHandler+0x66>
 800439a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fbff 	bl	8004baa <UART_Receive_IT>
      return;
 80043ac:	e271      	b.n	8004892 <HAL_UART_IRQHandler+0x54a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80de 	beq.w	8004574 <HAL_UART_IRQHandler+0x22c>
 80043b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80d1 	beq.w	8004574 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_UART_IRQHandler+0xae>
 80043de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_UART_IRQHandler+0xd2>
 8004402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	f043 0202 	orr.w	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_UART_IRQHandler+0xf6>
 8004426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	f043 0204 	orr.w	r2, r3, #4
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d011      	beq.n	800446e <HAL_UART_IRQHandler+0x126>
 800444a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f043 0208 	orr.w	r2, r3, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8208 	beq.w	8004888 <HAL_UART_IRQHandler+0x540>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_UART_IRQHandler+0x14e>
 8004484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb8a 	bl	8004baa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b40      	cmp	r3, #64	@ 0x40
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <HAL_UART_IRQHandler+0x17a>
 80044ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04f      	beq.n	8004562 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa97 	bl	80049f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	d141      	bne.n	800455a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044e4:	e853 3f00 	ldrex	r3, [r3]
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3314      	adds	r3, #20
 80044fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004502:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800450e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800451a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1d9      	bne.n	80044d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d013      	beq.n	8004552 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452e:	4a89      	ldr	r2, [pc, #548]	@ (8004754 <HAL_UART_IRQHandler+0x40c>)
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fbec 	bl	8002d14 <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	e00e      	b.n	8004570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9a9 	bl	80048aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	e00a      	b.n	8004570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9a5 	bl	80048aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004560:	e006      	b.n	8004570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9a1 	bl	80048aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800456e:	e18b      	b.n	8004888 <HAL_UART_IRQHandler+0x540>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	bf00      	nop
    return;
 8004572:	e189      	b.n	8004888 <HAL_UART_IRQHandler+0x540>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	2b01      	cmp	r3, #1
 800457a:	f040 8165 	bne.w	8004848 <HAL_UART_IRQHandler+0x500>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 815e 	beq.w	8004848 <HAL_UART_IRQHandler+0x500>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8157 	beq.w	8004848 <HAL_UART_IRQHandler+0x500>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b40      	cmp	r3, #64	@ 0x40
 80045bc:	f040 80cc 	bne.w	8004758 <HAL_UART_IRQHandler+0x410>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80a8 	beq.w	8004726 <HAL_UART_IRQHandler+0x3de>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045de:	429a      	cmp	r2, r3
 80045e0:	f080 80a1 	bcs.w	8004726 <HAL_UART_IRQHandler+0x3de>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	f000 8088 	beq.w	8004708 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800460e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004612:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004616:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004624:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004628:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004630:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800463c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1d9      	bne.n	80045f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3314      	adds	r3, #20
 800464a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004654:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3314      	adds	r3, #20
 8004664:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004668:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800466c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004670:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800467a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e1      	bne.n	8004644 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e3      	bne.n	8004680 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d8:	f023 0310 	bic.w	r3, r3, #16
 80046dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80046ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e3      	bne.n	80046c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fac9 	bl	8002c9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004716:	b29b      	uxth	r3, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	b29b      	uxth	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8cc 	bl	80048bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004724:	e0b2      	b.n	800488c <HAL_UART_IRQHandler+0x544>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800472a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800472e:	429a      	cmp	r2, r3
 8004730:	f040 80ac 	bne.w	800488c <HAL_UART_IRQHandler+0x544>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b20      	cmp	r3, #32
 800473c:	f040 80a6 	bne.w	800488c <HAL_UART_IRQHandler+0x544>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f8b5 	bl	80048bc <HAL_UARTEx_RxEventCallback>
      return;
 8004752:	e09b      	b.n	800488c <HAL_UART_IRQHandler+0x544>
 8004754:	08004abb 	.word	0x08004abb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004760:	b29b      	uxth	r3, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 808e 	beq.w	8004890 <HAL_UART_IRQHandler+0x548>
          && (nb_rx_data > 0U))
 8004774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8089 	beq.w	8004890 <HAL_UART_IRQHandler+0x548>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800478e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004794:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80047a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e3      	bne.n	800477e <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	623b      	str	r3, [r7, #32]
   return(result);
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047da:	633a      	str	r2, [r7, #48]	@ 0x30
 80047dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e3      	bne.n	80047b6 <HAL_UART_IRQHandler+0x46e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60fb      	str	r3, [r7, #12]
   return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004820:	61fa      	str	r2, [r7, #28]
 8004822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e3      	bne.n	80047fc <HAL_UART_IRQHandler+0x4b4>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800483a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f83b 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004846:	e023      	b.n	8004890 <HAL_UART_IRQHandler+0x548>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d009      	beq.n	8004868 <HAL_UART_IRQHandler+0x520>
 8004854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_UART_IRQHandler+0x520>
  {
    UART_Transmit_IT(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f93b 	bl	8004adc <UART_Transmit_IT>
    return;
 8004866:	e014      	b.n	8004892 <HAL_UART_IRQHandler+0x54a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00e      	beq.n	8004892 <HAL_UART_IRQHandler+0x54a>
 8004874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_UART_IRQHandler+0x54a>
  {
    UART_EndTransmit_IT(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f97a 	bl	8004b7a <UART_EndTransmit_IT>
    return;
 8004886:	e004      	b.n	8004892 <HAL_UART_IRQHandler+0x54a>
    return;
 8004888:	bf00      	nop
 800488a:	e002      	b.n	8004892 <HAL_UART_IRQHandler+0x54a>
      return;
 800488c:	bf00      	nop
 800488e:	e000      	b.n	8004892 <HAL_UART_IRQHandler+0x54a>
      return;
 8004890:	bf00      	nop
  }
}
 8004892:	37e8      	adds	r7, #232	@ 0xe8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e2:	e03b      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048ea:	d037      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ec:	f7fd fe28 	bl	8002540 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <UART_WaitOnFlagUntilTimeout+0x30>
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e03a      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d023      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b80      	cmp	r3, #128	@ 0x80
 8004918:	d020      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x8a>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	d01d      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b08      	cmp	r3, #8
 800492c:	d116      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f856 	bl	80049f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2208      	movs	r2, #8
 800494e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e00f      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d0b4      	beq.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2222      	movs	r2, #34	@ 0x22
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0201 	orr.w	r2, r2, #1
 80049d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0220 	orr.w	r2, r2, #32
 80049e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b095      	sub	sp, #84	@ 0x54
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e5      	bne.n	80049fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3314      	adds	r3, #20
 8004a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3314      	adds	r3, #20
 8004a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e5      	bne.n	8004a32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d119      	bne.n	8004aa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f023 0310 	bic.w	r3, r3, #16
 8004a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a8e:	61ba      	str	r2, [r7, #24]
 8004a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6979      	ldr	r1, [r7, #20]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ab0:	bf00      	nop
 8004ab2:	3754      	adds	r7, #84	@ 0x54
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff feeb 	bl	80048aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b21      	cmp	r3, #33	@ 0x21
 8004aee:	d13e      	bne.n	8004b6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af8:	d114      	bne.n	8004b24 <UART_Transmit_IT+0x48>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d110      	bne.n	8004b24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	1c9a      	adds	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]
 8004b22:	e008      	b.n	8004b36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	1c59      	adds	r1, r3, #1
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6211      	str	r1, [r2, #32]
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4619      	mov	r1, r3
 8004b44:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e000      	b.n	8004b70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
  }
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fe7c 	bl	8004898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b08c      	sub	sp, #48	@ 0x30
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b22      	cmp	r3, #34	@ 0x22
 8004bc4:	f040 80aa 	bne.w	8004d1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd0:	d115      	bne.n	8004bfe <UART_Receive_IT+0x54>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d111      	bne.n	8004bfe <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bfc:	e024      	b.n	8004c48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0c:	d007      	beq.n	8004c1e <UART_Receive_IT+0x74>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <UART_Receive_IT+0x82>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e008      	b.n	8004c3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4619      	mov	r1, r3
 8004c56:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d15d      	bne.n	8004d18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0220 	bic.w	r2, r2, #32
 8004c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d135      	bne.n	8004d0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc8:	623a      	str	r2, [r7, #32]
 8004cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d10a      	bne.n	8004d00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fdd8 	bl	80048bc <HAL_UARTEx_RxEventCallback>
 8004d0c:	e002      	b.n	8004d14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc fdc0 	bl	8001894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e002      	b.n	8004d1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3730      	adds	r7, #48	@ 0x30
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004d68:	f023 030c 	bic.w	r3, r3, #12
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	430b      	orrs	r3, r1
 8004d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a55      	ldr	r2, [pc, #340]	@ (8004ee8 <UART_SetConfig+0x1c0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d103      	bne.n	8004d9e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d96:	f7fe ff01 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	e002      	b.n	8004da4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d9e:	f7fe fee9 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004da2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dac:	d14c      	bne.n	8004e48 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009a      	lsls	r2, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	4a49      	ldr	r2, [pc, #292]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	0119      	lsls	r1, r3, #4
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009a      	lsls	r2, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de4:	4b41      	ldr	r3, [pc, #260]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004de6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2064      	movs	r0, #100	@ 0x64
 8004dee:	fb00 f303 	mul.w	r3, r0, r3
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	3332      	adds	r3, #50	@ 0x32
 8004df8:	4a3c      	ldr	r2, [pc, #240]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e06:	4419      	add	r1, r3
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009a      	lsls	r2, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1e:	4b33      	ldr	r3, [pc, #204]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004e20:	fba3 0302 	umull	r0, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2064      	movs	r0, #100	@ 0x64
 8004e28:	fb00 f303 	mul.w	r3, r0, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	3332      	adds	r3, #50	@ 0x32
 8004e32:	4a2e      	ldr	r2, [pc, #184]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 0207 	and.w	r2, r3, #7
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	440a      	add	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e46:	e04a      	b.n	8004ede <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009a      	lsls	r2, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	0119      	lsls	r1, r3, #4
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009a      	lsls	r2, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004e80:	fba3 0302 	umull	r0, r3, r3, r2
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	2064      	movs	r0, #100	@ 0x64
 8004e88:	fb00 f303 	mul.w	r3, r0, r3
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	3332      	adds	r3, #50	@ 0x32
 8004e92:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e9e:	4419      	add	r1, r3
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009a      	lsls	r2, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004eb8:	fba3 0302 	umull	r0, r3, r3, r2
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	2064      	movs	r0, #100	@ 0x64
 8004ec0:	fb00 f303 	mul.w	r3, r0, r3
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	3332      	adds	r3, #50	@ 0x32
 8004eca:	4a08      	ldr	r2, [pc, #32]	@ (8004eec <UART_SetConfig+0x1c4>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	440a      	add	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40013800 	.word	0x40013800
 8004eec:	51eb851f 	.word	0x51eb851f

08004ef0 <atoi>:
 8004ef0:	220a      	movs	r2, #10
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	f000 b87a 	b.w	8004fec <strtol>

08004ef8 <_strtol_l.constprop.0>:
 8004ef8:	2b24      	cmp	r3, #36	@ 0x24
 8004efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004efe:	4686      	mov	lr, r0
 8004f00:	4690      	mov	r8, r2
 8004f02:	d801      	bhi.n	8004f08 <_strtol_l.constprop.0+0x10>
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <_strtol_l.constprop.0+0x1e>
 8004f08:	f000 f8b4 	bl	8005074 <__errno>
 8004f0c:	2316      	movs	r3, #22
 8004f0e:	6003      	str	r3, [r0, #0]
 8004f10:	2000      	movs	r0, #0
 8004f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f16:	460d      	mov	r5, r1
 8004f18:	4833      	ldr	r0, [pc, #204]	@ (8004fe8 <_strtol_l.constprop.0+0xf0>)
 8004f1a:	462a      	mov	r2, r5
 8004f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f20:	5d06      	ldrb	r6, [r0, r4]
 8004f22:	f016 0608 	ands.w	r6, r6, #8
 8004f26:	d1f8      	bne.n	8004f1a <_strtol_l.constprop.0+0x22>
 8004f28:	2c2d      	cmp	r4, #45	@ 0x2d
 8004f2a:	d12d      	bne.n	8004f88 <_strtol_l.constprop.0+0x90>
 8004f2c:	2601      	movs	r6, #1
 8004f2e:	782c      	ldrb	r4, [r5, #0]
 8004f30:	1c95      	adds	r5, r2, #2
 8004f32:	f033 0210 	bics.w	r2, r3, #16
 8004f36:	d109      	bne.n	8004f4c <_strtol_l.constprop.0+0x54>
 8004f38:	2c30      	cmp	r4, #48	@ 0x30
 8004f3a:	d12a      	bne.n	8004f92 <_strtol_l.constprop.0+0x9a>
 8004f3c:	782a      	ldrb	r2, [r5, #0]
 8004f3e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004f42:	2a58      	cmp	r2, #88	@ 0x58
 8004f44:	d125      	bne.n	8004f92 <_strtol_l.constprop.0+0x9a>
 8004f46:	2310      	movs	r3, #16
 8004f48:	786c      	ldrb	r4, [r5, #1]
 8004f4a:	3502      	adds	r5, #2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004f52:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004f56:	fbbc f9f3 	udiv	r9, ip, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004f60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004f64:	2f09      	cmp	r7, #9
 8004f66:	d81b      	bhi.n	8004fa0 <_strtol_l.constprop.0+0xa8>
 8004f68:	463c      	mov	r4, r7
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	dd27      	ble.n	8004fbe <_strtol_l.constprop.0+0xc6>
 8004f6e:	1c57      	adds	r7, r2, #1
 8004f70:	d007      	beq.n	8004f82 <_strtol_l.constprop.0+0x8a>
 8004f72:	4581      	cmp	r9, r0
 8004f74:	d320      	bcc.n	8004fb8 <_strtol_l.constprop.0+0xc0>
 8004f76:	d101      	bne.n	8004f7c <_strtol_l.constprop.0+0x84>
 8004f78:	45a2      	cmp	sl, r4
 8004f7a:	db1d      	blt.n	8004fb8 <_strtol_l.constprop.0+0xc0>
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	fb00 4003 	mla	r0, r0, r3, r4
 8004f82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f86:	e7eb      	b.n	8004f60 <_strtol_l.constprop.0+0x68>
 8004f88:	2c2b      	cmp	r4, #43	@ 0x2b
 8004f8a:	bf04      	itt	eq
 8004f8c:	782c      	ldrbeq	r4, [r5, #0]
 8004f8e:	1c95      	addeq	r5, r2, #2
 8004f90:	e7cf      	b.n	8004f32 <_strtol_l.constprop.0+0x3a>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1da      	bne.n	8004f4c <_strtol_l.constprop.0+0x54>
 8004f96:	2c30      	cmp	r4, #48	@ 0x30
 8004f98:	bf0c      	ite	eq
 8004f9a:	2308      	moveq	r3, #8
 8004f9c:	230a      	movne	r3, #10
 8004f9e:	e7d5      	b.n	8004f4c <_strtol_l.constprop.0+0x54>
 8004fa0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004fa4:	2f19      	cmp	r7, #25
 8004fa6:	d801      	bhi.n	8004fac <_strtol_l.constprop.0+0xb4>
 8004fa8:	3c37      	subs	r4, #55	@ 0x37
 8004faa:	e7de      	b.n	8004f6a <_strtol_l.constprop.0+0x72>
 8004fac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004fb0:	2f19      	cmp	r7, #25
 8004fb2:	d804      	bhi.n	8004fbe <_strtol_l.constprop.0+0xc6>
 8004fb4:	3c57      	subs	r4, #87	@ 0x57
 8004fb6:	e7d8      	b.n	8004f6a <_strtol_l.constprop.0+0x72>
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fbc:	e7e1      	b.n	8004f82 <_strtol_l.constprop.0+0x8a>
 8004fbe:	1c53      	adds	r3, r2, #1
 8004fc0:	d108      	bne.n	8004fd4 <_strtol_l.constprop.0+0xdc>
 8004fc2:	2322      	movs	r3, #34	@ 0x22
 8004fc4:	4660      	mov	r0, ip
 8004fc6:	f8ce 3000 	str.w	r3, [lr]
 8004fca:	f1b8 0f00 	cmp.w	r8, #0
 8004fce:	d0a0      	beq.n	8004f12 <_strtol_l.constprop.0+0x1a>
 8004fd0:	1e69      	subs	r1, r5, #1
 8004fd2:	e006      	b.n	8004fe2 <_strtol_l.constprop.0+0xea>
 8004fd4:	b106      	cbz	r6, 8004fd8 <_strtol_l.constprop.0+0xe0>
 8004fd6:	4240      	negs	r0, r0
 8004fd8:	f1b8 0f00 	cmp.w	r8, #0
 8004fdc:	d099      	beq.n	8004f12 <_strtol_l.constprop.0+0x1a>
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d1f6      	bne.n	8004fd0 <_strtol_l.constprop.0+0xd8>
 8004fe2:	f8c8 1000 	str.w	r1, [r8]
 8004fe6:	e794      	b.n	8004f12 <_strtol_l.constprop.0+0x1a>
 8004fe8:	08005bd5 	.word	0x08005bd5

08004fec <strtol>:
 8004fec:	4613      	mov	r3, r2
 8004fee:	460a      	mov	r2, r1
 8004ff0:	4601      	mov	r1, r0
 8004ff2:	4802      	ldr	r0, [pc, #8]	@ (8004ffc <strtol+0x10>)
 8004ff4:	6800      	ldr	r0, [r0, #0]
 8004ff6:	f7ff bf7f 	b.w	8004ef8 <_strtol_l.constprop.0>
 8004ffa:	bf00      	nop
 8004ffc:	20000010 	.word	0x20000010

08005000 <siprintf>:
 8005000:	b40e      	push	{r1, r2, r3}
 8005002:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005006:	b500      	push	{lr}
 8005008:	b09c      	sub	sp, #112	@ 0x70
 800500a:	ab1d      	add	r3, sp, #116	@ 0x74
 800500c:	9002      	str	r0, [sp, #8]
 800500e:	9006      	str	r0, [sp, #24]
 8005010:	9107      	str	r1, [sp, #28]
 8005012:	9104      	str	r1, [sp, #16]
 8005014:	4808      	ldr	r0, [pc, #32]	@ (8005038 <siprintf+0x38>)
 8005016:	4909      	ldr	r1, [pc, #36]	@ (800503c <siprintf+0x3c>)
 8005018:	f853 2b04 	ldr.w	r2, [r3], #4
 800501c:	9105      	str	r1, [sp, #20]
 800501e:	6800      	ldr	r0, [r0, #0]
 8005020:	a902      	add	r1, sp, #8
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	f000 f9a4 	bl	8005370 <_svfiprintf_r>
 8005028:	2200      	movs	r2, #0
 800502a:	9b02      	ldr	r3, [sp, #8]
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	b01c      	add	sp, #112	@ 0x70
 8005030:	f85d eb04 	ldr.w	lr, [sp], #4
 8005034:	b003      	add	sp, #12
 8005036:	4770      	bx	lr
 8005038:	20000010 	.word	0x20000010
 800503c:	ffff0208 	.word	0xffff0208

08005040 <memset>:
 8005040:	4603      	mov	r3, r0
 8005042:	4402      	add	r2, r0
 8005044:	4293      	cmp	r3, r2
 8005046:	d100      	bne.n	800504a <memset+0xa>
 8005048:	4770      	bx	lr
 800504a:	f803 1b01 	strb.w	r1, [r3], #1
 800504e:	e7f9      	b.n	8005044 <memset+0x4>

08005050 <strncmp>:
 8005050:	b510      	push	{r4, lr}
 8005052:	b16a      	cbz	r2, 8005070 <strncmp+0x20>
 8005054:	3901      	subs	r1, #1
 8005056:	1884      	adds	r4, r0, r2
 8005058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005060:	429a      	cmp	r2, r3
 8005062:	d103      	bne.n	800506c <strncmp+0x1c>
 8005064:	42a0      	cmp	r0, r4
 8005066:	d001      	beq.n	800506c <strncmp+0x1c>
 8005068:	2a00      	cmp	r2, #0
 800506a:	d1f5      	bne.n	8005058 <strncmp+0x8>
 800506c:	1ad0      	subs	r0, r2, r3
 800506e:	bd10      	pop	{r4, pc}
 8005070:	4610      	mov	r0, r2
 8005072:	e7fc      	b.n	800506e <strncmp+0x1e>

08005074 <__errno>:
 8005074:	4b01      	ldr	r3, [pc, #4]	@ (800507c <__errno+0x8>)
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000010 	.word	0x20000010

08005080 <__libc_init_array>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	2600      	movs	r6, #0
 8005084:	4d0c      	ldr	r5, [pc, #48]	@ (80050b8 <__libc_init_array+0x38>)
 8005086:	4c0d      	ldr	r4, [pc, #52]	@ (80050bc <__libc_init_array+0x3c>)
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	42a6      	cmp	r6, r4
 800508e:	d109      	bne.n	80050a4 <__libc_init_array+0x24>
 8005090:	f000 fc78 	bl	8005984 <_init>
 8005094:	2600      	movs	r6, #0
 8005096:	4d0a      	ldr	r5, [pc, #40]	@ (80050c0 <__libc_init_array+0x40>)
 8005098:	4c0a      	ldr	r4, [pc, #40]	@ (80050c4 <__libc_init_array+0x44>)
 800509a:	1b64      	subs	r4, r4, r5
 800509c:	10a4      	asrs	r4, r4, #2
 800509e:	42a6      	cmp	r6, r4
 80050a0:	d105      	bne.n	80050ae <__libc_init_array+0x2e>
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a8:	4798      	blx	r3
 80050aa:	3601      	adds	r6, #1
 80050ac:	e7ee      	b.n	800508c <__libc_init_array+0xc>
 80050ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b2:	4798      	blx	r3
 80050b4:	3601      	adds	r6, #1
 80050b6:	e7f2      	b.n	800509e <__libc_init_array+0x1e>
 80050b8:	08005d10 	.word	0x08005d10
 80050bc:	08005d10 	.word	0x08005d10
 80050c0:	08005d10 	.word	0x08005d10
 80050c4:	08005d14 	.word	0x08005d14

080050c8 <__retarget_lock_acquire_recursive>:
 80050c8:	4770      	bx	lr

080050ca <__retarget_lock_release_recursive>:
 80050ca:	4770      	bx	lr

080050cc <_free_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4605      	mov	r5, r0
 80050d0:	2900      	cmp	r1, #0
 80050d2:	d040      	beq.n	8005156 <_free_r+0x8a>
 80050d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d8:	1f0c      	subs	r4, r1, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfb8      	it	lt
 80050de:	18e4      	addlt	r4, r4, r3
 80050e0:	f000 f8de 	bl	80052a0 <__malloc_lock>
 80050e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <_free_r+0x8c>)
 80050e6:	6813      	ldr	r3, [r2, #0]
 80050e8:	b933      	cbnz	r3, 80050f8 <_free_r+0x2c>
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	6014      	str	r4, [r2, #0]
 80050ee:	4628      	mov	r0, r5
 80050f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f4:	f000 b8da 	b.w	80052ac <__malloc_unlock>
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d908      	bls.n	800510e <_free_r+0x42>
 80050fc:	6820      	ldr	r0, [r4, #0]
 80050fe:	1821      	adds	r1, r4, r0
 8005100:	428b      	cmp	r3, r1
 8005102:	bf01      	itttt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	1809      	addeq	r1, r1, r0
 800510a:	6021      	streq	r1, [r4, #0]
 800510c:	e7ed      	b.n	80050ea <_free_r+0x1e>
 800510e:	461a      	mov	r2, r3
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b10b      	cbz	r3, 8005118 <_free_r+0x4c>
 8005114:	42a3      	cmp	r3, r4
 8005116:	d9fa      	bls.n	800510e <_free_r+0x42>
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	1850      	adds	r0, r2, r1
 800511c:	42a0      	cmp	r0, r4
 800511e:	d10b      	bne.n	8005138 <_free_r+0x6c>
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	4401      	add	r1, r0
 8005124:	1850      	adds	r0, r2, r1
 8005126:	4283      	cmp	r3, r0
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	d1e0      	bne.n	80050ee <_free_r+0x22>
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4408      	add	r0, r1
 8005132:	6010      	str	r0, [r2, #0]
 8005134:	6053      	str	r3, [r2, #4]
 8005136:	e7da      	b.n	80050ee <_free_r+0x22>
 8005138:	d902      	bls.n	8005140 <_free_r+0x74>
 800513a:	230c      	movs	r3, #12
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	e7d6      	b.n	80050ee <_free_r+0x22>
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	1821      	adds	r1, r4, r0
 8005144:	428b      	cmp	r3, r1
 8005146:	bf01      	itttt	eq
 8005148:	6819      	ldreq	r1, [r3, #0]
 800514a:	685b      	ldreq	r3, [r3, #4]
 800514c:	1809      	addeq	r1, r1, r0
 800514e:	6021      	streq	r1, [r4, #0]
 8005150:	6063      	str	r3, [r4, #4]
 8005152:	6054      	str	r4, [r2, #4]
 8005154:	e7cb      	b.n	80050ee <_free_r+0x22>
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20000360 	.word	0x20000360

0800515c <sbrk_aligned>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	4e0f      	ldr	r6, [pc, #60]	@ (800519c <sbrk_aligned+0x40>)
 8005160:	460c      	mov	r4, r1
 8005162:	6831      	ldr	r1, [r6, #0]
 8005164:	4605      	mov	r5, r0
 8005166:	b911      	cbnz	r1, 800516e <sbrk_aligned+0x12>
 8005168:	f000 fbaa 	bl	80058c0 <_sbrk_r>
 800516c:	6030      	str	r0, [r6, #0]
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 fba5 	bl	80058c0 <_sbrk_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d103      	bne.n	8005182 <sbrk_aligned+0x26>
 800517a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800517e:	4620      	mov	r0, r4
 8005180:	bd70      	pop	{r4, r5, r6, pc}
 8005182:	1cc4      	adds	r4, r0, #3
 8005184:	f024 0403 	bic.w	r4, r4, #3
 8005188:	42a0      	cmp	r0, r4
 800518a:	d0f8      	beq.n	800517e <sbrk_aligned+0x22>
 800518c:	1a21      	subs	r1, r4, r0
 800518e:	4628      	mov	r0, r5
 8005190:	f000 fb96 	bl	80058c0 <_sbrk_r>
 8005194:	3001      	adds	r0, #1
 8005196:	d1f2      	bne.n	800517e <sbrk_aligned+0x22>
 8005198:	e7ef      	b.n	800517a <sbrk_aligned+0x1e>
 800519a:	bf00      	nop
 800519c:	2000035c 	.word	0x2000035c

080051a0 <_malloc_r>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	1ccd      	adds	r5, r1, #3
 80051a6:	f025 0503 	bic.w	r5, r5, #3
 80051aa:	3508      	adds	r5, #8
 80051ac:	2d0c      	cmp	r5, #12
 80051ae:	bf38      	it	cc
 80051b0:	250c      	movcc	r5, #12
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	4606      	mov	r6, r0
 80051b6:	db01      	blt.n	80051bc <_malloc_r+0x1c>
 80051b8:	42a9      	cmp	r1, r5
 80051ba:	d904      	bls.n	80051c6 <_malloc_r+0x26>
 80051bc:	230c      	movs	r3, #12
 80051be:	6033      	str	r3, [r6, #0]
 80051c0:	2000      	movs	r0, #0
 80051c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800529c <_malloc_r+0xfc>
 80051ca:	f000 f869 	bl	80052a0 <__malloc_lock>
 80051ce:	f8d8 3000 	ldr.w	r3, [r8]
 80051d2:	461c      	mov	r4, r3
 80051d4:	bb44      	cbnz	r4, 8005228 <_malloc_r+0x88>
 80051d6:	4629      	mov	r1, r5
 80051d8:	4630      	mov	r0, r6
 80051da:	f7ff ffbf 	bl	800515c <sbrk_aligned>
 80051de:	1c43      	adds	r3, r0, #1
 80051e0:	4604      	mov	r4, r0
 80051e2:	d158      	bne.n	8005296 <_malloc_r+0xf6>
 80051e4:	f8d8 4000 	ldr.w	r4, [r8]
 80051e8:	4627      	mov	r7, r4
 80051ea:	2f00      	cmp	r7, #0
 80051ec:	d143      	bne.n	8005276 <_malloc_r+0xd6>
 80051ee:	2c00      	cmp	r4, #0
 80051f0:	d04b      	beq.n	800528a <_malloc_r+0xea>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	4639      	mov	r1, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	eb04 0903 	add.w	r9, r4, r3
 80051fc:	f000 fb60 	bl	80058c0 <_sbrk_r>
 8005200:	4581      	cmp	r9, r0
 8005202:	d142      	bne.n	800528a <_malloc_r+0xea>
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	4630      	mov	r0, r6
 8005208:	1a6d      	subs	r5, r5, r1
 800520a:	4629      	mov	r1, r5
 800520c:	f7ff ffa6 	bl	800515c <sbrk_aligned>
 8005210:	3001      	adds	r0, #1
 8005212:	d03a      	beq.n	800528a <_malloc_r+0xea>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	442b      	add	r3, r5
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	f8d8 3000 	ldr.w	r3, [r8]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	bb62      	cbnz	r2, 800527c <_malloc_r+0xdc>
 8005222:	f8c8 7000 	str.w	r7, [r8]
 8005226:	e00f      	b.n	8005248 <_malloc_r+0xa8>
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	1b52      	subs	r2, r2, r5
 800522c:	d420      	bmi.n	8005270 <_malloc_r+0xd0>
 800522e:	2a0b      	cmp	r2, #11
 8005230:	d917      	bls.n	8005262 <_malloc_r+0xc2>
 8005232:	1961      	adds	r1, r4, r5
 8005234:	42a3      	cmp	r3, r4
 8005236:	6025      	str	r5, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	6059      	strne	r1, [r3, #4]
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	bf08      	it	eq
 8005240:	f8c8 1000 	streq.w	r1, [r8]
 8005244:	5162      	str	r2, [r4, r5]
 8005246:	604b      	str	r3, [r1, #4]
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f82f 	bl	80052ac <__malloc_unlock>
 800524e:	f104 000b 	add.w	r0, r4, #11
 8005252:	1d23      	adds	r3, r4, #4
 8005254:	f020 0007 	bic.w	r0, r0, #7
 8005258:	1ac2      	subs	r2, r0, r3
 800525a:	bf1c      	itt	ne
 800525c:	1a1b      	subne	r3, r3, r0
 800525e:	50a3      	strne	r3, [r4, r2]
 8005260:	e7af      	b.n	80051c2 <_malloc_r+0x22>
 8005262:	6862      	ldr	r2, [r4, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	bf0c      	ite	eq
 8005268:	f8c8 2000 	streq.w	r2, [r8]
 800526c:	605a      	strne	r2, [r3, #4]
 800526e:	e7eb      	b.n	8005248 <_malloc_r+0xa8>
 8005270:	4623      	mov	r3, r4
 8005272:	6864      	ldr	r4, [r4, #4]
 8005274:	e7ae      	b.n	80051d4 <_malloc_r+0x34>
 8005276:	463c      	mov	r4, r7
 8005278:	687f      	ldr	r7, [r7, #4]
 800527a:	e7b6      	b.n	80051ea <_malloc_r+0x4a>
 800527c:	461a      	mov	r2, r3
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	d1fb      	bne.n	800527c <_malloc_r+0xdc>
 8005284:	2300      	movs	r3, #0
 8005286:	6053      	str	r3, [r2, #4]
 8005288:	e7de      	b.n	8005248 <_malloc_r+0xa8>
 800528a:	230c      	movs	r3, #12
 800528c:	4630      	mov	r0, r6
 800528e:	6033      	str	r3, [r6, #0]
 8005290:	f000 f80c 	bl	80052ac <__malloc_unlock>
 8005294:	e794      	b.n	80051c0 <_malloc_r+0x20>
 8005296:	6005      	str	r5, [r0, #0]
 8005298:	e7d6      	b.n	8005248 <_malloc_r+0xa8>
 800529a:	bf00      	nop
 800529c:	20000360 	.word	0x20000360

080052a0 <__malloc_lock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	@ (80052a8 <__malloc_lock+0x8>)
 80052a2:	f7ff bf11 	b.w	80050c8 <__retarget_lock_acquire_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000358 	.word	0x20000358

080052ac <__malloc_unlock>:
 80052ac:	4801      	ldr	r0, [pc, #4]	@ (80052b4 <__malloc_unlock+0x8>)
 80052ae:	f7ff bf0c 	b.w	80050ca <__retarget_lock_release_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000358 	.word	0x20000358

080052b8 <__ssputs_r>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	461f      	mov	r7, r3
 80052be:	688e      	ldr	r6, [r1, #8]
 80052c0:	4682      	mov	sl, r0
 80052c2:	42be      	cmp	r6, r7
 80052c4:	460c      	mov	r4, r1
 80052c6:	4690      	mov	r8, r2
 80052c8:	680b      	ldr	r3, [r1, #0]
 80052ca:	d82d      	bhi.n	8005328 <__ssputs_r+0x70>
 80052cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80052d4:	d026      	beq.n	8005324 <__ssputs_r+0x6c>
 80052d6:	6965      	ldr	r5, [r4, #20]
 80052d8:	6909      	ldr	r1, [r1, #16]
 80052da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052de:	eba3 0901 	sub.w	r9, r3, r1
 80052e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052e6:	1c7b      	adds	r3, r7, #1
 80052e8:	444b      	add	r3, r9
 80052ea:	106d      	asrs	r5, r5, #1
 80052ec:	429d      	cmp	r5, r3
 80052ee:	bf38      	it	cc
 80052f0:	461d      	movcc	r5, r3
 80052f2:	0553      	lsls	r3, r2, #21
 80052f4:	d527      	bpl.n	8005346 <__ssputs_r+0x8e>
 80052f6:	4629      	mov	r1, r5
 80052f8:	f7ff ff52 	bl	80051a0 <_malloc_r>
 80052fc:	4606      	mov	r6, r0
 80052fe:	b360      	cbz	r0, 800535a <__ssputs_r+0xa2>
 8005300:	464a      	mov	r2, r9
 8005302:	6921      	ldr	r1, [r4, #16]
 8005304:	f000 fafa 	bl	80058fc <memcpy>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800530e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	6126      	str	r6, [r4, #16]
 8005316:	444e      	add	r6, r9
 8005318:	6026      	str	r6, [r4, #0]
 800531a:	463e      	mov	r6, r7
 800531c:	6165      	str	r5, [r4, #20]
 800531e:	eba5 0509 	sub.w	r5, r5, r9
 8005322:	60a5      	str	r5, [r4, #8]
 8005324:	42be      	cmp	r6, r7
 8005326:	d900      	bls.n	800532a <__ssputs_r+0x72>
 8005328:	463e      	mov	r6, r7
 800532a:	4632      	mov	r2, r6
 800532c:	4641      	mov	r1, r8
 800532e:	6820      	ldr	r0, [r4, #0]
 8005330:	f000 faac 	bl	800588c <memmove>
 8005334:	2000      	movs	r0, #0
 8005336:	68a3      	ldr	r3, [r4, #8]
 8005338:	1b9b      	subs	r3, r3, r6
 800533a:	60a3      	str	r3, [r4, #8]
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	4433      	add	r3, r6
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005346:	462a      	mov	r2, r5
 8005348:	f000 fae6 	bl	8005918 <_realloc_r>
 800534c:	4606      	mov	r6, r0
 800534e:	2800      	cmp	r0, #0
 8005350:	d1e0      	bne.n	8005314 <__ssputs_r+0x5c>
 8005352:	4650      	mov	r0, sl
 8005354:	6921      	ldr	r1, [r4, #16]
 8005356:	f7ff feb9 	bl	80050cc <_free_r>
 800535a:	230c      	movs	r3, #12
 800535c:	f8ca 3000 	str.w	r3, [sl]
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	e7e9      	b.n	8005342 <__ssputs_r+0x8a>
	...

08005370 <_svfiprintf_r>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	4698      	mov	r8, r3
 8005376:	898b      	ldrh	r3, [r1, #12]
 8005378:	4607      	mov	r7, r0
 800537a:	061b      	lsls	r3, r3, #24
 800537c:	460d      	mov	r5, r1
 800537e:	4614      	mov	r4, r2
 8005380:	b09d      	sub	sp, #116	@ 0x74
 8005382:	d510      	bpl.n	80053a6 <_svfiprintf_r+0x36>
 8005384:	690b      	ldr	r3, [r1, #16]
 8005386:	b973      	cbnz	r3, 80053a6 <_svfiprintf_r+0x36>
 8005388:	2140      	movs	r1, #64	@ 0x40
 800538a:	f7ff ff09 	bl	80051a0 <_malloc_r>
 800538e:	6028      	str	r0, [r5, #0]
 8005390:	6128      	str	r0, [r5, #16]
 8005392:	b930      	cbnz	r0, 80053a2 <_svfiprintf_r+0x32>
 8005394:	230c      	movs	r3, #12
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800539c:	b01d      	add	sp, #116	@ 0x74
 800539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a2:	2340      	movs	r3, #64	@ 0x40
 80053a4:	616b      	str	r3, [r5, #20]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80053aa:	2320      	movs	r3, #32
 80053ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053b0:	2330      	movs	r3, #48	@ 0x30
 80053b2:	f04f 0901 	mov.w	r9, #1
 80053b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005554 <_svfiprintf_r+0x1e4>
 80053be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053c2:	4623      	mov	r3, r4
 80053c4:	469a      	mov	sl, r3
 80053c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ca:	b10a      	cbz	r2, 80053d0 <_svfiprintf_r+0x60>
 80053cc:	2a25      	cmp	r2, #37	@ 0x25
 80053ce:	d1f9      	bne.n	80053c4 <_svfiprintf_r+0x54>
 80053d0:	ebba 0b04 	subs.w	fp, sl, r4
 80053d4:	d00b      	beq.n	80053ee <_svfiprintf_r+0x7e>
 80053d6:	465b      	mov	r3, fp
 80053d8:	4622      	mov	r2, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	4638      	mov	r0, r7
 80053de:	f7ff ff6b 	bl	80052b8 <__ssputs_r>
 80053e2:	3001      	adds	r0, #1
 80053e4:	f000 80a7 	beq.w	8005536 <_svfiprintf_r+0x1c6>
 80053e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ea:	445a      	add	r2, fp
 80053ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80053ee:	f89a 3000 	ldrb.w	r3, [sl]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 809f 	beq.w	8005536 <_svfiprintf_r+0x1c6>
 80053f8:	2300      	movs	r3, #0
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005402:	f10a 0a01 	add.w	sl, sl, #1
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	9307      	str	r3, [sp, #28]
 800540a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800540e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005410:	4654      	mov	r4, sl
 8005412:	2205      	movs	r2, #5
 8005414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005418:	484e      	ldr	r0, [pc, #312]	@ (8005554 <_svfiprintf_r+0x1e4>)
 800541a:	f000 fa61 	bl	80058e0 <memchr>
 800541e:	9a04      	ldr	r2, [sp, #16]
 8005420:	b9d8      	cbnz	r0, 800545a <_svfiprintf_r+0xea>
 8005422:	06d0      	lsls	r0, r2, #27
 8005424:	bf44      	itt	mi
 8005426:	2320      	movmi	r3, #32
 8005428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800542c:	0711      	lsls	r1, r2, #28
 800542e:	bf44      	itt	mi
 8005430:	232b      	movmi	r3, #43	@ 0x2b
 8005432:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005436:	f89a 3000 	ldrb.w	r3, [sl]
 800543a:	2b2a      	cmp	r3, #42	@ 0x2a
 800543c:	d015      	beq.n	800546a <_svfiprintf_r+0xfa>
 800543e:	4654      	mov	r4, sl
 8005440:	2000      	movs	r0, #0
 8005442:	f04f 0c0a 	mov.w	ip, #10
 8005446:	9a07      	ldr	r2, [sp, #28]
 8005448:	4621      	mov	r1, r4
 800544a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800544e:	3b30      	subs	r3, #48	@ 0x30
 8005450:	2b09      	cmp	r3, #9
 8005452:	d94b      	bls.n	80054ec <_svfiprintf_r+0x17c>
 8005454:	b1b0      	cbz	r0, 8005484 <_svfiprintf_r+0x114>
 8005456:	9207      	str	r2, [sp, #28]
 8005458:	e014      	b.n	8005484 <_svfiprintf_r+0x114>
 800545a:	eba0 0308 	sub.w	r3, r0, r8
 800545e:	fa09 f303 	lsl.w	r3, r9, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	46a2      	mov	sl, r4
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	e7d2      	b.n	8005410 <_svfiprintf_r+0xa0>
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	1d19      	adds	r1, r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	9103      	str	r1, [sp, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	bfbb      	ittet	lt
 8005476:	425b      	neglt	r3, r3
 8005478:	f042 0202 	orrlt.w	r2, r2, #2
 800547c:	9307      	strge	r3, [sp, #28]
 800547e:	9307      	strlt	r3, [sp, #28]
 8005480:	bfb8      	it	lt
 8005482:	9204      	strlt	r2, [sp, #16]
 8005484:	7823      	ldrb	r3, [r4, #0]
 8005486:	2b2e      	cmp	r3, #46	@ 0x2e
 8005488:	d10a      	bne.n	80054a0 <_svfiprintf_r+0x130>
 800548a:	7863      	ldrb	r3, [r4, #1]
 800548c:	2b2a      	cmp	r3, #42	@ 0x2a
 800548e:	d132      	bne.n	80054f6 <_svfiprintf_r+0x186>
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	3402      	adds	r4, #2
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	9203      	str	r2, [sp, #12]
 800549a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800549e:	9305      	str	r3, [sp, #20]
 80054a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005558 <_svfiprintf_r+0x1e8>
 80054a4:	2203      	movs	r2, #3
 80054a6:	4650      	mov	r0, sl
 80054a8:	7821      	ldrb	r1, [r4, #0]
 80054aa:	f000 fa19 	bl	80058e0 <memchr>
 80054ae:	b138      	cbz	r0, 80054c0 <_svfiprintf_r+0x150>
 80054b0:	2240      	movs	r2, #64	@ 0x40
 80054b2:	9b04      	ldr	r3, [sp, #16]
 80054b4:	eba0 000a 	sub.w	r0, r0, sl
 80054b8:	4082      	lsls	r2, r0
 80054ba:	4313      	orrs	r3, r2
 80054bc:	3401      	adds	r4, #1
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c4:	2206      	movs	r2, #6
 80054c6:	4825      	ldr	r0, [pc, #148]	@ (800555c <_svfiprintf_r+0x1ec>)
 80054c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054cc:	f000 fa08 	bl	80058e0 <memchr>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d036      	beq.n	8005542 <_svfiprintf_r+0x1d2>
 80054d4:	4b22      	ldr	r3, [pc, #136]	@ (8005560 <_svfiprintf_r+0x1f0>)
 80054d6:	bb1b      	cbnz	r3, 8005520 <_svfiprintf_r+0x1b0>
 80054d8:	9b03      	ldr	r3, [sp, #12]
 80054da:	3307      	adds	r3, #7
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	3308      	adds	r3, #8
 80054e2:	9303      	str	r3, [sp, #12]
 80054e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054e6:	4433      	add	r3, r6
 80054e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ea:	e76a      	b.n	80053c2 <_svfiprintf_r+0x52>
 80054ec:	460c      	mov	r4, r1
 80054ee:	2001      	movs	r0, #1
 80054f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054f4:	e7a8      	b.n	8005448 <_svfiprintf_r+0xd8>
 80054f6:	2300      	movs	r3, #0
 80054f8:	f04f 0c0a 	mov.w	ip, #10
 80054fc:	4619      	mov	r1, r3
 80054fe:	3401      	adds	r4, #1
 8005500:	9305      	str	r3, [sp, #20]
 8005502:	4620      	mov	r0, r4
 8005504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005508:	3a30      	subs	r2, #48	@ 0x30
 800550a:	2a09      	cmp	r2, #9
 800550c:	d903      	bls.n	8005516 <_svfiprintf_r+0x1a6>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0c6      	beq.n	80054a0 <_svfiprintf_r+0x130>
 8005512:	9105      	str	r1, [sp, #20]
 8005514:	e7c4      	b.n	80054a0 <_svfiprintf_r+0x130>
 8005516:	4604      	mov	r4, r0
 8005518:	2301      	movs	r3, #1
 800551a:	fb0c 2101 	mla	r1, ip, r1, r2
 800551e:	e7f0      	b.n	8005502 <_svfiprintf_r+0x192>
 8005520:	ab03      	add	r3, sp, #12
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	462a      	mov	r2, r5
 8005526:	4638      	mov	r0, r7
 8005528:	4b0e      	ldr	r3, [pc, #56]	@ (8005564 <_svfiprintf_r+0x1f4>)
 800552a:	a904      	add	r1, sp, #16
 800552c:	f3af 8000 	nop.w
 8005530:	1c42      	adds	r2, r0, #1
 8005532:	4606      	mov	r6, r0
 8005534:	d1d6      	bne.n	80054e4 <_svfiprintf_r+0x174>
 8005536:	89ab      	ldrh	r3, [r5, #12]
 8005538:	065b      	lsls	r3, r3, #25
 800553a:	f53f af2d 	bmi.w	8005398 <_svfiprintf_r+0x28>
 800553e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005540:	e72c      	b.n	800539c <_svfiprintf_r+0x2c>
 8005542:	ab03      	add	r3, sp, #12
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	462a      	mov	r2, r5
 8005548:	4638      	mov	r0, r7
 800554a:	4b06      	ldr	r3, [pc, #24]	@ (8005564 <_svfiprintf_r+0x1f4>)
 800554c:	a904      	add	r1, sp, #16
 800554e:	f000 f87d 	bl	800564c <_printf_i>
 8005552:	e7ed      	b.n	8005530 <_svfiprintf_r+0x1c0>
 8005554:	08005cd5 	.word	0x08005cd5
 8005558:	08005cdb 	.word	0x08005cdb
 800555c:	08005cdf 	.word	0x08005cdf
 8005560:	00000000 	.word	0x00000000
 8005564:	080052b9 	.word	0x080052b9

08005568 <_printf_common>:
 8005568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	4616      	mov	r6, r2
 800556e:	4698      	mov	r8, r3
 8005570:	688a      	ldr	r2, [r1, #8]
 8005572:	690b      	ldr	r3, [r1, #16]
 8005574:	4607      	mov	r7, r0
 8005576:	4293      	cmp	r3, r2
 8005578:	bfb8      	it	lt
 800557a:	4613      	movlt	r3, r2
 800557c:	6033      	str	r3, [r6, #0]
 800557e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005582:	460c      	mov	r4, r1
 8005584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005588:	b10a      	cbz	r2, 800558e <_printf_common+0x26>
 800558a:	3301      	adds	r3, #1
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	0699      	lsls	r1, r3, #26
 8005592:	bf42      	ittt	mi
 8005594:	6833      	ldrmi	r3, [r6, #0]
 8005596:	3302      	addmi	r3, #2
 8005598:	6033      	strmi	r3, [r6, #0]
 800559a:	6825      	ldr	r5, [r4, #0]
 800559c:	f015 0506 	ands.w	r5, r5, #6
 80055a0:	d106      	bne.n	80055b0 <_printf_common+0x48>
 80055a2:	f104 0a19 	add.w	sl, r4, #25
 80055a6:	68e3      	ldr	r3, [r4, #12]
 80055a8:	6832      	ldr	r2, [r6, #0]
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dc2b      	bgt.n	8005608 <_printf_common+0xa0>
 80055b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	3b00      	subs	r3, #0
 80055b8:	bf18      	it	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	0692      	lsls	r2, r2, #26
 80055be:	d430      	bmi.n	8005622 <_printf_common+0xba>
 80055c0:	4641      	mov	r1, r8
 80055c2:	4638      	mov	r0, r7
 80055c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055c8:	47c8      	blx	r9
 80055ca:	3001      	adds	r0, #1
 80055cc:	d023      	beq.n	8005616 <_printf_common+0xae>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	6922      	ldr	r2, [r4, #16]
 80055d2:	f003 0306 	and.w	r3, r3, #6
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	bf14      	ite	ne
 80055da:	2500      	movne	r5, #0
 80055dc:	6833      	ldreq	r3, [r6, #0]
 80055de:	f04f 0600 	mov.w	r6, #0
 80055e2:	bf08      	it	eq
 80055e4:	68e5      	ldreq	r5, [r4, #12]
 80055e6:	f104 041a 	add.w	r4, r4, #26
 80055ea:	bf08      	it	eq
 80055ec:	1aed      	subeq	r5, r5, r3
 80055ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055f2:	bf08      	it	eq
 80055f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f8:	4293      	cmp	r3, r2
 80055fa:	bfc4      	itt	gt
 80055fc:	1a9b      	subgt	r3, r3, r2
 80055fe:	18ed      	addgt	r5, r5, r3
 8005600:	42b5      	cmp	r5, r6
 8005602:	d11a      	bne.n	800563a <_printf_common+0xd2>
 8005604:	2000      	movs	r0, #0
 8005606:	e008      	b.n	800561a <_printf_common+0xb2>
 8005608:	2301      	movs	r3, #1
 800560a:	4652      	mov	r2, sl
 800560c:	4641      	mov	r1, r8
 800560e:	4638      	mov	r0, r7
 8005610:	47c8      	blx	r9
 8005612:	3001      	adds	r0, #1
 8005614:	d103      	bne.n	800561e <_printf_common+0xb6>
 8005616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800561a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561e:	3501      	adds	r5, #1
 8005620:	e7c1      	b.n	80055a6 <_printf_common+0x3e>
 8005622:	2030      	movs	r0, #48	@ 0x30
 8005624:	18e1      	adds	r1, r4, r3
 8005626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005630:	4422      	add	r2, r4
 8005632:	3302      	adds	r3, #2
 8005634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005638:	e7c2      	b.n	80055c0 <_printf_common+0x58>
 800563a:	2301      	movs	r3, #1
 800563c:	4622      	mov	r2, r4
 800563e:	4641      	mov	r1, r8
 8005640:	4638      	mov	r0, r7
 8005642:	47c8      	blx	r9
 8005644:	3001      	adds	r0, #1
 8005646:	d0e6      	beq.n	8005616 <_printf_common+0xae>
 8005648:	3601      	adds	r6, #1
 800564a:	e7d9      	b.n	8005600 <_printf_common+0x98>

0800564c <_printf_i>:
 800564c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	7e0f      	ldrb	r7, [r1, #24]
 8005652:	4691      	mov	r9, r2
 8005654:	2f78      	cmp	r7, #120	@ 0x78
 8005656:	4680      	mov	r8, r0
 8005658:	460c      	mov	r4, r1
 800565a:	469a      	mov	sl, r3
 800565c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800565e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005662:	d807      	bhi.n	8005674 <_printf_i+0x28>
 8005664:	2f62      	cmp	r7, #98	@ 0x62
 8005666:	d80a      	bhi.n	800567e <_printf_i+0x32>
 8005668:	2f00      	cmp	r7, #0
 800566a:	f000 80d3 	beq.w	8005814 <_printf_i+0x1c8>
 800566e:	2f58      	cmp	r7, #88	@ 0x58
 8005670:	f000 80ba 	beq.w	80057e8 <_printf_i+0x19c>
 8005674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800567c:	e03a      	b.n	80056f4 <_printf_i+0xa8>
 800567e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005682:	2b15      	cmp	r3, #21
 8005684:	d8f6      	bhi.n	8005674 <_printf_i+0x28>
 8005686:	a101      	add	r1, pc, #4	@ (adr r1, 800568c <_printf_i+0x40>)
 8005688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800568c:	080056e5 	.word	0x080056e5
 8005690:	080056f9 	.word	0x080056f9
 8005694:	08005675 	.word	0x08005675
 8005698:	08005675 	.word	0x08005675
 800569c:	08005675 	.word	0x08005675
 80056a0:	08005675 	.word	0x08005675
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	08005675 	.word	0x08005675
 80056ac:	08005675 	.word	0x08005675
 80056b0:	08005675 	.word	0x08005675
 80056b4:	08005675 	.word	0x08005675
 80056b8:	080057fb 	.word	0x080057fb
 80056bc:	08005723 	.word	0x08005723
 80056c0:	080057b5 	.word	0x080057b5
 80056c4:	08005675 	.word	0x08005675
 80056c8:	08005675 	.word	0x08005675
 80056cc:	0800581d 	.word	0x0800581d
 80056d0:	08005675 	.word	0x08005675
 80056d4:	08005723 	.word	0x08005723
 80056d8:	08005675 	.word	0x08005675
 80056dc:	08005675 	.word	0x08005675
 80056e0:	080057bd 	.word	0x080057bd
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6032      	str	r2, [r6, #0]
 80056ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056f4:	2301      	movs	r3, #1
 80056f6:	e09e      	b.n	8005836 <_printf_i+0x1ea>
 80056f8:	6833      	ldr	r3, [r6, #0]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1d19      	adds	r1, r3, #4
 80056fe:	6031      	str	r1, [r6, #0]
 8005700:	0606      	lsls	r6, r0, #24
 8005702:	d501      	bpl.n	8005708 <_printf_i+0xbc>
 8005704:	681d      	ldr	r5, [r3, #0]
 8005706:	e003      	b.n	8005710 <_printf_i+0xc4>
 8005708:	0645      	lsls	r5, r0, #25
 800570a:	d5fb      	bpl.n	8005704 <_printf_i+0xb8>
 800570c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005710:	2d00      	cmp	r5, #0
 8005712:	da03      	bge.n	800571c <_printf_i+0xd0>
 8005714:	232d      	movs	r3, #45	@ 0x2d
 8005716:	426d      	negs	r5, r5
 8005718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800571c:	230a      	movs	r3, #10
 800571e:	4859      	ldr	r0, [pc, #356]	@ (8005884 <_printf_i+0x238>)
 8005720:	e011      	b.n	8005746 <_printf_i+0xfa>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	6833      	ldr	r3, [r6, #0]
 8005726:	0608      	lsls	r0, r1, #24
 8005728:	f853 5b04 	ldr.w	r5, [r3], #4
 800572c:	d402      	bmi.n	8005734 <_printf_i+0xe8>
 800572e:	0649      	lsls	r1, r1, #25
 8005730:	bf48      	it	mi
 8005732:	b2ad      	uxthmi	r5, r5
 8005734:	2f6f      	cmp	r7, #111	@ 0x6f
 8005736:	6033      	str	r3, [r6, #0]
 8005738:	bf14      	ite	ne
 800573a:	230a      	movne	r3, #10
 800573c:	2308      	moveq	r3, #8
 800573e:	4851      	ldr	r0, [pc, #324]	@ (8005884 <_printf_i+0x238>)
 8005740:	2100      	movs	r1, #0
 8005742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005746:	6866      	ldr	r6, [r4, #4]
 8005748:	2e00      	cmp	r6, #0
 800574a:	bfa8      	it	ge
 800574c:	6821      	ldrge	r1, [r4, #0]
 800574e:	60a6      	str	r6, [r4, #8]
 8005750:	bfa4      	itt	ge
 8005752:	f021 0104 	bicge.w	r1, r1, #4
 8005756:	6021      	strge	r1, [r4, #0]
 8005758:	b90d      	cbnz	r5, 800575e <_printf_i+0x112>
 800575a:	2e00      	cmp	r6, #0
 800575c:	d04b      	beq.n	80057f6 <_printf_i+0x1aa>
 800575e:	4616      	mov	r6, r2
 8005760:	fbb5 f1f3 	udiv	r1, r5, r3
 8005764:	fb03 5711 	mls	r7, r3, r1, r5
 8005768:	5dc7      	ldrb	r7, [r0, r7]
 800576a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800576e:	462f      	mov	r7, r5
 8005770:	42bb      	cmp	r3, r7
 8005772:	460d      	mov	r5, r1
 8005774:	d9f4      	bls.n	8005760 <_printf_i+0x114>
 8005776:	2b08      	cmp	r3, #8
 8005778:	d10b      	bne.n	8005792 <_printf_i+0x146>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	07df      	lsls	r7, r3, #31
 800577e:	d508      	bpl.n	8005792 <_printf_i+0x146>
 8005780:	6923      	ldr	r3, [r4, #16]
 8005782:	6861      	ldr	r1, [r4, #4]
 8005784:	4299      	cmp	r1, r3
 8005786:	bfde      	ittt	le
 8005788:	2330      	movle	r3, #48	@ 0x30
 800578a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800578e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005792:	1b92      	subs	r2, r2, r6
 8005794:	6122      	str	r2, [r4, #16]
 8005796:	464b      	mov	r3, r9
 8005798:	4621      	mov	r1, r4
 800579a:	4640      	mov	r0, r8
 800579c:	f8cd a000 	str.w	sl, [sp]
 80057a0:	aa03      	add	r2, sp, #12
 80057a2:	f7ff fee1 	bl	8005568 <_printf_common>
 80057a6:	3001      	adds	r0, #1
 80057a8:	d14a      	bne.n	8005840 <_printf_i+0x1f4>
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057ae:	b004      	add	sp, #16
 80057b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f043 0320 	orr.w	r3, r3, #32
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	2778      	movs	r7, #120	@ 0x78
 80057be:	4832      	ldr	r0, [pc, #200]	@ (8005888 <_printf_i+0x23c>)
 80057c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	6831      	ldr	r1, [r6, #0]
 80057c8:	061f      	lsls	r7, r3, #24
 80057ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80057ce:	d402      	bmi.n	80057d6 <_printf_i+0x18a>
 80057d0:	065f      	lsls	r7, r3, #25
 80057d2:	bf48      	it	mi
 80057d4:	b2ad      	uxthmi	r5, r5
 80057d6:	6031      	str	r1, [r6, #0]
 80057d8:	07d9      	lsls	r1, r3, #31
 80057da:	bf44      	itt	mi
 80057dc:	f043 0320 	orrmi.w	r3, r3, #32
 80057e0:	6023      	strmi	r3, [r4, #0]
 80057e2:	b11d      	cbz	r5, 80057ec <_printf_i+0x1a0>
 80057e4:	2310      	movs	r3, #16
 80057e6:	e7ab      	b.n	8005740 <_printf_i+0xf4>
 80057e8:	4826      	ldr	r0, [pc, #152]	@ (8005884 <_printf_i+0x238>)
 80057ea:	e7e9      	b.n	80057c0 <_printf_i+0x174>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	f023 0320 	bic.w	r3, r3, #32
 80057f2:	6023      	str	r3, [r4, #0]
 80057f4:	e7f6      	b.n	80057e4 <_printf_i+0x198>
 80057f6:	4616      	mov	r6, r2
 80057f8:	e7bd      	b.n	8005776 <_printf_i+0x12a>
 80057fa:	6833      	ldr	r3, [r6, #0]
 80057fc:	6825      	ldr	r5, [r4, #0]
 80057fe:	1d18      	adds	r0, r3, #4
 8005800:	6961      	ldr	r1, [r4, #20]
 8005802:	6030      	str	r0, [r6, #0]
 8005804:	062e      	lsls	r6, r5, #24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	d501      	bpl.n	800580e <_printf_i+0x1c2>
 800580a:	6019      	str	r1, [r3, #0]
 800580c:	e002      	b.n	8005814 <_printf_i+0x1c8>
 800580e:	0668      	lsls	r0, r5, #25
 8005810:	d5fb      	bpl.n	800580a <_printf_i+0x1be>
 8005812:	8019      	strh	r1, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	4616      	mov	r6, r2
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	e7bc      	b.n	8005796 <_printf_i+0x14a>
 800581c:	6833      	ldr	r3, [r6, #0]
 800581e:	2100      	movs	r1, #0
 8005820:	1d1a      	adds	r2, r3, #4
 8005822:	6032      	str	r2, [r6, #0]
 8005824:	681e      	ldr	r6, [r3, #0]
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	4630      	mov	r0, r6
 800582a:	f000 f859 	bl	80058e0 <memchr>
 800582e:	b108      	cbz	r0, 8005834 <_printf_i+0x1e8>
 8005830:	1b80      	subs	r0, r0, r6
 8005832:	6060      	str	r0, [r4, #4]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	6123      	str	r3, [r4, #16]
 8005838:	2300      	movs	r3, #0
 800583a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800583e:	e7aa      	b.n	8005796 <_printf_i+0x14a>
 8005840:	4632      	mov	r2, r6
 8005842:	4649      	mov	r1, r9
 8005844:	4640      	mov	r0, r8
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	47d0      	blx	sl
 800584a:	3001      	adds	r0, #1
 800584c:	d0ad      	beq.n	80057aa <_printf_i+0x15e>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	079b      	lsls	r3, r3, #30
 8005852:	d413      	bmi.n	800587c <_printf_i+0x230>
 8005854:	68e0      	ldr	r0, [r4, #12]
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	4298      	cmp	r0, r3
 800585a:	bfb8      	it	lt
 800585c:	4618      	movlt	r0, r3
 800585e:	e7a6      	b.n	80057ae <_printf_i+0x162>
 8005860:	2301      	movs	r3, #1
 8005862:	4632      	mov	r2, r6
 8005864:	4649      	mov	r1, r9
 8005866:	4640      	mov	r0, r8
 8005868:	47d0      	blx	sl
 800586a:	3001      	adds	r0, #1
 800586c:	d09d      	beq.n	80057aa <_printf_i+0x15e>
 800586e:	3501      	adds	r5, #1
 8005870:	68e3      	ldr	r3, [r4, #12]
 8005872:	9903      	ldr	r1, [sp, #12]
 8005874:	1a5b      	subs	r3, r3, r1
 8005876:	42ab      	cmp	r3, r5
 8005878:	dcf2      	bgt.n	8005860 <_printf_i+0x214>
 800587a:	e7eb      	b.n	8005854 <_printf_i+0x208>
 800587c:	2500      	movs	r5, #0
 800587e:	f104 0619 	add.w	r6, r4, #25
 8005882:	e7f5      	b.n	8005870 <_printf_i+0x224>
 8005884:	08005ce6 	.word	0x08005ce6
 8005888:	08005cf7 	.word	0x08005cf7

0800588c <memmove>:
 800588c:	4288      	cmp	r0, r1
 800588e:	b510      	push	{r4, lr}
 8005890:	eb01 0402 	add.w	r4, r1, r2
 8005894:	d902      	bls.n	800589c <memmove+0x10>
 8005896:	4284      	cmp	r4, r0
 8005898:	4623      	mov	r3, r4
 800589a:	d807      	bhi.n	80058ac <memmove+0x20>
 800589c:	1e43      	subs	r3, r0, #1
 800589e:	42a1      	cmp	r1, r4
 80058a0:	d008      	beq.n	80058b4 <memmove+0x28>
 80058a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058aa:	e7f8      	b.n	800589e <memmove+0x12>
 80058ac:	4601      	mov	r1, r0
 80058ae:	4402      	add	r2, r0
 80058b0:	428a      	cmp	r2, r1
 80058b2:	d100      	bne.n	80058b6 <memmove+0x2a>
 80058b4:	bd10      	pop	{r4, pc}
 80058b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058be:	e7f7      	b.n	80058b0 <memmove+0x24>

080058c0 <_sbrk_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	2300      	movs	r3, #0
 80058c4:	4d05      	ldr	r5, [pc, #20]	@ (80058dc <_sbrk_r+0x1c>)
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fc fd72 	bl	80023b4 <_sbrk>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_sbrk_r+0x1a>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_sbrk_r+0x1a>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20000354 	.word	0x20000354

080058e0 <memchr>:
 80058e0:	4603      	mov	r3, r0
 80058e2:	b510      	push	{r4, lr}
 80058e4:	b2c9      	uxtb	r1, r1
 80058e6:	4402      	add	r2, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	d101      	bne.n	80058f2 <memchr+0x12>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e003      	b.n	80058fa <memchr+0x1a>
 80058f2:	7804      	ldrb	r4, [r0, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	428c      	cmp	r4, r1
 80058f8:	d1f6      	bne.n	80058e8 <memchr+0x8>
 80058fa:	bd10      	pop	{r4, pc}

080058fc <memcpy>:
 80058fc:	440a      	add	r2, r1
 80058fe:	4291      	cmp	r1, r2
 8005900:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005904:	d100      	bne.n	8005908 <memcpy+0xc>
 8005906:	4770      	bx	lr
 8005908:	b510      	push	{r4, lr}
 800590a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800590e:	4291      	cmp	r1, r2
 8005910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005914:	d1f9      	bne.n	800590a <memcpy+0xe>
 8005916:	bd10      	pop	{r4, pc}

08005918 <_realloc_r>:
 8005918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800591c:	4680      	mov	r8, r0
 800591e:	4615      	mov	r5, r2
 8005920:	460c      	mov	r4, r1
 8005922:	b921      	cbnz	r1, 800592e <_realloc_r+0x16>
 8005924:	4611      	mov	r1, r2
 8005926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	f7ff bc39 	b.w	80051a0 <_malloc_r>
 800592e:	b92a      	cbnz	r2, 800593c <_realloc_r+0x24>
 8005930:	f7ff fbcc 	bl	80050cc <_free_r>
 8005934:	2400      	movs	r4, #0
 8005936:	4620      	mov	r0, r4
 8005938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800593c:	f000 f81a 	bl	8005974 <_malloc_usable_size_r>
 8005940:	4285      	cmp	r5, r0
 8005942:	4606      	mov	r6, r0
 8005944:	d802      	bhi.n	800594c <_realloc_r+0x34>
 8005946:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800594a:	d8f4      	bhi.n	8005936 <_realloc_r+0x1e>
 800594c:	4629      	mov	r1, r5
 800594e:	4640      	mov	r0, r8
 8005950:	f7ff fc26 	bl	80051a0 <_malloc_r>
 8005954:	4607      	mov	r7, r0
 8005956:	2800      	cmp	r0, #0
 8005958:	d0ec      	beq.n	8005934 <_realloc_r+0x1c>
 800595a:	42b5      	cmp	r5, r6
 800595c:	462a      	mov	r2, r5
 800595e:	4621      	mov	r1, r4
 8005960:	bf28      	it	cs
 8005962:	4632      	movcs	r2, r6
 8005964:	f7ff ffca 	bl	80058fc <memcpy>
 8005968:	4621      	mov	r1, r4
 800596a:	4640      	mov	r0, r8
 800596c:	f7ff fbae 	bl	80050cc <_free_r>
 8005970:	463c      	mov	r4, r7
 8005972:	e7e0      	b.n	8005936 <_realloc_r+0x1e>

08005974 <_malloc_usable_size_r>:
 8005974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005978:	1f18      	subs	r0, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfbc      	itt	lt
 800597e:	580b      	ldrlt	r3, [r1, r0]
 8005980:	18c0      	addlt	r0, r0, r3
 8005982:	4770      	bx	lr

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
