
wheel_speed_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002838  08002838  00003838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002854  08002854  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002854  08002854  00003854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800285c  0800285c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800285c  0800285c  0000385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002860  08002860  00003860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002864  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08002870  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002870  00004144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fcb  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ff  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0000d700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000706  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ba9  00000000  00000000  0000e746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091d7  00000000  00000000  000222ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed47  00000000  00000000  0002b4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000aa250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ac87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002820 	.word	0x08002820

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002820 	.word	0x08002820

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <set_speed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_speed(unsigned short dc_right, unsigned short dc_left){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	80fb      	strh	r3, [r7, #6]
 8000474:	4613      	mov	r3, r2
 8000476:	80bb      	strh	r3, [r7, #4]
	DC_RIGHT = dc_right;
 8000478:	4a05      	ldr	r2, [pc, #20]	@ (8000490 <set_speed+0x28>)
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	8013      	strh	r3, [r2, #0]
	DC_LEFT = dc_left;
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <set_speed+0x2c>)
 8000480:	88bb      	ldrh	r3, [r7, #4]
 8000482:	8013      	strh	r3, [r2, #0]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	2000013c 	.word	0x2000013c
 8000494:	2000013e 	.word	0x2000013e

08000498 <setup_wheels>:
void setup_wheels(){
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

	  GPIOB -> MODER  |= (1 << (11*2+1));
 800049c:	4b25      	ldr	r3, [pc, #148]	@ (8000534 <setup_wheels+0x9c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a24      	ldr	r2, [pc, #144]	@ (8000534 <setup_wheels+0x9c>)
 80004a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80004a6:	6013      	str	r3, [r2, #0]
	  GPIOB -> MODER &= ~(1 << 11*2);
 80004a8:	4b22      	ldr	r3, [pc, #136]	@ (8000534 <setup_wheels+0x9c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a21      	ldr	r2, [pc, #132]	@ (8000534 <setup_wheels+0x9c>)
 80004ae:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80004b2:	6013      	str	r3, [r2, #0]
	  GPIOB->AFR[1] &= ~(0xF << 12);
 80004b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000534 <setup_wheels+0x9c>)
 80004b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000534 <setup_wheels+0x9c>)
 80004ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80004be:	6253      	str	r3, [r2, #36]	@ 0x24
	  GPIOB->AFR[1] |= (1 << 12);
 80004c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000534 <setup_wheels+0x9c>)
 80004c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000534 <setup_wheels+0x9c>)
 80004c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004ca:	6253      	str	r3, [r2, #36]	@ 0x24

	  GPIOB->MODER |= (1 << (10*2+1));  // Poner bit 21 en 1
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <setup_wheels+0x9c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a18      	ldr	r2, [pc, #96]	@ (8000534 <setup_wheels+0x9c>)
 80004d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004d6:	6013      	str	r3, [r2, #0]
	  GPIOB->MODER &= ~(1 << (10*2));    // Poner bit 20 en 0
 80004d8:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <setup_wheels+0x9c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <setup_wheels+0x9c>)
 80004de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80004e2:	6013      	str	r3, [r2, #0]
	  GPIOB->AFR[1] &= ~(0xF << 8);
 80004e4:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <setup_wheels+0x9c>)
 80004e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004e8:	4a12      	ldr	r2, [pc, #72]	@ (8000534 <setup_wheels+0x9c>)
 80004ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80004ee:	6253      	str	r3, [r2, #36]	@ 0x24
	  GPIOB->AFR[1] |= (1 << 8);
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <setup_wheels+0x9c>)
 80004f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000534 <setup_wheels+0x9c>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004fa:	6253      	str	r3, [r2, #36]	@ 0x24

	  GPIOB -> MODER &= ~(1 << (13*2+1));
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <setup_wheels+0x9c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <setup_wheels+0x9c>)
 8000502:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000506:	6013      	str	r3, [r2, #0]
	  GPIOB -> MODER |= (1 << 13*2);
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <setup_wheels+0x9c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a09      	ldr	r2, [pc, #36]	@ (8000534 <setup_wheels+0x9c>)
 800050e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000512:	6013      	str	r3, [r2, #0]


	  GPIOB -> MODER &= ~(1 << (12*2+1));
 8000514:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <setup_wheels+0x9c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <setup_wheels+0x9c>)
 800051a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800051e:	6013      	str	r3, [r2, #0]
	  GPIOB -> MODER |= (1 << 12*2);
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <setup_wheels+0x9c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a03      	ldr	r2, [pc, #12]	@ (8000534 <setup_wheels+0x9c>)
 8000526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800052a:	6013      	str	r3, [r2, #0]


}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40020400 	.word	0x40020400

08000538 <setup_pwm>:

void setup_pwm(){
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  TIM2->CR1 = 0x0080; // ARPE = 1 -> Is PWM; CEN = 0; Counter OFF
 800053c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000540:	2280      	movs	r2, #128	@ 0x80
 8000542:	601a      	str	r2, [r3, #0]
  TIM2->CR2 = 0x0000; // Always 0 in this course
 8000544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  TIM2->SMCR = 0x0000; // Always 0 in this course
 800054c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  TIM2->PSC = 32000; // Pre-scaler=32000 -> f_counter=32000000/32000 = 1000 steps/second
 8000554:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000558:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800055c:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->CNT = 0; // Initialize counter to 0
 800055e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM2->ARR = 99;   // 100 niveles (0-99) -> 100 Hz PWM con 1% de resolución
 8000566:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800056a:	2263      	movs	r2, #99	@ 0x63
 800056c:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->CCR3 = DC_LEFT;  // 50% duty cycle
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <setup_pwm+0x98>)
 8000570:	881a      	ldrh	r2, [r3, #0]
 8000572:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000576:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = DC_RIGHT;
 8000578:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <setup_pwm+0x9c>)
 800057a:	881a      	ldrh	r2, [r3, #0]
 800057c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000580:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM2->DIER = 0x0000; // No IRQ when counting is finished -> CCyIE = 0
 8000582:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  // Output mode
  TIM2->CCMR2 = 0x6868; // CCyS = 0 (TOC, PWM)
 800058a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800058e:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000592:	61da      	str	r2, [r3, #28]
  // OCyM = 110 (PWM starting in 1)
  // OCyPE = 1 (with preload)
  TIM2->CCER = 0x1100; // CCyP = 0 (always in PWM)
 8000594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000598:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 800059c:	621a      	str	r2, [r3, #32]
  // CCyE = 1 (hardware output activated)
  // Counter enabling
  TIM2->CR1 |= 0x0001; // CEN = 1 -> Start counter
 800059e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
  TIM2->EGR |= 0x0001; // UG = 1 -> Generate update event
 80005ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6153      	str	r3, [r2, #20]
  TIM2->SR = 0; // Counter flags cleared
 80005be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	2000013e 	.word	0x2000013e
 80005d4:	2000013c 	.word	0x2000013c

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fb4d 	bl	8000c7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f816 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f9aa 	bl	800093c <MX_GPIO_Init>
  MX_ADC_Init();
 80005e8:	f000 f860 	bl	80006ac <MX_ADC_Init>
  MX_TS_Init();
 80005ec:	f000 f9a0 	bl	8000930 <MX_TS_Init>
  MX_TIM2_Init();
 80005f0:	f000 f8b6 	bl	8000760 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f4:	f000 f900 	bl	80007f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005f8:	f000 f94c 	bl	8000894 <MX_TIM4_Init>





  set_speed(0,0);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ff32 	bl	8000468 <set_speed>
  setup_wheels();
 8000604:	f7ff ff48 	bl	8000498 <setup_wheels>
  setup_pwm();
 8000608:	f7ff ff96 	bl	8000538 <setup_pwm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x34>

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b092      	sub	sp, #72	@ 0x48
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2234      	movs	r2, #52	@ 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 f8d2 	bl	80027c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <SystemClock_Config+0x98>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800063a:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <SystemClock_Config+0x98>)
 800063c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000640:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2300      	movs	r3, #0
 8000654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000656:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800065c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f888 	bl	800177c <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000672:	f000 f9f1 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2101      	movs	r1, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fba4 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069a:	f000 f9dd 	bl	8000a58 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3748      	adds	r7, #72	@ 0x48
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006bc:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <MX_ADC_Init+0xac>)
 80006be:	4a27      	ldr	r2, [pc, #156]	@ (800075c <MX_ADC_Init+0xb0>)
 80006c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c2:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <MX_ADC_Init+0xac>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006c8:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_ADC_Init+0xac>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_ADC_Init+0xac>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d4:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <MX_ADC_Init+0xac>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_ADC_Init+0xac>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_ADC_Init+0xac>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_ADC_Init+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_ADC_Init+0xac>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_ADC_Init+0xac>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_ADC_Init+0xac>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_ADC_Init+0xac>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_ADC_Init+0xac>)
 800070a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_ADC_Init+0xac>)
 8000712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000716:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_ADC_Init+0xac>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <MX_ADC_Init+0xac>)
 8000722:	f000 fb19 	bl	8000d58 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 800072c:	f000 f994 	bl	8000a58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000730:	2304      	movs	r3, #4
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_ADC_Init+0xac>)
 8000742:	f000 fc4f 	bl	8000fe4 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800074c:	f000 f984 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000028 	.word	0x20000028
 800075c:	40012400 	.word	0x40012400

08000760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <MX_TIM2_Init+0x94>)
 800077e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_TIM2_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_TIM2_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_TIM2_Init+0x94>)
 8000792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_TIM2_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_TIM2_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a4:	4813      	ldr	r0, [pc, #76]	@ (80007f4 <MX_TIM2_Init+0x94>)
 80007a6:	f001 fdad 	bl	8002304 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007b0:	f000 f952 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <MX_TIM2_Init+0x94>)
 80007c2:	f001 fdde 	bl	8002382 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f944 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_TIM2_Init+0x94>)
 80007de:	f001 ff95 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f936 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000007c 	.word	0x2000007c

080007f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_TIM3_Init+0x94>)
 8000816:	4a1e      	ldr	r2, [pc, #120]	@ (8000890 <MX_TIM3_Init+0x98>)
 8000818:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_TIM3_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_TIM3_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_TIM3_Init+0x94>)
 8000828:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800082c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_TIM3_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_TIM3_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800083a:	4814      	ldr	r0, [pc, #80]	@ (800088c <MX_TIM3_Init+0x94>)
 800083c:	f001 fd62 	bl	8002304 <HAL_TIM_Base_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f907 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	@ (800088c <MX_TIM3_Init+0x94>)
 8000858:	f001 fd93 	bl	8002382 <HAL_TIM_ConfigClockSource>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 f8f9 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	@ (800088c <MX_TIM3_Init+0x94>)
 8000874:	f001 ff4a 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800087e:	f000 f8eb 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000bc 	.word	0x200000bc
 8000890:	40000400 	.word	0x40000400

08000894 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008b2:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <MX_TIM4_Init+0x98>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008d6:	4814      	ldr	r0, [pc, #80]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008d8:	f001 fd14 	bl	8002304 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f8b9 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_TIM4_Init+0x94>)
 80008f4:	f001 fd45 	bl	8002382 <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 f8ab 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <MX_TIM4_Init+0x94>)
 8000910:	f001 fefc 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800091a:	f000 f89d 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000fc 	.word	0x200000fc
 800092c:	40000800 	.word	0x40000800

08000930 <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a3c      	ldr	r2, [pc, #240]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a36      	ldr	r2, [pc, #216]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a30      	ldr	r2, [pc, #192]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <MX_GPIO_Init+0x10c>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	21c0      	movs	r1, #192	@ 0xc0
 800099e:	482b      	ldr	r0, [pc, #172]	@ (8000a4c <MX_GPIO_Init+0x110>)
 80009a0:	f000 fed4 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG14_Pin SEG15_Pin SEG16_Pin SEG17_Pin
                           SEG18_Pin SEG19_Pin SEG20_Pin SEG21_Pin
                           SEG22_Pin SEG23_Pin */
  GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin
 80009a4:	f640 73cf 	movw	r3, #4047	@ 0xfcf
 80009a8:	60fb      	str	r3, [r7, #12]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin
                          |SEG22_Pin|SEG23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80009b6:	230b      	movs	r3, #11
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	4823      	ldr	r0, [pc, #140]	@ (8000a50 <MX_GPIO_Init+0x114>)
 80009c2:	f000 fd43 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c6:	2301      	movs	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	481e      	ldr	r0, [pc, #120]	@ (8000a54 <MX_GPIO_Init+0x118>)
 80009dc:	f000 fd36 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin COM0_Pin
                           COM1_Pin COM2_Pin SEG12_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin
 80009e0:	f248 730e 	movw	r3, #34574	@ 0x870e
 80009e4:	60fb      	str	r3, [r7, #12]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80009f2:	230b      	movs	r3, #11
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4815      	ldr	r0, [pc, #84]	@ (8000a54 <MX_GPIO_Init+0x118>)
 80009fe:	f000 fd25 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG6_Pin SEG7_Pin SEG8_Pin SEG9_Pin
                           SEG10_Pin SEG11_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG13_Pin COM3_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin
 8000a02:	f64f 7338 	movw	r3, #65336	@ 0xff38
 8000a06:	60fb      	str	r3, [r7, #12]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000a14:	230b      	movs	r3, #11
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <MX_GPIO_Init+0x110>)
 8000a20:	f000 fd14 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000a24:	23c0      	movs	r3, #192	@ 0xc0
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_GPIO_Init+0x110>)
 8000a3c:	f000 fd06 	bl	800144c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020000 	.word	0x40020000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a74:	6253      	str	r3, [r2, #36]	@ 0x24
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a84:	6a1b      	ldr	r3, [r3, #32]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6213      	str	r3, [r2, #32]
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a90:	6a1b      	ldr	r3, [r3, #32]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	6253      	str	r3, [r2, #36]	@ 0x24
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_MspInit+0x5c>)
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab2:	2007      	movs	r0, #7
 8000ab4:	f000 fc96 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a15      	ldr	r2, [pc, #84]	@ (8000b38 <HAL_ADC_MspInit+0x74>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d123      	bne.n	8000b2e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_ADC_MspInit+0x78>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <HAL_ADC_MspInit+0x78>)
 8000aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af0:	6213      	str	r3, [r2, #32]
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_ADC_MspInit+0x78>)
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_ADC_MspInit+0x78>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_ADC_MspInit+0x78>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_ADC_MspInit+0x78>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8000b16:	2310      	movs	r3, #16
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <HAL_ADC_MspInit+0x7c>)
 8000b2a:	f000 fc8f 	bl	800144c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	@ 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012400 	.word	0x40012400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b54:	d10c      	bne.n	8000b70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5a:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6253      	str	r3, [r2, #36]	@ 0x24
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b6e:	e022      	b.n	8000bb6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a13      	ldr	r2, [pc, #76]	@ (8000bc4 <HAL_TIM_Base_MspInit+0x80>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d10c      	bne.n	8000b94 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7e:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6253      	str	r3, [r2, #36]	@ 0x24
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
}
 8000b92:	e010      	b.n	8000bb6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba2:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	6253      	str	r3, [r2, #36]	@ 0x24
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
}
 8000bb6:	bf00      	nop
 8000bb8:	371c      	adds	r7, #28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40000400 	.word	0x40000400
 8000bc8:	40000800 	.word	0x40000800

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f880 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c30:	f7ff fff8 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c36:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a09      	ldr	r2, [pc, #36]	@ (8000c70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c4c:	4c09      	ldr	r4, [pc, #36]	@ (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f001 fdbd 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5e:	f7ff fcbb 	bl	80005d8 <main>
  bx lr
 8000c62:	4770      	bx	lr
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c6c:	08002864 	.word	0x08002864
  ldr r2, =_sbss
 8000c70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c74:	20000144 	.word	0x20000144

08000c78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_IRQHandler>

08000c7a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 fbad 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f80e 	bl	8000cac <HAL_InitTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	e001      	b.n	8000ca0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c9c:	f7ff fee2 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_InitTick+0x68>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d022      	beq.n	8000d06 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <HAL_InitTick+0x6c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_InitTick+0x68>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fbac 	bl	8001432 <HAL_SYSTICK_Config>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10f      	bne.n	8000d00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d809      	bhi.n	8000cfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cee:	f000 fb84 	bl	80013fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_InitTick+0x70>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e007      	b.n	8000d0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e004      	b.n	8000d0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e001      	b.n	8000d0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <HAL_IncTick+0x20>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <HAL_IncTick+0x1c>)
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000140 	.word	0x20000140
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	@ (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	20000140 	.word	0x20000140

08000d58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	@ 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e127      	b.n	8000fc8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d115      	bne.n	8000db2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d94:	4b8e      	ldr	r3, [pc, #568]	@ (8000fd0 <HAL_ADC_Init+0x278>)
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4a8d      	ldr	r2, [pc, #564]	@ (8000fd0 <HAL_ADC_Init+0x278>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6213      	str	r3, [r2, #32]
 8000da0:	4b8b      	ldr	r3, [pc, #556]	@ (8000fd0 <HAL_ADC_Init+0x278>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fe89 	bl	8000ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f040 80ff 	bne.w	8000fbe <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dc8:	f023 0302 	bic.w	r3, r3, #2
 8000dcc:	f043 0202 	orr.w	r2, r3, #2
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000dd4:	4b7f      	ldr	r3, [pc, #508]	@ (8000fd4 <HAL_ADC_Init+0x27c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	497c      	ldr	r1, [pc, #496]	@ (8000fd4 <HAL_ADC_Init+0x27c>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000dee:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000df6:	4619      	mov	r1, r3
 8000df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dfc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fab3 f383 	clz	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000e12:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	fab3 f383 	clz	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000e3a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e46:	2b10      	cmp	r3, #16
 8000e48:	d007      	beq.n	8000e5a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e52:	4313      	orrs	r3, r2
 8000e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e56:	4313      	orrs	r3, r2
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e64:	2b40      	cmp	r3, #64	@ 0x40
 8000e66:	d04f      	beq.n	8000f08 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e7a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6912      	ldr	r2, [r2, #16]
 8000e80:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8000e84:	d003      	beq.n	8000e8e <HAL_ADC_Init+0x136>
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6912      	ldr	r2, [r2, #16]
 8000e8a:	2a01      	cmp	r2, #1
 8000e8c:	d102      	bne.n	8000e94 <HAL_ADC_Init+0x13c>
 8000e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e92:	e000      	b.n	8000e96 <HAL_ADC_Init+0x13e>
 8000e94:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e96:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d125      	bne.n	8000ef4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d114      	bne.n	8000edc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8000ebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	fa92 f2a2 	rbit	r2, r2
 8000ec4:	617a      	str	r2, [r7, #20]
  return result;
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	fab2 f282 	clz	r2, r2
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000eda:	e00b      	b.n	8000ef4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	f043 0220 	orr.w	r2, r3, #32
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <HAL_ADC_Init+0x280>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000f04:	430b      	orrs	r3, r1
 8000f06:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	4b33      	ldr	r3, [pc, #204]	@ (8000fdc <HAL_ADC_Init+0x284>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f24:	d003      	beq.n	8000f2e <HAL_ADC_Init+0x1d6>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d119      	bne.n	8000f62 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8000f42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	fa92 f2a2 	rbit	r2, r2
 8000f4a:	60fa      	str	r2, [r7, #12]
  return result;
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	fab2 f282 	clz	r2, r2
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	fa03 f202 	lsl.w	r2, r3, r2
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f60:	e007      	b.n	8000f72 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8000f70:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_ADC_Init+0x288>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10b      	bne.n	8000f9a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8c:	f023 0303 	bic.w	r3, r3, #3
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f98:	e014      	b.n	8000fc4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9e:	f023 0312 	bic.w	r3, r3, #18
 8000fa2:	f043 0210 	orr.w	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fae:	f043 0201 	orr.w	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000fbc:	e002      	b.n	8000fc4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3738      	adds	r7, #56	@ 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40012700 	.word	0x40012700
 8000fd8:	fcfc16ff 	.word	0xfcfc16ff
 8000fdc:	c0fff18d 	.word	0xc0fff18d
 8000fe0:	bf80fffe 	.word	0xbf80fffe

08000fe4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x20>
 8001000:	2302      	movs	r3, #2
 8001002:	e134      	b.n	800126e <HAL_ADC_ConfigChannel+0x28a>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b06      	cmp	r3, #6
 8001012:	d81c      	bhi.n	800104e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	3b05      	subs	r3, #5
 8001026:	221f      	movs	r2, #31
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	4019      	ands	r1, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	3b05      	subs	r3, #5
 8001040:	fa00 f203 	lsl.w	r2, r0, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	641a      	str	r2, [r3, #64]	@ 0x40
 800104c:	e07e      	b.n	800114c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d81c      	bhi.n	8001090 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	3b23      	subs	r3, #35	@ 0x23
 8001068:	221f      	movs	r2, #31
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	4019      	ands	r1, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	3b23      	subs	r3, #35	@ 0x23
 8001082:	fa00 f203 	lsl.w	r2, r0, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800108e:	e05d      	b.n	800114c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b12      	cmp	r3, #18
 8001096:	d81c      	bhi.n	80010d2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b41      	subs	r3, #65	@ 0x41
 80010aa:	221f      	movs	r2, #31
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4019      	ands	r1, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b41      	subs	r3, #65	@ 0x41
 80010c4:	fa00 f203 	lsl.w	r2, r0, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80010d0:	e03c      	b.n	800114c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b18      	cmp	r3, #24
 80010d8:	d81c      	bhi.n	8001114 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b5f      	subs	r3, #95	@ 0x5f
 80010ec:	221f      	movs	r2, #31
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	4019      	ands	r1, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	3b5f      	subs	r3, #95	@ 0x5f
 8001106:	fa00 f203 	lsl.w	r2, r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	635a      	str	r2, [r3, #52]	@ 0x34
 8001112:	e01b      	b.n	800114c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b7d      	subs	r3, #125	@ 0x7d
 8001126:	221f      	movs	r2, #31
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4019      	ands	r1, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b7d      	subs	r3, #125	@ 0x7d
 8001140:	fa00 f203 	lsl.w	r2, r0, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b09      	cmp	r3, #9
 8001152:	d81a      	bhi.n	800118a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6959      	ldr	r1, [r3, #20]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	2207      	movs	r2, #7
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	4019      	ands	r1, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	6898      	ldr	r0, [r3, #8]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	fa00 f203 	lsl.w	r2, r0, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	e042      	b.n	8001210 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b13      	cmp	r3, #19
 8001190:	d81c      	bhi.n	80011cc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6919      	ldr	r1, [r3, #16]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	3b1e      	subs	r3, #30
 80011a4:	2207      	movs	r2, #7
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	4019      	ands	r1, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6898      	ldr	r0, [r3, #8]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	3b1e      	subs	r3, #30
 80011be:	fa00 f203 	lsl.w	r2, r0, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	e021      	b.n	8001210 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b1a      	cmp	r3, #26
 80011d2:	d81c      	bhi.n	800120e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68d9      	ldr	r1, [r3, #12]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	3b3c      	subs	r3, #60	@ 0x3c
 80011e6:	2207      	movs	r2, #7
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6898      	ldr	r0, [r3, #8]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	3b3c      	subs	r3, #60	@ 0x3c
 8001200:	fa00 f203 	lsl.w	r2, r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	e000      	b.n	8001210 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800120e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b10      	cmp	r3, #16
 8001216:	d003      	beq.n	8001220 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800121c:	2b11      	cmp	r3, #17
 800121e:	d121      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_ADC_ConfigChannel+0x294>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d11b      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_ADC_ConfigChannel+0x294>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a11      	ldr	r2, [pc, #68]	@ (8001278 <HAL_ADC_ConfigChannel+0x294>)
 8001232:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001236:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b10      	cmp	r3, #16
 800123e:	d111      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_ADC_ConfigChannel+0x298>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <HAL_ADC_ConfigChannel+0x29c>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9a      	lsrs	r2, r3, #18
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001256:	e002      	b.n	800125e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3b01      	subs	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f9      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40012700 	.word	0x40012700
 800127c:	20000000 	.word	0x20000000
 8001280:	431bde83 	.word	0x431bde83

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	@ (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	@ (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013c4:	f7ff ff90 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff49 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff5e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff90 	bl	800133c <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5f 	bl	80012e8 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffb0 	bl	80013a0 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001462:	e154      	b.n	800170e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8146 	beq.w	8001708 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d005      	beq.n	8001494 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001490:	2b02      	cmp	r3, #2
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 0201 	and.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d017      	beq.n	8001532 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d123      	bne.n	8001586 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0203 	and.w	r2, r3, #3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a0 	beq.w	8001708 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c8:	4b58      	ldr	r3, [pc, #352]	@ (800172c <HAL_GPIO_Init+0x2e0>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a57      	ldr	r2, [pc, #348]	@ (800172c <HAL_GPIO_Init+0x2e0>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	4b55      	ldr	r3, [pc, #340]	@ (800172c <HAL_GPIO_Init+0x2e0>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80015e0:	4a53      	ldr	r2, [pc, #332]	@ (8001730 <HAL_GPIO_Init+0x2e4>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <HAL_GPIO_Init+0x2e8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d019      	beq.n	8001640 <HAL_GPIO_Init+0x1f4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a4a      	ldr	r2, [pc, #296]	@ (8001738 <HAL_GPIO_Init+0x2ec>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1f0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a49      	ldr	r2, [pc, #292]	@ (800173c <HAL_GPIO_Init+0x2f0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1ec>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a48      	ldr	r2, [pc, #288]	@ (8001740 <HAL_GPIO_Init+0x2f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e8>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a47      	ldr	r2, [pc, #284]	@ (8001744 <HAL_GPIO_Init+0x2f8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1e4>
 800162c:	2304      	movs	r3, #4
 800162e:	e008      	b.n	8001642 <HAL_GPIO_Init+0x1f6>
 8001630:	2305      	movs	r3, #5
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1f6>
 8001634:	2303      	movs	r3, #3
 8001636:	e004      	b.n	8001642 <HAL_GPIO_Init+0x1f6>
 8001638:	2302      	movs	r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x1f6>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_GPIO_Init+0x1f6>
 8001640:	2300      	movs	r3, #0
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4093      	lsls	r3, r2
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001652:	4937      	ldr	r1, [pc, #220]	@ (8001730 <HAL_GPIO_Init+0x2e4>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001660:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001684:	4a30      	ldr	r2, [pc, #192]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800168a:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016ae:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b4:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016de:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001702:	4a11      	ldr	r2, [pc, #68]	@ (8001748 <HAL_GPIO_Init+0x2fc>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f aea3 	bne.w	8001464 <HAL_GPIO_Init+0x18>
  }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40010000 	.word	0x40010000
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e31d      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b94      	ldr	r3, [pc, #592]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001798:	4b91      	ldr	r3, [pc, #580]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d07b      	beq.n	80018a6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d006      	beq.n	80017c2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d10f      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c0:	d10b      	bne.n	80017da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	4b87      	ldr	r3, [pc, #540]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d06a      	beq.n	80018a4 <HAL_RCC_OscConfig+0x128>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d166      	bne.n	80018a4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e2f7      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_OscConfig+0x74>
 80017e2:	4b7f      	ldr	r3, [pc, #508]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7e      	ldr	r2, [pc, #504]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e02d      	b.n	800184c <HAL_RCC_OscConfig+0xd0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x96>
 80017f8:	4b79      	ldr	r3, [pc, #484]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a78      	ldr	r2, [pc, #480]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b76      	ldr	r3, [pc, #472]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a75      	ldr	r2, [pc, #468]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e01c      	b.n	800184c <HAL_RCC_OscConfig+0xd0>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0xb8>
 800181a:	4b71      	ldr	r3, [pc, #452]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a70      	ldr	r2, [pc, #448]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b6e      	ldr	r3, [pc, #440]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6d      	ldr	r2, [pc, #436]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0xd0>
 8001834:	4b6a      	ldr	r3, [pc, #424]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a69      	ldr	r2, [pc, #420]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800183a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b67      	ldr	r3, [pc, #412]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a66      	ldr	r2, [pc, #408]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800184a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fa76 	bl	8000d44 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fa72 	bl	8000d44 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	@ 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e2ad      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186e:	4b5c      	ldr	r3, [pc, #368]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0xe0>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fa62 	bl	8000d44 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fa5e 	bl	8000d44 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e299      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001896:	4b52      	ldr	r3, [pc, #328]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x108>
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d05a      	beq.n	8001968 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d119      	bne.n	80018f2 <HAL_RCC_OscConfig+0x176>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d116      	bne.n	80018f2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c4:	4b46      	ldr	r3, [pc, #280]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_OscConfig+0x160>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e276      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	493d      	ldr	r1, [pc, #244]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f0:	e03a      	b.n	8001968 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d020      	beq.n	800193c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fa:	4b3a      	ldr	r3, [pc, #232]	@ (80019e4 <HAL_RCC_OscConfig+0x268>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fa20 	bl	8000d44 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fa1c 	bl	8000d44 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e257      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191a:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	492a      	ldr	r1, [pc, #168]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
 800193a:	e015      	b.n	8001968 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193c:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <HAL_RCC_OscConfig+0x268>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f9ff 	bl	8000d44 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff f9fb 	bl	8000d44 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e236      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800195c:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80b8 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d170      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x218>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e21a      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d921      	bls.n	80019e8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fc4b 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e208      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4906      	ldr	r1, [pc, #24]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	061b      	lsls	r3, r3, #24
 80019d8:	4901      	ldr	r1, [pc, #4]	@ (80019e0 <HAL_RCC_OscConfig+0x264>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
 80019de:	e020      	b.n	8001a22 <HAL_RCC_OscConfig+0x2a6>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e8:	4b99      	ldr	r3, [pc, #612]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4996      	ldr	r1, [pc, #600]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fa:	4b95      	ldr	r3, [pc, #596]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	4991      	ldr	r1, [pc, #580]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fc16 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1d3      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	0b5b      	lsrs	r3, r3, #13
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a32:	4a87      	ldr	r2, [pc, #540]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a34:	6892      	ldr	r2, [r2, #8]
 8001a36:	0912      	lsrs	r2, r2, #4
 8001a38:	f002 020f 	and.w	r2, r2, #15
 8001a3c:	4985      	ldr	r1, [pc, #532]	@ (8001c54 <HAL_RCC_OscConfig+0x4d8>)
 8001a3e:	5c8a      	ldrb	r2, [r1, r2]
 8001a40:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a42:	4a85      	ldr	r2, [pc, #532]	@ (8001c58 <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a46:	4b85      	ldr	r3, [pc, #532]	@ (8001c5c <HAL_RCC_OscConfig+0x4e0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f92e 	bl	8000cac <HAL_InitTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d045      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	e1b5      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d029      	beq.n	8001aba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a66:	4b7e      	ldr	r3, [pc, #504]	@ (8001c60 <HAL_RCC_OscConfig+0x4e4>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f96a 	bl	8000d44 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a74:	f7ff f966 	bl	8000d44 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1a1      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a86:	4b72      	ldr	r3, [pc, #456]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a92:	4b6f      	ldr	r3, [pc, #444]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	496c      	ldr	r1, [pc, #432]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	4967      	ldr	r1, [pc, #412]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aba:	4b69      	ldr	r3, [pc, #420]	@ (8001c60 <HAL_RCC_OscConfig+0x4e4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f940 	bl	8000d44 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f93c 	bl	8000d44 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e177      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ada:	4b5d      	ldr	r3, [pc, #372]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d030      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b5a      	ldr	r3, [pc, #360]	@ (8001c64 <HAL_RCC_OscConfig+0x4e8>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7ff f920 	bl	8000d44 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f91c 	bl	8000d44 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e157      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x38c>
 8001b26:	e015      	b.n	8001b54 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <HAL_RCC_OscConfig+0x4e8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f909 	bl	8000d44 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff f905 	bl	8000d44 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e140      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b48:	4b41      	ldr	r3, [pc, #260]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80b5 	beq.w	8001ccc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b3a      	ldr	r3, [pc, #232]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b37      	ldr	r3, [pc, #220]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	4a36      	ldr	r2, [pc, #216]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b7e:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <HAL_RCC_OscConfig+0x4ec>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <HAL_RCC_OscConfig+0x4ec>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a32      	ldr	r2, [pc, #200]	@ (8001c68 <HAL_RCC_OscConfig+0x4ec>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f8cd 	bl	8000d44 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff f8c9 	bl	8000d44 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	@ 0x64
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e104      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <HAL_RCC_OscConfig+0x4ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x466>
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bde:	6353      	str	r3, [r2, #52]	@ 0x34
 8001be0:	e02d      	b.n	8001c3e <HAL_RCC_OscConfig+0x4c2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x488>
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bee:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001bf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001bf6:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfa:	4a15      	ldr	r2, [pc, #84]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c00:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c02:	e01c      	b.n	8001c3e <HAL_RCC_OscConfig+0x4c2>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x4aa>
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c10:	4a0f      	ldr	r2, [pc, #60]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c16:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c22:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c24:	e00b      	b.n	8001c3e <HAL_RCC_OscConfig+0x4c2>
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2a:	4a09      	ldr	r2, [pc, #36]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c30:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c36:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001c38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c3c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff f87d 	bl	8000d44 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c4c:	e019      	b.n	8001c82 <HAL_RCC_OscConfig+0x506>
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08002844 	.word	0x08002844
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	42470020 	.word	0x42470020
 8001c64:	42470680 	.word	0x42470680
 8001c68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f86a 	bl	8000d44 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0a3      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c82:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0ee      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4f0>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7ff f858 	bl	8000d44 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7ff f854 	bl	8000d44 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e08d      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cae:	4b49      	ldr	r3, [pc, #292]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ee      	bne.n	8001c98 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b44      	ldr	r3, [pc, #272]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	4a43      	ldr	r2, [pc, #268]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d079      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d056      	beq.n	8001d88 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d13b      	bne.n	8001d5a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <HAL_RCC_OscConfig+0x65c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f82c 	bl	8000d44 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f828 	bl	8000d44 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e063      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d02:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0e:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	4319      	orrs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	430b      	orrs	r3, r1
 8001d26:	492b      	ldr	r1, [pc, #172]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <HAL_RCC_OscConfig+0x65c>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff f807 	bl	8000d44 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff f803 	bl	8000d44 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e03e      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x5be>
 8001d58:	e036      	b.n	8001dc8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_RCC_OscConfig+0x65c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7fe fff0 	bl	8000d44 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ffec 	bl	8000d44 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e027      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5ec>
 8001d86:	e01f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e01a      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <HAL_RCC_OscConfig+0x658>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	42470060 	.word	0x42470060

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e11a      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b8f      	ldr	r3, [pc, #572]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d919      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x34>
 8001e04:	4b8a      	ldr	r3, [pc, #552]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a89      	ldr	r2, [pc, #548]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b87      	ldr	r3, [pc, #540]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0201 	bic.w	r2, r3, #1
 8001e18:	4985      	ldr	r1, [pc, #532]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e20:	4b83      	ldr	r3, [pc, #524]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0f9      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	497a      	ldr	r1, [pc, #488]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 808e 	beq.w	8001f7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e66:	4b73      	ldr	r3, [pc, #460]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d121      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0d7      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d115      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e0cb      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e96:	4b67      	ldr	r3, [pc, #412]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0bf      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0b7      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f023 0203 	bic.w	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	495c      	ldr	r1, [pc, #368]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec8:	f7fe ff3c 	bl	8000d44 <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7fe ff34 	bl	8000d44 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e09b      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eee:	4b51      	ldr	r3, [pc, #324]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d1ee      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xfc>
 8001efa:	e03e      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d112      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f06:	f7fe ff1d 	bl	8000d44 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e084      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1c:	4b45      	ldr	r3, [pc, #276]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
 8001f28:	e027      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d11d      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7fe ff06 	bl	8000d44 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e06d      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d1ee      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x158>
 8001f56:	e010      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fef4 	bl	8000d44 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e05b      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f6e:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ee      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d219      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_ClockConfig+0x1be>
 8001f8e:	4b28      	ldr	r3, [pc, #160]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a27      	ldr	r2, [pc, #156]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0201 	bic.w	r2, r3, #1
 8001fa2:	4923      	ldr	r1, [pc, #140]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <HAL_RCC_ClockConfig+0x254>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e034      	b.n	8002026 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4917      	ldr	r1, [pc, #92]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	490f      	ldr	r1, [pc, #60]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffa:	f000 f823 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <HAL_RCC_ClockConfig+0x258>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	490b      	ldr	r1, [pc, #44]	@ (8002038 <HAL_RCC_ClockConfig+0x25c>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_RCC_ClockConfig+0x260>)
 8002014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_RCC_ClockConfig+0x264>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fe46 	bl	8000cac <HAL_InitTick>
 8002020:	4603      	mov	r3, r0
 8002022:	72fb      	strb	r3, [r7, #11]

  return status;
 8002024:	7afb      	ldrb	r3, [r7, #11]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00
 8002034:	40023800 	.word	0x40023800
 8002038:	08002844 	.word	0x08002844
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002048:	b092      	sub	sp, #72	@ 0x48
 800204a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800204c:	4b79      	ldr	r3, [pc, #484]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d00d      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x34>
 800205c:	2b0c      	cmp	r3, #12
 800205e:	f200 80d5 	bhi.w	800220c <HAL_RCC_GetSysClockFreq+0x1c8>
 8002062:	2b04      	cmp	r3, #4
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x28>
 8002066:	2b08      	cmp	r3, #8
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x2e>
 800206a:	e0cf      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b72      	ldr	r3, [pc, #456]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800206e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002070:	e0da      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002072:	4b72      	ldr	r3, [pc, #456]	@ (800223c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002074:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002076:	e0d7      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002088:	0d9b      	lsrs	r3, r3, #22
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d05d      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800209e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a0:	2200      	movs	r2, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	4611      	mov	r1, r2
 80020a6:	4604      	mov	r4, r0
 80020a8:	460d      	mov	r5, r1
 80020aa:	4622      	mov	r2, r4
 80020ac:	462b      	mov	r3, r5
 80020ae:	f04f 0000 	mov.w	r0, #0
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	0159      	lsls	r1, r3, #5
 80020b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020bc:	0150      	lsls	r0, r2, #5
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4621      	mov	r1, r4
 80020c4:	1a51      	subs	r1, r2, r1
 80020c6:	6139      	str	r1, [r7, #16]
 80020c8:	4629      	mov	r1, r5
 80020ca:	eb63 0301 	sbc.w	r3, r3, r1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020dc:	4659      	mov	r1, fp
 80020de:	018b      	lsls	r3, r1, #6
 80020e0:	4651      	mov	r1, sl
 80020e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020e6:	4651      	mov	r1, sl
 80020e8:	018a      	lsls	r2, r1, #6
 80020ea:	46d4      	mov	ip, sl
 80020ec:	ebb2 080c 	subs.w	r8, r2, ip
 80020f0:	4659      	mov	r1, fp
 80020f2:	eb63 0901 	sbc.w	r9, r3, r1
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210a:	4690      	mov	r8, r2
 800210c:	4699      	mov	r9, r3
 800210e:	4623      	mov	r3, r4
 8002110:	eb18 0303 	adds.w	r3, r8, r3
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	462b      	mov	r3, r5
 8002118:	eb49 0303 	adc.w	r3, r9, r3
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800212a:	4629      	mov	r1, r5
 800212c:	024b      	lsls	r3, r1, #9
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	4604      	mov	r4, r0
 8002134:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002138:	4601      	mov	r1, r0
 800213a:	024a      	lsls	r2, r1, #9
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002142:	2200      	movs	r2, #0
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800214c:	f7fe f816 	bl	800017c <__aeabi_uldivmod>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4613      	mov	r3, r2
 8002156:	647b      	str	r3, [r7, #68]	@ 0x44
 8002158:	e055      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800215a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215c:	2200      	movs	r2, #0
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	627a      	str	r2, [r7, #36]	@ 0x24
 8002162:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002166:	4642      	mov	r2, r8
 8002168:	464b      	mov	r3, r9
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	46c4      	mov	ip, r8
 8002180:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002184:	4640      	mov	r0, r8
 8002186:	4649      	mov	r1, r9
 8002188:	468c      	mov	ip, r1
 800218a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800219a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800219e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021a2:	ebb2 040a 	subs.w	r4, r2, sl
 80021a6:	eb63 050b 	sbc.w	r5, r3, fp
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	00eb      	lsls	r3, r5, #3
 80021b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b8:	00e2      	lsls	r2, r4, #3
 80021ba:	4614      	mov	r4, r2
 80021bc:	461d      	mov	r5, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	18e3      	adds	r3, r4, r3
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	460b      	mov	r3, r1
 80021c6:	eb45 0303 	adc.w	r3, r5, r3
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021d8:	4629      	mov	r1, r5
 80021da:	028b      	lsls	r3, r1, #10
 80021dc:	4620      	mov	r0, r4
 80021de:	4629      	mov	r1, r5
 80021e0:	4604      	mov	r4, r0
 80021e2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80021e6:	4601      	mov	r1, r0
 80021e8:	028a      	lsls	r2, r1, #10
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f0:	2200      	movs	r2, #0
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	61fa      	str	r2, [r7, #28]
 80021f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021fa:	f7fd ffbf 	bl	800017c <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4613      	mov	r3, r2
 8002204:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8002206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002208:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800220a:	e00d      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800220c:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0b5b      	lsrs	r3, r3, #13
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	3301      	adds	r3, #1
 800221c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800222a:	4618      	mov	r0, r3
 800222c:	3748      	adds	r7, #72	@ 0x48
 800222e:	46bd      	mov	sp, r7
 8002230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200
 8002240:	08002838 	.word	0x08002838

08002244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002250:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d12c      	bne.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800225c:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002268:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e016      	b.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	4a1f      	ldr	r2, [pc, #124]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800227e:	6253      	str	r3, [r2, #36]	@ 0x24
 8002280:	4b1d      	ldr	r3, [pc, #116]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002294:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4b18      	ldr	r3, [pc, #96]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800229c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a0:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80022a8:	d105      	bne.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80022b0:	d101      	bne.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80022b2:	2301      	movs	r3, #1
 80022b4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80022bc:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 0201 	bic.w	r2, r3, #1
 80022d0:	490b      	ldr	r1, [pc, #44]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022d8:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000
 8002300:	40023c00 	.word	0x40023c00

08002304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e031      	b.n	800237a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fc0a 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f000 f8e4 	bl	8002510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_TIM_ConfigClockSource+0x1c>
 800239a:	2302      	movs	r3, #2
 800239c:	e0b4      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x186>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023d6:	d03e      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0xd4>
 80023d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023dc:	f200 8087 	bhi.w	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e4:	f000 8086 	beq.w	80024f4 <HAL_TIM_ConfigClockSource+0x172>
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ec:	d87f      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 80023ee:	2b70      	cmp	r3, #112	@ 0x70
 80023f0:	d01a      	beq.n	8002428 <HAL_TIM_ConfigClockSource+0xa6>
 80023f2:	2b70      	cmp	r3, #112	@ 0x70
 80023f4:	d87b      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 80023f6:	2b60      	cmp	r3, #96	@ 0x60
 80023f8:	d050      	beq.n	800249c <HAL_TIM_ConfigClockSource+0x11a>
 80023fa:	2b60      	cmp	r3, #96	@ 0x60
 80023fc:	d877      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 80023fe:	2b50      	cmp	r3, #80	@ 0x50
 8002400:	d03c      	beq.n	800247c <HAL_TIM_ConfigClockSource+0xfa>
 8002402:	2b50      	cmp	r3, #80	@ 0x50
 8002404:	d873      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 8002406:	2b40      	cmp	r3, #64	@ 0x40
 8002408:	d058      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0x13a>
 800240a:	2b40      	cmp	r3, #64	@ 0x40
 800240c:	d86f      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 800240e:	2b30      	cmp	r3, #48	@ 0x30
 8002410:	d064      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0x15a>
 8002412:	2b30      	cmp	r3, #48	@ 0x30
 8002414:	d86b      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 8002416:	2b20      	cmp	r3, #32
 8002418:	d060      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0x15a>
 800241a:	2b20      	cmp	r3, #32
 800241c:	d867      	bhi.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d05c      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0x15a>
 8002422:	2b10      	cmp	r3, #16
 8002424:	d05a      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0x15a>
 8002426:	e062      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	f000 f949 	bl	80026ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800244a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]
      break;
 8002454:	e04f      	b.n	80024f6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002466:	f000 f932 	bl	80026ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002478:	609a      	str	r2, [r3, #8]
      break;
 800247a:	e03c      	b.n	80024f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002488:	461a      	mov	r2, r3
 800248a:	f000 f8a9 	bl	80025e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2150      	movs	r1, #80	@ 0x50
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f900 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 800249a:	e02c      	b.n	80024f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024a8:	461a      	mov	r2, r3
 80024aa:	f000 f8c7 	bl	800263c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2160      	movs	r1, #96	@ 0x60
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f8f0 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 80024ba:	e01c      	b.n	80024f6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c8:	461a      	mov	r2, r3
 80024ca:	f000 f889 	bl	80025e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2140      	movs	r1, #64	@ 0x40
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f8e0 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 80024da:	e00c      	b.n	80024f6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f000 f8d7 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 80024ec:	e003      	b.n	80024f6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      break;
 80024f2:	e000      	b.n	80024f6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002526:	d007      	beq.n	8002538 <TIM_Base_SetConfig+0x28>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <TIM_Base_SetConfig+0xbc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0x28>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a27      	ldr	r2, [pc, #156]	@ (80025d0 <TIM_Base_SetConfig+0xc0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d108      	bne.n	800254a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800253e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002550:	d013      	beq.n	800257a <TIM_Base_SetConfig+0x6a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <TIM_Base_SetConfig+0xbc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00f      	beq.n	800257a <TIM_Base_SetConfig+0x6a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <TIM_Base_SetConfig+0xc0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00b      	beq.n	800257a <TIM_Base_SetConfig+0x6a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1b      	ldr	r2, [pc, #108]	@ (80025d4 <TIM_Base_SetConfig+0xc4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <TIM_Base_SetConfig+0x6a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1a      	ldr	r2, [pc, #104]	@ (80025d8 <TIM_Base_SetConfig+0xc8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d003      	beq.n	800257a <TIM_Base_SetConfig+0x6a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a19      	ldr	r2, [pc, #100]	@ (80025dc <TIM_Base_SetConfig+0xcc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d108      	bne.n	800258c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	40011000 	.word	0x40011000

080025e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f023 0201 	bic.w	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800260a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f023 030a 	bic.w	r3, r3, #10
 800261c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f023 0210 	bic.w	r2, r3, #16
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	031b      	lsls	r3, r3, #12
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002678:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	621a      	str	r2, [r3, #32]
}
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f043 0307 	orr.w	r3, r3, #7
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b087      	sub	sp, #28
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	021a      	lsls	r2, r3, #8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002720:	2302      	movs	r3, #2
 8002722:	e046      	b.n	80027b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800274a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002766:	d00e      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800278c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4313      	orrs	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40010800 	.word	0x40010800

080027c8 <memset>:
 80027c8:	4603      	mov	r3, r0
 80027ca:	4402      	add	r2, r0
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d100      	bne.n	80027d2 <memset+0xa>
 80027d0:	4770      	bx	lr
 80027d2:	f803 1b01 	strb.w	r1, [r3], #1
 80027d6:	e7f9      	b.n	80027cc <memset+0x4>

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	2600      	movs	r6, #0
 80027dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002810 <__libc_init_array+0x38>)
 80027de:	4c0d      	ldr	r4, [pc, #52]	@ (8002814 <__libc_init_array+0x3c>)
 80027e0:	1b64      	subs	r4, r4, r5
 80027e2:	10a4      	asrs	r4, r4, #2
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	f000 f81a 	bl	8002820 <_init>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002818 <__libc_init_array+0x40>)
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <__libc_init_array+0x44>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	0800285c 	.word	0x0800285c
 8002814:	0800285c 	.word	0x0800285c
 8002818:	0800285c 	.word	0x0800285c
 800281c:	08002860 	.word	0x08002860

08002820 <_init>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr

0800282c <_fini>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr
