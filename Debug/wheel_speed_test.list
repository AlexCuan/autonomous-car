
wheel_speed_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003748  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003888  08003888  00004888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a4  080038a4  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  080038a4  080038a4  000048a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038ac  080038ac  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ac  080038ac  000048ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038b0  080038b0  000048b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080038b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  080038c4  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080038c4  00005168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000852b  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a7  00000000  00000000  0000d564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0000ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000781  00000000  00000000  0000f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bd4  00000000  00000000  0000fe69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009826  00000000  00000000  00023a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007effd  00000000  00000000  0002d263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000298c  00000000  00000000  000ac2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000aec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08003870 	.word	0x08003870

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08003870 	.word	0x08003870

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	@ 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__aeabi_d2uiz>:
 800074c:	004a      	lsls	r2, r1, #1
 800074e:	d211      	bcs.n	8000774 <__aeabi_d2uiz+0x28>
 8000750:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000754:	d211      	bcs.n	800077a <__aeabi_d2uiz+0x2e>
 8000756:	d50d      	bpl.n	8000774 <__aeabi_d2uiz+0x28>
 8000758:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800075c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000760:	d40e      	bmi.n	8000780 <__aeabi_d2uiz+0x34>
 8000762:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000766:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800076a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800076e:	fa23 f002 	lsr.w	r0, r3, r2
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800077e:	d102      	bne.n	8000786 <__aeabi_d2uiz+0x3a>
 8000780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000784:	4770      	bx	lr
 8000786:	f04f 0000 	mov.w	r0, #0
 800078a:	4770      	bx	lr

0800078c <__aeabi_uldivmod>:
 800078c:	b953      	cbnz	r3, 80007a4 <__aeabi_uldivmod+0x18>
 800078e:	b94a      	cbnz	r2, 80007a4 <__aeabi_uldivmod+0x18>
 8000790:	2900      	cmp	r1, #0
 8000792:	bf08      	it	eq
 8000794:	2800      	cmpeq	r0, #0
 8000796:	bf1c      	itt	ne
 8000798:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800079c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007a0:	f000 b968 	b.w	8000a74 <__aeabi_idiv0>
 80007a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80007a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007ac:	f000 f806 	bl	80007bc <__udivmoddi4>
 80007b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr

080007bc <__udivmoddi4>:
 80007bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007c0:	9d08      	ldr	r5, [sp, #32]
 80007c2:	460c      	mov	r4, r1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d14e      	bne.n	8000866 <__udivmoddi4+0xaa>
 80007c8:	4694      	mov	ip, r2
 80007ca:	458c      	cmp	ip, r1
 80007cc:	4686      	mov	lr, r0
 80007ce:	fab2 f282 	clz	r2, r2
 80007d2:	d962      	bls.n	800089a <__udivmoddi4+0xde>
 80007d4:	b14a      	cbz	r2, 80007ea <__udivmoddi4+0x2e>
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	4091      	lsls	r1, r2
 80007dc:	fa20 f303 	lsr.w	r3, r0, r3
 80007e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e4:	4319      	orrs	r1, r3
 80007e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80007ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	fb07 1114 	mls	r1, r7, r4, r1
 80007f6:	fa1f f68c 	uxth.w	r6, ip
 80007fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000802:	fb04 f106 	mul.w	r1, r4, r6
 8000806:	4299      	cmp	r1, r3
 8000808:	d90a      	bls.n	8000820 <__udivmoddi4+0x64>
 800080a:	eb1c 0303 	adds.w	r3, ip, r3
 800080e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000812:	f080 8110 	bcs.w	8000a36 <__udivmoddi4+0x27a>
 8000816:	4299      	cmp	r1, r3
 8000818:	f240 810d 	bls.w	8000a36 <__udivmoddi4+0x27a>
 800081c:	3c02      	subs	r4, #2
 800081e:	4463      	add	r3, ip
 8000820:	1a59      	subs	r1, r3, r1
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	fb00 f606 	mul.w	r6, r0, r6
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000836:	429e      	cmp	r6, r3
 8000838:	d90a      	bls.n	8000850 <__udivmoddi4+0x94>
 800083a:	eb1c 0303 	adds.w	r3, ip, r3
 800083e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000842:	f080 80fa 	bcs.w	8000a3a <__udivmoddi4+0x27e>
 8000846:	429e      	cmp	r6, r3
 8000848:	f240 80f7 	bls.w	8000a3a <__udivmoddi4+0x27e>
 800084c:	4463      	add	r3, ip
 800084e:	3802      	subs	r0, #2
 8000850:	2100      	movs	r1, #0
 8000852:	1b9b      	subs	r3, r3, r6
 8000854:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000858:	b11d      	cbz	r5, 8000862 <__udivmoddi4+0xa6>
 800085a:	40d3      	lsrs	r3, r2
 800085c:	2200      	movs	r2, #0
 800085e:	e9c5 3200 	strd	r3, r2, [r5]
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	428b      	cmp	r3, r1
 8000868:	d905      	bls.n	8000876 <__udivmoddi4+0xba>
 800086a:	b10d      	cbz	r5, 8000870 <__udivmoddi4+0xb4>
 800086c:	e9c5 0100 	strd	r0, r1, [r5]
 8000870:	2100      	movs	r1, #0
 8000872:	4608      	mov	r0, r1
 8000874:	e7f5      	b.n	8000862 <__udivmoddi4+0xa6>
 8000876:	fab3 f183 	clz	r1, r3
 800087a:	2900      	cmp	r1, #0
 800087c:	d146      	bne.n	800090c <__udivmoddi4+0x150>
 800087e:	42a3      	cmp	r3, r4
 8000880:	d302      	bcc.n	8000888 <__udivmoddi4+0xcc>
 8000882:	4290      	cmp	r0, r2
 8000884:	f0c0 80ee 	bcc.w	8000a64 <__udivmoddi4+0x2a8>
 8000888:	1a86      	subs	r6, r0, r2
 800088a:	eb64 0303 	sbc.w	r3, r4, r3
 800088e:	2001      	movs	r0, #1
 8000890:	2d00      	cmp	r5, #0
 8000892:	d0e6      	beq.n	8000862 <__udivmoddi4+0xa6>
 8000894:	e9c5 6300 	strd	r6, r3, [r5]
 8000898:	e7e3      	b.n	8000862 <__udivmoddi4+0xa6>
 800089a:	2a00      	cmp	r2, #0
 800089c:	f040 808f 	bne.w	80009be <__udivmoddi4+0x202>
 80008a0:	eba1 040c 	sub.w	r4, r1, ip
 80008a4:	2101      	movs	r1, #1
 80008a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008aa:	fa1f f78c 	uxth.w	r7, ip
 80008ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	fb07 f006 	mul.w	r0, r7, r6
 80008ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008c2:	4298      	cmp	r0, r3
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x11c>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ce:	d202      	bcs.n	80008d6 <__udivmoddi4+0x11a>
 80008d0:	4298      	cmp	r0, r3
 80008d2:	f200 80cb 	bhi.w	8000a6c <__udivmoddi4+0x2b0>
 80008d6:	4626      	mov	r6, r4
 80008d8:	1a1c      	subs	r4, r3, r0
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	fb00 f707 	mul.w	r7, r0, r7
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ee:	429f      	cmp	r7, r3
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x148>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x146>
 80008fc:	429f      	cmp	r7, r3
 80008fe:	f200 80ae 	bhi.w	8000a5e <__udivmoddi4+0x2a2>
 8000902:	4620      	mov	r0, r4
 8000904:	1bdb      	subs	r3, r3, r7
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	e7a5      	b.n	8000858 <__udivmoddi4+0x9c>
 800090c:	f1c1 0720 	rsb	r7, r1, #32
 8000910:	408b      	lsls	r3, r1
 8000912:	fa22 fc07 	lsr.w	ip, r2, r7
 8000916:	ea4c 0c03 	orr.w	ip, ip, r3
 800091a:	fa24 f607 	lsr.w	r6, r4, r7
 800091e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000922:	fbb6 f8f9 	udiv	r8, r6, r9
 8000926:	fa1f fe8c 	uxth.w	lr, ip
 800092a:	fb09 6618 	mls	r6, r9, r8, r6
 800092e:	fa20 f307 	lsr.w	r3, r0, r7
 8000932:	408c      	lsls	r4, r1
 8000934:	fa00 fa01 	lsl.w	sl, r0, r1
 8000938:	fb08 f00e 	mul.w	r0, r8, lr
 800093c:	431c      	orrs	r4, r3
 800093e:	0c23      	lsrs	r3, r4, #16
 8000940:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000944:	4298      	cmp	r0, r3
 8000946:	fa02 f201 	lsl.w	r2, r2, r1
 800094a:	d90a      	bls.n	8000962 <__udivmoddi4+0x1a6>
 800094c:	eb1c 0303 	adds.w	r3, ip, r3
 8000950:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000954:	f080 8081 	bcs.w	8000a5a <__udivmoddi4+0x29e>
 8000958:	4298      	cmp	r0, r3
 800095a:	d97e      	bls.n	8000a5a <__udivmoddi4+0x29e>
 800095c:	f1a8 0802 	sub.w	r8, r8, #2
 8000960:	4463      	add	r3, ip
 8000962:	1a1e      	subs	r6, r3, r0
 8000964:	fbb6 f3f9 	udiv	r3, r6, r9
 8000968:	fb09 6613 	mls	r6, r9, r3, r6
 800096c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000970:	b2a4      	uxth	r4, r4
 8000972:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000976:	45a6      	cmp	lr, r4
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x1d0>
 800097a:	eb1c 0404 	adds.w	r4, ip, r4
 800097e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000982:	d266      	bcs.n	8000a52 <__udivmoddi4+0x296>
 8000984:	45a6      	cmp	lr, r4
 8000986:	d964      	bls.n	8000a52 <__udivmoddi4+0x296>
 8000988:	3b02      	subs	r3, #2
 800098a:	4464      	add	r4, ip
 800098c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000990:	fba0 8302 	umull	r8, r3, r0, r2
 8000994:	eba4 040e 	sub.w	r4, r4, lr
 8000998:	429c      	cmp	r4, r3
 800099a:	46c6      	mov	lr, r8
 800099c:	461e      	mov	r6, r3
 800099e:	d350      	bcc.n	8000a42 <__udivmoddi4+0x286>
 80009a0:	d04d      	beq.n	8000a3e <__udivmoddi4+0x282>
 80009a2:	b155      	cbz	r5, 80009ba <__udivmoddi4+0x1fe>
 80009a4:	ebba 030e 	subs.w	r3, sl, lr
 80009a8:	eb64 0406 	sbc.w	r4, r4, r6
 80009ac:	fa04 f707 	lsl.w	r7, r4, r7
 80009b0:	40cb      	lsrs	r3, r1
 80009b2:	431f      	orrs	r7, r3
 80009b4:	40cc      	lsrs	r4, r1
 80009b6:	e9c5 7400 	strd	r7, r4, [r5]
 80009ba:	2100      	movs	r1, #0
 80009bc:	e751      	b.n	8000862 <__udivmoddi4+0xa6>
 80009be:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d9      	lsrs	r1, r3
 80009c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009cc:	fa20 f303 	lsr.w	r3, r0, r3
 80009d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80009d8:	fb08 1110 	mls	r1, r8, r0, r1
 80009dc:	4094      	lsls	r4, r2
 80009de:	431c      	orrs	r4, r3
 80009e0:	fa1f f78c 	uxth.w	r7, ip
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x248>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29a>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29a>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0a:	fb08 3311 	mls	r3, r8, r1, r3
 8000a0e:	b2a4      	uxth	r4, r4
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x272>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x292>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x292>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e73b      	b.n	80008ae <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f2      	b.n	8000820 <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e708      	b.n	8000850 <__udivmoddi4+0x94>
 8000a3e:	45c2      	cmp	sl, r8
 8000a40:	d2af      	bcs.n	80009a2 <__udivmoddi4+0x1e6>
 8000a42:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a46:	eb63 060c 	sbc.w	r6, r3, ip
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a9      	b.n	80009a2 <__udivmoddi4+0x1e6>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x272>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e79a      	b.n	800098c <__udivmoddi4+0x1d0>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x248>
 8000a5a:	46b0      	mov	r8, r6
 8000a5c:	e781      	b.n	8000962 <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74f      	b.n	8000904 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e711      	b.n	8000890 <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e732      	b.n	80008d8 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <SET_SPEED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SET_SPEED(unsigned short dc_left, unsigned short dc_right) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	if (MOVEMENT_DIRECTION != STOPPED) {
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <SET_SPEED+0x44>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d00f      	beq.n	8000ab0 <SET_SPEED+0x38>
		DC_RIGHT = dc_right;
 8000a90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac0 <SET_SPEED+0x48>)
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	8013      	strh	r3, [r2, #0]
		DC_LEFT = dc_left;
 8000a96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <SET_SPEED+0x4c>)
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	8013      	strh	r3, [r2, #0]
		TIM2->CCR3 = DC_LEFT;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <SET_SPEED+0x4c>)
 8000a9e:	881a      	ldrh	r2, [r3, #0]
 8000aa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = DC_RIGHT;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <SET_SPEED+0x48>)
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aae:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000002 	.word	0x20000002
 8000ac0:	2000014a 	.word	0x2000014a
 8000ac4:	2000014c 	.word	0x2000014c

08000ac8 <TURN_BACKWARDS>:

void TURN_BACKWARDS(unsigned short dc_left, unsigned short dc_right) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	80fb      	strh	r3, [r7, #6]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80bb      	strh	r3, [r7, #4]
	MOVEMENT_DIRECTION = BACKWARDS;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <TURN_BACKWARDS+0x88>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]

	LOCAL_MAX_DC = 0;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <TURN_BACKWARDS+0x8c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	801a      	strh	r2, [r3, #0]
	FIRST_HALVED = MAX_DC / 2;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <TURN_BACKWARDS+0x90>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <TURN_BACKWARDS+0x94>)
 8000aee:	801a      	strh	r2, [r3, #0]
	SECOND_HALVED = (MAX_DC * 3) / 4;
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <TURN_BACKWARDS+0x90>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	da00      	bge.n	8000b02 <TURN_BACKWARDS+0x3a>
 8000b00:	3303      	adds	r3, #3
 8000b02:	109b      	asrs	r3, r3, #2
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <TURN_BACKWARDS+0x98>)
 8000b08:	801a      	strh	r2, [r3, #0]
	THIRD_HALVED = (MAX_DC * 7) / 8;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <TURN_BACKWARDS+0x90>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4613      	mov	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da00      	bge.n	8000b1c <TURN_BACKWARDS+0x54>
 8000b1a:	3307      	adds	r3, #7
 8000b1c:	10db      	asrs	r3, r3, #3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <TURN_BACKWARDS+0x9c>)
 8000b22:	801a      	strh	r2, [r3, #0]
	STOPPED_STATE = MAX_DC;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <TURN_BACKWARDS+0x90>)
 8000b26:	881a      	ldrh	r2, [r3, #0]
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <TURN_BACKWARDS+0xa0>)
 8000b2a:	801a      	strh	r2, [r3, #0]

	GPIOB->BSRR = (1 << 13);
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <TURN_BACKWARDS+0xa4>)
 8000b2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b32:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1 << 12);
 8000b34:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <TURN_BACKWARDS+0xa4>)
 8000b36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b3a:	619a      	str	r2, [r3, #24]
	SET_SPEED(dc_left, dc_right);
 8000b3c:	88ba      	ldrh	r2, [r7, #4]
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff98 	bl	8000a78 <SET_SPEED>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000002 	.word	0x20000002
 8000b54:	20000140 	.word	0x20000140
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000142 	.word	0x20000142
 8000b60:	20000144 	.word	0x20000144
 8000b64:	20000146 	.word	0x20000146
 8000b68:	20000148 	.word	0x20000148
 8000b6c:	40020400 	.word	0x40020400

08000b70 <STOP>:

void STOP(bool change_state) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	if (MOVEMENT_DIRECTION == FORWARD) {
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <STOP+0x48>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d104      	bne.n	8000b8c <STOP+0x1c>
		SET_SPEED(0, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff77 	bl	8000a78 <SET_SPEED>
 8000b8a:	e00b      	b.n	8000ba4 <STOP+0x34>
	} else if (MOVEMENT_DIRECTION == BACKWARDS) {
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <STOP+0x48>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d107      	bne.n	8000ba4 <STOP+0x34>
		SET_SPEED(MAX_DC, MAX_DC);
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <STOP+0x4c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <STOP+0x4c>)
 8000b9a:	8812      	ldrh	r2, [r2, #0]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff6a 	bl	8000a78 <SET_SPEED>
	}
	if (change_state) {
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <STOP+0x40>
		MOVEMENT_DIRECTION = STOPPED;
 8000baa:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <STOP+0x48>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	701a      	strb	r2, [r3, #0]
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000002 	.word	0x20000002
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <TURN_FORWARD>:

void TURN_FORWARD(unsigned short dc_left, unsigned short dc_right) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	MOVEMENT_DIRECTION = FORWARD;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <TURN_FORWARD+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]

	LOCAL_MAX_DC = MAX_DC;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <TURN_FORWARD+0x70>)
 8000bd8:	881a      	ldrh	r2, [r3, #0]
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <TURN_FORWARD+0x74>)
 8000bdc:	801a      	strh	r2, [r3, #0]
	FIRST_HALVED = MAX_DC / 2;
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <TURN_FORWARD+0x70>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	085b      	lsrs	r3, r3, #1
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <TURN_FORWARD+0x78>)
 8000be8:	801a      	strh	r2, [r3, #0]
	SECOND_HALVED = MAX_DC / 4;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <TURN_FORWARD+0x70>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <TURN_FORWARD+0x7c>)
 8000bf4:	801a      	strh	r2, [r3, #0]
	THIRD_HALVED = MAX_DC / 8;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <TURN_FORWARD+0x70>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	08db      	lsrs	r3, r3, #3
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <TURN_FORWARD+0x80>)
 8000c00:	801a      	strh	r2, [r3, #0]
	STOPPED_STATE = 0;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <TURN_FORWARD+0x84>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	801a      	strh	r2, [r3, #0]

	GPIOB->BSRR = (1 << 13) << 16;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <TURN_FORWARD+0x88>)
 8000c0a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c0e:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (1 << 12) << 16;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <TURN_FORWARD+0x88>)
 8000c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c16:	619a      	str	r2, [r3, #24]
	SET_SPEED(dc_left, dc_right);
 8000c18:	88ba      	ldrh	r2, [r7, #4]
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff2a 	bl	8000a78 <SET_SPEED>

}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000002 	.word	0x20000002
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000140 	.word	0x20000140
 8000c38:	20000142 	.word	0x20000142
 8000c3c:	20000144 	.word	0x20000144
 8000c40:	20000146 	.word	0x20000146
 8000c44:	20000148 	.word	0x20000148
 8000c48:	40020400 	.word	0x40020400

08000c4c <TURN_DIRECTION>:

void TURN_DIRECTION() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	if (MOVEMENT_DIRECTION == FORWARD) {
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <TURN_DIRECTION+0x44>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d104      	bne.n	8000c62 <TURN_DIRECTION+0x16>
		TURN_BACKWARDS(0, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ff34 	bl	8000ac8 <TURN_BACKWARDS>
		STOP(true);

	} else if (MOVEMENT_DIRECTION == STOPPED) {
		TURN_FORWARD(MAX_DC, MAX_DC);
	}
}
 8000c60:	e013      	b.n	8000c8a <TURN_DIRECTION+0x3e>
	} else if (MOVEMENT_DIRECTION == BACKWARDS) {
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <TURN_DIRECTION+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d103      	bne.n	8000c72 <TURN_DIRECTION+0x26>
		STOP(true);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ff80 	bl	8000b70 <STOP>
}
 8000c70:	e00b      	b.n	8000c8a <TURN_DIRECTION+0x3e>
	} else if (MOVEMENT_DIRECTION == STOPPED) {
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <TURN_DIRECTION+0x44>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d107      	bne.n	8000c8a <TURN_DIRECTION+0x3e>
		TURN_FORWARD(MAX_DC, MAX_DC);
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <TURN_DIRECTION+0x48>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <TURN_DIRECTION+0x48>)
 8000c80:	8812      	ldrh	r2, [r2, #0]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff9b 	bl	8000bc0 <TURN_FORWARD>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000002 	.word	0x20000002
 8000c94:	20000000 	.word	0x20000000

08000c98 <SETUP_WHEELS>:
void SETUP_WHEELS() {
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

	GPIOB->MODER |= (1 << (11 * 2 + 1));
 8000c9c:	4b25      	ldr	r3, [pc, #148]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a24      	ldr	r2, [pc, #144]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000ca2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ca6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 11 * 2);
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a21      	ldr	r2, [pc, #132]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cae:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000cb2:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] &= ~(0xF << 12);
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000cbe:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1 << 12);
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cca:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->MODER |= (1 << (10 * 2 + 1));  // Poner bit 21 en 1
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << (10 * 2));    // Poner bit 20 en 0
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cde:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000ce2:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] &= ~(0xF << 8);
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce8:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000cee:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1 << 8);
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->MODER &= ~(1 << (13 * 2 + 1));
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0c      	ldr	r2, [pc, #48]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000d02:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000d06:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << 13 * 2);
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a09      	ldr	r2, [pc, #36]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000d0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d12:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1 << (12 * 2 + 1));
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a06      	ldr	r2, [pc, #24]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000d1a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000d1e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1 << 12 * 2);
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a03      	ldr	r2, [pc, #12]	@ (8000d34 <SETUP_WHEELS+0x9c>)
 8000d26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d2a:	6013      	str	r3, [r2, #0]

}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40020400 	.word	0x40020400

08000d38 <TURN_90_RIGHT>:
void TURN_90_RIGHT(bool backwards) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]

	STOP(true);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff ff14 	bl	8000b70 <STOP>
	COUNT = 0;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <TURN_90_RIGHT+0x8c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	801a      	strh	r2, [r3, #0]
	while (COUNT != 5) {
 8000d4e:	bf00      	nop
 8000d50:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <TURN_90_RIGHT+0x8c>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	2b05      	cmp	r3, #5
 8000d56:	d1fb      	bne.n	8000d50 <TURN_90_RIGHT+0x18>
	}

	if (backwards) {
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d006      	beq.n	8000d6c <TURN_90_RIGHT+0x34>
		TURN_BACKWARDS(0, MAX_DC);
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <TURN_90_RIGHT+0x90>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff feaf 	bl	8000ac8 <TURN_BACKWARDS>
 8000d6a:	e005      	b.n	8000d78 <TURN_90_RIGHT+0x40>
	} else {
		TURN_FORWARD(MAX_DC, 0);
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <TURN_90_RIGHT+0x90>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff24 	bl	8000bc0 <TURN_FORWARD>
	}

	COUNT = 0;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <TURN_90_RIGHT+0x8c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	801a      	strh	r2, [r3, #0]
	while (COUNT != 10) {
 8000d7e:	bf00      	nop
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <TURN_90_RIGHT+0x8c>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b0a      	cmp	r3, #10
 8000d86:	d1fb      	bne.n	8000d80 <TURN_90_RIGHT+0x48>
	}

	STOP(true);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fef1 	bl	8000b70 <STOP>
	COUNT = 0;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <TURN_90_RIGHT+0x8c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	801a      	strh	r2, [r3, #0]
	while (COUNT != 5) {
 8000d94:	bf00      	nop
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <TURN_90_RIGHT+0x8c>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2b05      	cmp	r3, #5
 8000d9c:	d1fb      	bne.n	8000d96 <TURN_90_RIGHT+0x5e>
	}

//	TODO: When it ends keep moving in the same direction
	TURN_FORWARD(MAX_DC, MAX_DC);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <TURN_90_RIGHT+0x90>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <TURN_90_RIGHT+0x90>)
 8000da4:	8812      	ldrh	r2, [r2, #0]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff09 	bl	8000bc0 <TURN_FORWARD>
	TIM4->DIER = 0x0008;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <TURN_90_RIGHT+0x94>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	60da      	str	r2, [r3, #12]
	COUNT = 0;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <TURN_90_RIGHT+0x8c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	801a      	strh	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000015a 	.word	0x2000015a
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	40000800 	.word	0x40000800

08000dd0 <TURN_90_LEFT>:

void TURN_90_LEFT(bool backwards) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	STOP(true);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fec8 	bl	8000b70 <STOP>
	COUNT = 0;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e5c <TURN_90_LEFT+0x8c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	801a      	strh	r2, [r3, #0]
	while (COUNT != 5) {
 8000de6:	bf00      	nop
 8000de8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e5c <TURN_90_LEFT+0x8c>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	2b05      	cmp	r3, #5
 8000dee:	d1fb      	bne.n	8000de8 <TURN_90_LEFT+0x18>
	}
	if (backwards) {
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <TURN_90_LEFT+0x34>
		TURN_BACKWARDS(MAX_DC, 0);
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <TURN_90_LEFT+0x90>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe63 	bl	8000ac8 <TURN_BACKWARDS>
 8000e02:	e005      	b.n	8000e10 <TURN_90_LEFT+0x40>
	} else {
		TURN_FORWARD(0, MAX_DC);
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <TURN_90_LEFT+0x90>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fed8 	bl	8000bc0 <TURN_FORWARD>
	}
	COUNT = 0;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <TURN_90_LEFT+0x8c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	801a      	strh	r2, [r3, #0]
	while (COUNT != 10) {
 8000e16:	bf00      	nop
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <TURN_90_LEFT+0x8c>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	2b0a      	cmp	r3, #10
 8000e1e:	d1fb      	bne.n	8000e18 <TURN_90_LEFT+0x48>
	}
	STOP(true);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff fea5 	bl	8000b70 <STOP>
	COUNT = 0;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <TURN_90_LEFT+0x8c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
	while (COUNT != 5) {
 8000e2c:	bf00      	nop
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <TURN_90_LEFT+0x8c>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d1fb      	bne.n	8000e2e <TURN_90_LEFT+0x5e>
	}

	//	TODO: When it ends keep moving in the same direction

	TURN_FORWARD(MAX_DC, MAX_DC);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <TURN_90_LEFT+0x90>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <TURN_90_LEFT+0x90>)
 8000e3c:	8812      	ldrh	r2, [r2, #0]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff febd 	bl	8000bc0 <TURN_FORWARD>
	TIM4->DIER = 0x0008;
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <TURN_90_LEFT+0x94>)
 8000e48:	2208      	movs	r2, #8
 8000e4a:	60da      	str	r2, [r3, #12]
	COUNT = 0;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <TURN_90_LEFT+0x8c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000015a 	.word	0x2000015a
 8000e60:	20000000 	.word	0x20000000
 8000e64:	40000800 	.word	0x40000800

08000e68 <SETUP_PWM>:
void SETUP_PWM() {
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

	TIM2->CR1 = 0x0080; // ARPE = 1 -> Is PWM; CEN = 0; Counter OFF
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	601a      	str	r2, [r3, #0]
	TIM2->CR2 = 0x0000; // Always 0 in this course
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
	TIM2->SMCR = 0x0000; // Always 0 in this course
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
	TIM2->PSC = 32000; // Pre-scaler=32000 -> f_counter=32000000/32000 = 1000 steps/second
 8000e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e88:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->CNT = 0; // Initialize counter to 0
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->ARR = 99;   // 100 niveles (0-99) -> 100 Hz PWM con 1% de resolución
 8000e96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e9a:	2263      	movs	r2, #99	@ 0x63
 8000e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
//	TIM2->CCR3 = MAX_DC;  // 50% duty cycle
//	TIM2->CCR4 = MAX_DC;
	TIM2->DIER = 0x0000; // No IRQ when counting is finished -> CCyIE = 0
 8000e9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
	// Output mode
	TIM2->CCMR2 = 0x6868; // CCyS = 0 (TOC, PWM)
 8000ea6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eaa:	f646 0268 	movw	r2, #26728	@ 0x6868
 8000eae:	61da      	str	r2, [r3, #28]
	// OCyM = 110 (PWM starting in 1)
	// OCyPE = 1 (with preload)
	TIM2->CCER = 0x1100; // CCyP = 0 (always in PWM)
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb4:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8000eb8:	621a      	str	r2, [r3, #32]
	// CCyE = 1 (hardware output activated)
	// Counter enabling
	TIM2->EGR |= 0x0001; // UG = 1 -> Generate update event
 8000eba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6153      	str	r3, [r2, #20]
	TIM2->CR1 |= 0x0001; // CEN = 1 -> Start counter
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]
	TIM2->SR = 0; // Counter flags cleared
 8000eda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <CYCLE_TURN_POSITION>:

void CYCLE_TURN_POSITION() {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
    switch (TURN_POSITION) {
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <CYCLE_TURN_POSITION+0x5c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d821      	bhi.n	8000f3c <CYCLE_TURN_POSITION+0x50>
 8000ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <CYCLE_TURN_POSITION+0x14>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f15 	.word	0x08000f15
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f25 	.word	0x08000f25
 8000f0c:	08000f2d 	.word	0x08000f2d
 8000f10:	08000f35 	.word	0x08000f35
        case CLEAR:
            TURN_POSITION = FIRST_OBSTACLE_BACKWARDS;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <CYCLE_TURN_POSITION+0x5c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
            break;
 8000f1a:	e010      	b.n	8000f3e <CYCLE_TURN_POSITION+0x52>
        case FIRST_OBSTACLE_BACKWARDS:
            TURN_POSITION = FIRST_OBSTACLE_FORWARD;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <CYCLE_TURN_POSITION+0x5c>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	701a      	strb	r2, [r3, #0]
            break;
 8000f22:	e00c      	b.n	8000f3e <CYCLE_TURN_POSITION+0x52>
        case FIRST_OBSTACLE_FORWARD:
            TURN_POSITION = SECOND_OBSTACLE_BACKWARDS;
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <CYCLE_TURN_POSITION+0x5c>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	701a      	strb	r2, [r3, #0]
            break;
 8000f2a:	e008      	b.n	8000f3e <CYCLE_TURN_POSITION+0x52>
        case SECOND_OBSTACLE_BACKWARDS:
            TURN_POSITION = SECOND_OBSTACLE_FORWARD;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <CYCLE_TURN_POSITION+0x5c>)
 8000f2e:	2204      	movs	r2, #4
 8000f30:	701a      	strb	r2, [r3, #0]
            break;
 8000f32:	e004      	b.n	8000f3e <CYCLE_TURN_POSITION+0x52>
        case SECOND_OBSTACLE_FORWARD:
            TURN_POSITION = DOOMED;
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <CYCLE_TURN_POSITION+0x5c>)
 8000f36:	2205      	movs	r2, #5
 8000f38:	701a      	strb	r2, [r3, #0]
            break;
 8000f3a:	e000      	b.n	8000f3e <CYCLE_TURN_POSITION+0x52>
        default:
            break;
 8000f3c:	bf00      	nop
    }
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000160 	.word	0x20000160

08000f4c <BUZZ>:
//		 GPIOB -> BSRR = (1<<8)<<16;
//		 	 estado = false;
//	 }
//}

void BUZZ() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	if (CRITICAL_CLOSE) {
 8000f50:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <BUZZ+0xa0>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <BUZZ+0x14>
//			 TOGGLE_3V();
		TIM4->CCMR2 = 0x0050;
 8000f58:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <BUZZ+0xa4>)
 8000f5a:	2250      	movs	r2, #80	@ 0x50
 8000f5c:	61da      	str	r2, [r3, #28]
 8000f5e:	e03a      	b.n	8000fd6 <BUZZ+0x8a>
//		stop(false);
//		TIM4->DIER = 0x0002;

	} else if (CLOSE) {
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <BUZZ+0xa8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <BUZZ+0x34>
//			  GPIOB -> BSRR = (1<<8);
		TIM4->CCMR2 = 0x0030;
 8000f68:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <BUZZ+0xa4>)
 8000f6a:	2230      	movs	r2, #48	@ 0x30
 8000f6c:	61da      	str	r2, [r3, #28]
		SET_SPEED(THIRD_HALVED, THIRD_HALVED);
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <BUZZ+0xac>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	4a21      	ldr	r2, [pc, #132]	@ (8000ff8 <BUZZ+0xac>)
 8000f74:	8812      	ldrh	r2, [r2, #0]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd7d 	bl	8000a78 <SET_SPEED>
 8000f7e:	e02a      	b.n	8000fd6 <BUZZ+0x8a>

	}

	else if (MEDIUM) {
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <BUZZ+0xb0>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <BUZZ+0x54>
		//			  GPIOB -> BSRR = (1<<8);
		TIM4->CCMR2 = 0x0030;
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <BUZZ+0xa4>)
 8000f8a:	2230      	movs	r2, #48	@ 0x30
 8000f8c:	61da      	str	r2, [r3, #28]
		SET_SPEED(SECOND_HALVED, SECOND_HALVED);
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <BUZZ+0xb4>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <BUZZ+0xb4>)
 8000f94:	8812      	ldrh	r2, [r2, #0]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fd6d 	bl	8000a78 <SET_SPEED>
 8000f9e:	e01a      	b.n	8000fd6 <BUZZ+0x8a>

	}

	else if (RELATIVELY_FAR) {
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <BUZZ+0xb8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <BUZZ+0x74>
		//			  GPIOB -> BSRR = (1<<8);
		TIM4->CCMR2 = 0x0040;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <BUZZ+0xa4>)
 8000faa:	2240      	movs	r2, #64	@ 0x40
 8000fac:	61da      	str	r2, [r3, #28]

		SET_SPEED(FIRST_HALVED, FIRST_HALVED);
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <BUZZ+0xbc>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	4a15      	ldr	r2, [pc, #84]	@ (8001008 <BUZZ+0xbc>)
 8000fb4:	8812      	ldrh	r2, [r2, #0]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd5d 	bl	8000a78 <SET_SPEED>
 8000fbe:	e00a      	b.n	8000fd6 <BUZZ+0x8a>

	}

	else {
//			  GPIOB -> BSRR = (1<<8)<<16;
		TIM4->CCMR2 = 0x0040;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <BUZZ+0xa4>)
 8000fc2:	2240      	movs	r2, #64	@ 0x40
 8000fc4:	61da      	str	r2, [r3, #28]
		SET_SPEED(LOCAL_MAX_DC, LOCAL_MAX_DC);
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <BUZZ+0xc0>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <BUZZ+0xc0>)
 8000fcc:	8812      	ldrh	r2, [r2, #0]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fd51 	bl	8000a78 <SET_SPEED>

	}
	TIM2->EGR |= 0x0001; // Generate update event
 8000fd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6153      	str	r3, [r2, #20]
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000015c 	.word	0x2000015c
 8000ff0:	40000800 	.word	0x40000800
 8000ff4:	2000015d 	.word	0x2000015d
 8000ff8:	20000146 	.word	0x20000146
 8000ffc:	2000015e 	.word	0x2000015e
 8001000:	20000144 	.word	0x20000144
 8001004:	2000015f 	.word	0x2000015f
 8001008:	20000142 	.word	0x20000142
 800100c:	20000140 	.word	0x20000140

08001010 <MEASSURE>:

void MEASSURE() {
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

	if (((DISTANCE_U1 / 2) <= 5 && DISTANCE_U1 != 0)
 8001014:	4b4b      	ldr	r3, [pc, #300]	@ (8001144 <MEASSURE+0x134>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b0b      	cmp	r3, #11
 800101a:	d803      	bhi.n	8001024 <MEASSURE+0x14>
 800101c:	4b49      	ldr	r3, [pc, #292]	@ (8001144 <MEASSURE+0x134>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d107      	bne.n	8001034 <MEASSURE+0x24>
			|| ((DISTANCE_U2 / 2) <= 5 && DISTANCE_U2 != 0)) {
 8001024:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MEASSURE+0x138>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	2b0b      	cmp	r3, #11
 800102a:	d817      	bhi.n	800105c <MEASSURE+0x4c>
 800102c:	4b46      	ldr	r3, [pc, #280]	@ (8001148 <MEASSURE+0x138>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <MEASSURE+0x4c>
		if (TURN_POSITION == CLEAR) {
 8001034:	4b45      	ldr	r3, [pc, #276]	@ (800114c <MEASSURE+0x13c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <MEASSURE+0x32>
			TURN_POSITION = FIRST_OBSTACLE_BACKWARDS;
 800103c:	4b43      	ldr	r3, [pc, #268]	@ (800114c <MEASSURE+0x13c>)
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
		}
		CRITICAL_CLOSE = true;
 8001042:	4b43      	ldr	r3, [pc, #268]	@ (8001150 <MEASSURE+0x140>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 8001048:	4b42      	ldr	r3, [pc, #264]	@ (8001154 <MEASSURE+0x144>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 800104e:	4b42      	ldr	r3, [pc, #264]	@ (8001158 <MEASSURE+0x148>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 8001054:	4b41      	ldr	r3, [pc, #260]	@ (800115c <MEASSURE+0x14c>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e06f      	b.n	800113c <MEASSURE+0x12c>
	} else if (((DISTANCE_U2 / 2) > 5 && (DISTANCE_U2 / 2) <= 10)
 800105c:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <MEASSURE+0x138>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	d903      	bls.n	800106c <MEASSURE+0x5c>
 8001064:	4b38      	ldr	r3, [pc, #224]	@ (8001148 <MEASSURE+0x138>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b15      	cmp	r3, #21
 800106a:	d907      	bls.n	800107c <MEASSURE+0x6c>
			|| ((DISTANCE_U1 / 2) > 5 && (DISTANCE_U1 / 2) <= 10)) {
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <MEASSURE+0x134>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	2b0b      	cmp	r3, #11
 8001072:	d913      	bls.n	800109c <MEASSURE+0x8c>
 8001074:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <MEASSURE+0x134>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	2b15      	cmp	r3, #21
 800107a:	d80f      	bhi.n	800109c <MEASSURE+0x8c>
		TURN_POSITION = CLEAR;
 800107c:	4b33      	ldr	r3, [pc, #204]	@ (800114c <MEASSURE+0x13c>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 8001082:	4b33      	ldr	r3, [pc, #204]	@ (8001150 <MEASSURE+0x140>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
		CLOSE = true;
 8001088:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <MEASSURE+0x144>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 800108e:	4b32      	ldr	r3, [pc, #200]	@ (8001158 <MEASSURE+0x148>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 8001094:	4b31      	ldr	r3, [pc, #196]	@ (800115c <MEASSURE+0x14c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e04f      	b.n	800113c <MEASSURE+0x12c>
	} else if (((DISTANCE_U2 / 2) > 10 && (DISTANCE_U2 / 2) <= 20)
 800109c:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <MEASSURE+0x138>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	2b15      	cmp	r3, #21
 80010a2:	d903      	bls.n	80010ac <MEASSURE+0x9c>
 80010a4:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <MEASSURE+0x138>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	2b29      	cmp	r3, #41	@ 0x29
 80010aa:	d907      	bls.n	80010bc <MEASSURE+0xac>
			|| ((DISTANCE_U1 / 2) > 10 && (DISTANCE_U1 / 2) <= 20)) {
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <MEASSURE+0x134>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	2b15      	cmp	r3, #21
 80010b2:	d913      	bls.n	80010dc <MEASSURE+0xcc>
 80010b4:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <MEASSURE+0x134>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b29      	cmp	r3, #41	@ 0x29
 80010ba:	d80f      	bhi.n	80010dc <MEASSURE+0xcc>
		TURN_POSITION = CLEAR;
 80010bc:	4b23      	ldr	r3, [pc, #140]	@ (800114c <MEASSURE+0x13c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 80010c2:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <MEASSURE+0x140>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 80010c8:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <MEASSURE+0x144>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
		MEDIUM = true;
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <MEASSURE+0x148>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MEASSURE+0x14c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e02f      	b.n	800113c <MEASSURE+0x12c>
	} else if (((DISTANCE_U2 / 2) > 20 && (DISTANCE_U2 / 2) <= 30)
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MEASSURE+0x138>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	2b29      	cmp	r3, #41	@ 0x29
 80010e2:	d903      	bls.n	80010ec <MEASSURE+0xdc>
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MEASSURE+0x138>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2b3d      	cmp	r3, #61	@ 0x3d
 80010ea:	d907      	bls.n	80010fc <MEASSURE+0xec>
			|| ((DISTANCE_U1 / 2) > 20 && (DISTANCE_U1 / 2) <= 30)) {
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MEASSURE+0x134>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	2b29      	cmp	r3, #41	@ 0x29
 80010f2:	d913      	bls.n	800111c <MEASSURE+0x10c>
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <MEASSURE+0x134>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	2b3d      	cmp	r3, #61	@ 0x3d
 80010fa:	d80f      	bhi.n	800111c <MEASSURE+0x10c>
		TURN_POSITION = CLEAR;
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MEASSURE+0x13c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MEASSURE+0x140>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MEASSURE+0x144>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MEASSURE+0x148>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = true;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MEASSURE+0x14c>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e00f      	b.n	800113c <MEASSURE+0x12c>
	} else {
		TURN_POSITION = CLEAR;
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MEASSURE+0x13c>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
		CRITICAL_CLOSE = false;
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <MEASSURE+0x140>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
		CLOSE = false;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MEASSURE+0x144>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
		MEDIUM = false;
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <MEASSURE+0x148>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
		RELATIVELY_FAR = false;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MEASSURE+0x14c>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	}
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000152 	.word	0x20000152
 8001148:	20000158 	.word	0x20000158
 800114c:	20000160 	.word	0x20000160
 8001150:	2000015c 	.word	0x2000015c
 8001154:	2000015d 	.word	0x2000015d
 8001158:	2000015e 	.word	0x2000015e
 800115c:	2000015f 	.word	0x2000015f

08001160 <START_COUNTER_3>:

void START_COUNTER_3() {
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
// Enabling the counter
// Clear all flags

	TIM3->SR = 0;
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <START_COUNTER_3+0x38>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
	TIM3->EGR |= (1 << 0);		// UG = 1 -> Update event
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <START_COUNTER_3+0x38>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <START_COUNTER_3+0x38>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= 0x0001;		// CEN = 1 -> Starting CNT
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <START_COUNTER_3+0x38>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <START_COUNTER_3+0x38>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6013      	str	r3, [r2, #0]

// Enabling IRQ source for TIM3 in NVIC (position 29)
	NVIC->ISER[0] |= (1 << 29);
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <START_COUNTER_3+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <START_COUNTER_3+0x3c>)
 8001188:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800118c:	6013      	str	r3, [r2, #0]

}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40000400 	.word	0x40000400
 800119c:	e000e100 	.word	0xe000e100

080011a0 <START_COUNTER_2>:

void START_COUNTER_2() {
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
// Enabling the counter
	TIM4->SR = 0;
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <START_COUNTER_2+0x2c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
//	TIM2->EGR |= (1<<0);		// UG = 1 -> Update event
	TIM4->CR1 |= 0x0001;		// CEN = 1 -> Starting CNT
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <START_COUNTER_2+0x2c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <START_COUNTER_2+0x2c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6013      	str	r3, [r2, #0]

// Enabling IRQ source for TIM3 in NVIC (position 29)
	NVIC->ISER[0] |= (1 << 30);
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <START_COUNTER_2+0x30>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <START_COUNTER_2+0x30>)
 80011bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80011c0:	6013      	str	r3, [r2, #0]

}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40000800 	.word	0x40000800
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	00000000 	.word	0x00000000

080011d8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

//	Channel 2
	if ((TIM3->SR & (1 << 2)) != 0) {
 80011dc:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d02e      	beq.n	8001246 <TIM3_IRQHandler+0x6e>
		// If rising edge
		if ((GPIOC->IDR & 0x80) != 0) {
 80011e8:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <TIM3_IRQHandler+0x114>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <TIM3_IRQHandler+0x28>
			RELATIVE_INIT_U1 = TIM3->CCR2;
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 80011f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <TIM3_IRQHandler+0x118>)
 80011fc:	801a      	strh	r2, [r3, #0]
 80011fe:	e01c      	b.n	800123a <TIM3_IRQHandler+0x62>
		} else {
			PULSE_TIME_U1 = TIM3->CCR2 - RELATIVE_INIT_U1;
 8001200:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 8001202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <TIM3_IRQHandler+0x118>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <TIM3_IRQHandler+0x11c>)
 8001210:	801a      	strh	r2, [r3, #0]
			DISTANCE_U1 = 0.034 * PULSE_TIME_U1;
 8001212:	4b38      	ldr	r3, [pc, #224]	@ (80012f4 <TIM3_IRQHandler+0x11c>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fa2e 	bl	8000678 <__aeabi_i2d>
 800121c:	a330      	add	r3, pc, #192	@ (adr r3, 80012e0 <TIM3_IRQHandler+0x108>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7fe ffad 	bl	8000180 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fa8d 	bl	800074c <__aeabi_d2uiz>
 8001232:	4603      	mov	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <TIM3_IRQHandler+0x120>)
 8001238:	801a      	strh	r2, [r3, #0]
		}

		TIM3->SR &= ~(0x0004);
 800123a:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	4a2a      	ldr	r2, [pc, #168]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6113      	str	r3, [r2, #16]
	}

// CHANNEL 4
	if ((TIM3->SR & (1 << 4)) != 0) {
 8001246:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2b00      	cmp	r3, #0
 8001250:	d02e      	beq.n	80012b0 <TIM3_IRQHandler+0xd8>
		// If rising edge
		if ((GPIOC->IDR & 0x200) != 0) {
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <TIM3_IRQHandler+0x114>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <TIM3_IRQHandler+0x92>
			RELATIVE_INIT_U2 = TIM3->CCR4;
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <TIM3_IRQHandler+0x124>)
 8001266:	801a      	strh	r2, [r3, #0]
 8001268:	e01c      	b.n	80012a4 <TIM3_IRQHandler+0xcc>
		} else {
			PULSE_TIME_U2 = TIM3->CCR4 - RELATIVE_INIT_U2;
 800126a:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <TIM3_IRQHandler+0x124>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <TIM3_IRQHandler+0x128>)
 800127a:	801a      	strh	r2, [r3, #0]
			DISTANCE_U2 = 0.034 * PULSE_TIME_U2;
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <TIM3_IRQHandler+0x128>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f9f9 	bl	8000678 <__aeabi_i2d>
 8001286:	a316      	add	r3, pc, #88	@ (adr r3, 80012e0 <TIM3_IRQHandler+0x108>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7fe ff78 	bl	8000180 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fa58 	bl	800074c <__aeabi_d2uiz>
 800129c:	4603      	mov	r3, r0
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <TIM3_IRQHandler+0x12c>)
 80012a2:	801a      	strh	r2, [r3, #0]
		}
		TIM3->SR &= ~(0x0010);
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 80012aa:	f023 0310 	bic.w	r3, r3, #16
 80012ae:	6113      	str	r3, [r2, #16]
	}

//  Channel 1
	if ((TIM3->SR & (1 << 1)) != 0) {
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00d      	beq.n	80012d8 <TIM3_IRQHandler+0x100>
		GPIOC->BSRR = (1 << 6) << 16;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <TIM3_IRQHandler+0x114>)
 80012be:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012c2:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1 << 8) << 16;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <TIM3_IRQHandler+0x114>)
 80012c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012ca:	619a      	str	r2, [r3, #24]

		TIM3->SR &= ~(0x0002);
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <TIM3_IRQHandler+0x110>)
 80012d2:	f023 0302 	bic.w	r3, r3, #2
 80012d6:	6113      	str	r3, [r2, #16]
	}
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	b020c49c 	.word	0xb020c49c
 80012e4:	3fa16872 	.word	0x3fa16872
 80012e8:	40000400 	.word	0x40000400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	2000014e 	.word	0x2000014e
 80012f4:	20000150 	.word	0x20000150
 80012f8:	20000152 	.word	0x20000152
 80012fc:	20000154 	.word	0x20000154
 8001300:	20000156 	.word	0x20000156
 8001304:	20000158 	.word	0x20000158

08001308 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

	if ((TIM4->SR & (1 << 4)) != 0) {
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <TIM4_IRQHandler+0x5c>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	d010      	beq.n	800133a <TIM4_IRQHandler+0x32>
		BUZZ();
 8001318:	f7ff fe18 	bl	8000f4c <BUZZ>

		GPIOC->BSRR = (1 << 6);
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <TIM4_IRQHandler+0x60>)
 800131e:	2240      	movs	r2, #64	@ 0x40
 8001320:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1 << 8);
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <TIM4_IRQHandler+0x60>)
 8001324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001328:	619a      	str	r2, [r3, #24]

		START_COUNTER_3();
 800132a:	f7ff ff19 	bl	8001160 <START_COUNTER_3>
		TIM4->SR &= ~(0x0008);
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <TIM4_IRQHandler+0x5c>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <TIM4_IRQHandler+0x5c>)
 8001334:	f023 0308 	bic.w	r3, r3, #8
 8001338:	6113      	str	r3, [r2, #16]
	}

	if ((TIM4->SR & (1 << 2)) != 0) {
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <TIM4_IRQHandler+0x5c>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <TIM4_IRQHandler+0x56>
		COUNT++;
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <TIM4_IRQHandler+0x64>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <TIM4_IRQHandler+0x64>)
 8001350:	801a      	strh	r2, [r3, #0]
		TIM4->SR &= ~(0x0002);
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <TIM4_IRQHandler+0x5c>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4a03      	ldr	r2, [pc, #12]	@ (8001364 <TIM4_IRQHandler+0x5c>)
 8001358:	f023 0302 	bic.w	r3, r3, #2
 800135c:	6113      	str	r3, [r2, #16]
	}

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40000800 	.word	0x40000800
 8001368:	40020800 	.word	0x40020800
 800136c:	2000015a 	.word	0x2000015a

08001370 <INIT_TIM3>:

void INIT_TIM3() {
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
// Internal clock selection: CR1, CR2, SMRC
	TIM3->CR1 = 0x0000; // ARPE = 0 -> Not periodic
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <INIT_TIM3+0x60>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
						// CEN = 0; Counter off
//------------------------------------------
// DO NOT TOUCH
	TIM3->CR2 = 0x0000; // Always 0x0000 in this subject
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <INIT_TIM3+0x60>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
	TIM3->SMCR = 0x0000; // Always 0x0000 in this subject
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <INIT_TIM3+0x60>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
	TIM3->ARR = 0xFFFF;   // Recommended value = FFFF
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <INIT_TIM3+0x60>)
 8001388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c

//-------------------------------------------
// Setting up the counter functionality: PSC, CNT, ARR y CCRx
	TIM3->PSC = 31; // Preescaler=32 -> F_counter=32000000/32 = 1000000 steps/second
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <INIT_TIM3+0x60>)
 8001390:	221f      	movs	r2, #31
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->CNT = 0;	   // Initial value for CNT
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <INIT_TIM3+0x60>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CCR1 = 11;	//11 steps = 11us
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <INIT_TIM3+0x60>)
 800139c:	220b      	movs	r2, #11
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR3 = 0xFFFF;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <INIT_TIM3+0x60>)
 80013a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a6:	63da      	str	r2, [r3, #60]	@ 0x3c
// IRQ or no-IRQ selection: DIER
// Usar el DIER para desenmascarar los canales
// IRQ for channels 4,3,1
	TIM3->DIER = 0x0016;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <INIT_TIM3+0x60>)
 80013aa:	2216      	movs	r2, #22
 80013ac:	60da      	str	r2, [r3, #12]

// Counter output mode
	TIM3->CCMR1 = 0x0100;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <INIT_TIM3+0x60>)
 80013b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b4:	619a      	str	r2, [r3, #24]
	TIM3->CCMR2 = 0x0100;
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <INIT_TIM3+0x60>)
 80013b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013bc:	61da      	str	r2, [r3, #28]

	TIM3->CCER = 0xB0B0;
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <INIT_TIM3+0x60>)
 80013c0:	f24b 02b0 	movw	r2, #45232	@ 0xb0b0
 80013c4:	621a      	str	r2, [r3, #32]

}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40000400 	.word	0x40000400

080013d4 <INIT_TIM4>:

void INIT_TIM4() {
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

// Internal clock selection: CR1, CR2, SMRC
	TIM4->CR1 = 0x0080; // ARPE = 1 it is periodic
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <INIT_TIM4+0x60>)
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	601a      	str	r2, [r3, #0]
						// CEN = 0; Counter off
//------------------------------------------
// DO NOT TOUCH
	TIM4->CR2 = 0x0000; // Always 0x0000 in this subject
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <INIT_TIM4+0x60>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
	TIM4->SMCR = 0x0000; // Always 0x0000 in this subject
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <INIT_TIM4+0x60>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
	TIM4->ARR = 1000;   // Recommended value = FFFF
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <INIT_TIM4+0x60>)
 80013ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c

//-------------------------------------------
// Setting up the counter functionality: PSC, CNT, ARR y CCRx
	TIM4->PSC = 3199; // Preescaler=3200 -> F_counter=32000000/3200 = 10000 steps/second
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <INIT_TIM4+0x60>)
 80013f4:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->CNT = 0;	   // Initial value for CNT
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <INIT_TIM4+0x60>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CCR3 = 1000;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <INIT_TIM4+0x60>)
 8001402:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001406:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR1 = 1000;
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <INIT_TIM4+0x60>)
 800140a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800140e:	635a      	str	r2, [r3, #52]	@ 0x34

// IRQ or no-IRQ selection: DIER
	TIM4->DIER = 0x0008;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <INIT_TIM4+0x60>)
 8001412:	2208      	movs	r2, #8
 8001414:	60da      	str	r2, [r3, #12]
	TIM4->CCMR2 = 0x0000;
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <INIT_TIM4+0x60>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
	TIM4->CCMR1 = 0x0000;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <INIT_TIM4+0x60>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
	TIM4->CCER = 0x0100;
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <INIT_TIM4+0x60>)
 8001424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001428:	621a      	str	r2, [r3, #32]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40000800 	.word	0x40000800

08001438 <INIT_3V_OUTPUT>:

void INIT_3V_OUTPUT() {
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
	GPIOB->MODER |= (1 << (8 * 2 + 1));
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0c      	ldr	r2, [pc, #48]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 8001442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001446:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << (8 * 2));
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a09      	ldr	r2, [pc, #36]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] &= ~(0xF << (0)); // Limpiar completamente los bits de AF para PB8
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 800145a:	f023 030f 	bic.w	r3, r3, #15
 800145e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (2 << (0));  // AF2 para TIM4_CH2 (revisa la hoja de datos)
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	4a03      	ldr	r2, [pc, #12]	@ (8001474 <INIT_3V_OUTPUT+0x3c>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	6253      	str	r3, [r2, #36]	@ 0x24

}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40020400 	.word	0x40020400

08001478 <INIT_TRIGG_ECHO>:

void INIT_TRIGG_ECHO() {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
// PC6 as output for TIM3CH1 (DO)

	GPIOC->MODER &= ~(1 << (2 * 6 + 1)); // MODER = 01 (DO) for PC6
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 8001482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001486:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1 << (2 * 6));
 8001488:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 800148e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001492:	6013      	str	r3, [r2, #0]

// PC7 as output for TIM3CH2 (AF)
	GPIOC->MODER |= (1 << (2 * 7 + 1));
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 800149a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800149e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1 << (2 * 7));
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014aa:	6013      	str	r3, [r2, #0]

	GPIOC->AFR[0] &= ~(0xF << (7 * 4)); // Limpiar completamente los bits de AF para PC7
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80014b6:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (2 << (7 * 4)); // AF2 para TIM3_CH2 (revisa la hoja de datos)
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a15      	ldr	r2, [pc, #84]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014c2:	6213      	str	r3, [r2, #32]

	GPIOC->MODER &= ~(1 << (2 * 8 + 1)); // MODER = 01 (DO) for PC8
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014ca:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80014ce:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1 << (2 * 8));
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]

// PC9 as output for TIM3CH4 (AF)
	GPIOC->MODER |= (1 << (2 * 9 + 1));
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1 << (2 * 9));
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

	GPIOC->AFR[1] &= ~(0xF << (1 * 4)); // Limpiar completamente los bits de AF para PC9
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 80014fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014fe:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |= (2 << (1 * 4)); // AF2 para TIM3_CH4 (revisa la hoja de datos)
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	4a03      	ldr	r2, [pc, #12]	@ (8001514 <INIT_TRIGG_ECHO+0x9c>)
 8001506:	f043 0320 	orr.w	r3, r3, #32
 800150a:	6253      	str	r3, [r2, #36]	@ 0x24

}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40020800 	.word	0x40020800

08001518 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) // ISR for EXTI0.
// PC jumps here when the EXTI0 event occurs
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	if (EXTI->PR != 0) {
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <EXTI0_IRQHandler+0x1c>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <EXTI0_IRQHandler+0x16>
		TURN_DIRECTION();
 8001524:	f7ff fb92 	bl	8000c4c <TURN_DIRECTION>
		EXTI->PR = 0x01; // Clear the EXTI0 flag
 8001528:	4b02      	ldr	r3, [pc, #8]	@ (8001534 <EXTI0_IRQHandler+0x1c>)
 800152a:	2201      	movs	r2, #1
 800152c:	615a      	str	r2, [r3, #20]
	}
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010400 	.word	0x40010400

08001538 <SETUP_USER_BUTTON>:

void SETUP_USER_BUTTON() {
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(1 << (0 * 2 + 1));
 800153c:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <SETUP_USER_BUTTON+0x5c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <SETUP_USER_BUTTON+0x5c>)
 8001542:	f023 0302 	bic.w	r3, r3, #2
 8001546:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << (0 * 2));
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <SETUP_USER_BUTTON+0x5c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a11      	ldr	r2, [pc, #68]	@ (8001594 <SETUP_USER_BUTTON+0x5c>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

	EXTI->FTSR |= 0x01; // Enables falling edge in EXTI0
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <SETUP_USER_BUTTON+0x60>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <SETUP_USER_BUTTON+0x60>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(0x01); // Disables rising edge in EXTI0
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <SETUP_USER_BUTTON+0x60>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a0c      	ldr	r2, [pc, #48]	@ (8001598 <SETUP_USER_BUTTON+0x60>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] = 0; // EXTI0 linked to GPIOA (i.e. USER button = PA0)
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <SETUP_USER_BUTTON+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
	EXTI->IMR |= 0x01; // Enables EXTI0
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <SETUP_USER_BUTTON+0x60>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <SETUP_USER_BUTTON+0x60>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] |= (1 << 6);
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <SETUP_USER_BUTTON+0x68>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <SETUP_USER_BUTTON+0x68>)
 8001584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40020000 	.word	0x40020000
 8001598:	40010400 	.word	0x40010400
 800159c:	40010000 	.word	0x40010000
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015a8:	f000 fb8f 	bl	8001cca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015ac:	f000 f858 	bl	8001660 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015b0:	f000 f9ec 	bl	800198c <MX_GPIO_Init>
	MX_ADC_Init();
 80015b4:	f000 f8a2 	bl	80016fc <MX_ADC_Init>
	MX_TS_Init();
 80015b8:	f000 f9e2 	bl	8001980 <MX_TS_Init>
	MX_TIM2_Init();
 80015bc:	f000 f8f8 	bl	80017b0 <MX_TIM2_Init>
	MX_TIM3_Init();
 80015c0:	f000 f942 	bl	8001848 <MX_TIM3_Init>
	MX_TIM4_Init();
 80015c4:	f000 f98e 	bl	80018e4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	INIT_TRIGG_ECHO();
 80015c8:	f7ff ff56 	bl	8001478 <INIT_TRIGG_ECHO>
	INIT_3V_OUTPUT();
 80015cc:	f7ff ff34 	bl	8001438 <INIT_3V_OUTPUT>
	INIT_TIM4();
 80015d0:	f7ff ff00 	bl	80013d4 <INIT_TIM4>
	INIT_TIM3();
 80015d4:	f7ff fecc 	bl	8001370 <INIT_TIM3>
	START_COUNTER_2();
 80015d8:	f7ff fde2 	bl	80011a0 <START_COUNTER_2>
	SETUP_WHEELS();
 80015dc:	f7ff fb5c 	bl	8000c98 <SETUP_WHEELS>

	SETUP_PWM();
 80015e0:	f7ff fc42 	bl	8000e68 <SETUP_PWM>
	SETUP_USER_BUTTON();
 80015e4:	f7ff ffa8 	bl	8001538 <SETUP_USER_BUTTON>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (CRITICAL_CLOSE) {
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <main+0xb4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d030      	beq.n	8001652 <main+0xae>
		    switch (TURN_POSITION) {
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <main+0xb8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d82b      	bhi.n	8001650 <main+0xac>
 80015f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001600 <main+0x5c>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001651 	.word	0x08001651
 8001604:	08001619 	.word	0x08001619
 8001608:	08001625 	.word	0x08001625
 800160c:	08001631 	.word	0x08001631
 8001610:	0800163d 	.word	0x0800163d
 8001614:	08001649 	.word	0x08001649
		        case FIRST_OBSTACLE_BACKWARDS:
		            TURN_90_LEFT(true);  // Gira a la izquierda hacia atrás
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff fbd9 	bl	8000dd0 <TURN_90_LEFT>
		            CYCLE_TURN_POSITION();
 800161e:	f7ff fc65 	bl	8000eec <CYCLE_TURN_POSITION>
		            break;
 8001622:	e016      	b.n	8001652 <main+0xae>

		        case FIRST_OBSTACLE_FORWARD:
		            TURN_90_LEFT(false); // Gira a la izquierda hacia adelante
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff fbd3 	bl	8000dd0 <TURN_90_LEFT>
		            CYCLE_TURN_POSITION();
 800162a:	f7ff fc5f 	bl	8000eec <CYCLE_TURN_POSITION>
		            break;
 800162e:	e010      	b.n	8001652 <main+0xae>

		        case SECOND_OBSTACLE_BACKWARDS:
		            TURN_90_RIGHT(true);  // Gira a la derecha hacia atrás
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fb81 	bl	8000d38 <TURN_90_RIGHT>
		            CYCLE_TURN_POSITION();
 8001636:	f7ff fc59 	bl	8000eec <CYCLE_TURN_POSITION>
		            break;
 800163a:	e00a      	b.n	8001652 <main+0xae>

		        case SECOND_OBSTACLE_FORWARD:
		            TURN_90_RIGHT(false); // Gira a la derecha hacia adelante
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fb7b 	bl	8000d38 <TURN_90_RIGHT>
		            CYCLE_TURN_POSITION();
 8001642:	f7ff fc53 	bl	8000eec <CYCLE_TURN_POSITION>
		            break;
 8001646:	e004      	b.n	8001652 <main+0xae>

		        case DOOMED:
		        	STOP(false);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fa91 	bl	8000b70 <STOP>
		        	break;
 800164e:	e000      	b.n	8001652 <main+0xae>

		        case CLEAR:
		            break;

		        default:
		            break;
 8001650:	bf00      	nop
		    }
		}

		MEASSURE();
 8001652:	f7ff fcdd 	bl	8001010 <MEASSURE>
		if (CRITICAL_CLOSE) {
 8001656:	e7c7      	b.n	80015e8 <main+0x44>
 8001658:	2000015c 	.word	0x2000015c
 800165c:	20000160 	.word	0x20000160

08001660 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b092      	sub	sp, #72	@ 0x48
 8001664:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	2234      	movs	r2, #52	@ 0x34
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f8d2 	bl	8003818 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <SystemClock_Config+0x98>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800168a:	4a1b      	ldr	r2, [pc, #108]	@ (80016f8 <SystemClock_Config+0x98>)
 800168c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001690:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001692:	2302      	movs	r3, #2
 8001694:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001696:	2301      	movs	r3, #1
 8001698:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800169a:	2310      	movs	r3, #16
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a2:	2300      	movs	r3, #0
 80016a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016a6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80016aa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80016ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80016b0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 f888 	bl	80027cc <HAL_RCC_OscConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x66>
		Error_Handler();
 80016c2:	f000 f9f1 	bl	8001aa8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016c6:	230f      	movs	r3, #15
 80016c8:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ca:	2303      	movs	r3, #3
 80016cc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80016da:	463b      	mov	r3, r7
 80016dc:	2101      	movs	r1, #1
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fba4 	bl	8002e2c <HAL_RCC_ClockConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x8e>
		Error_Handler();
 80016ea:	f000 f9dd 	bl	8001aa8 <Error_Handler>
	}
}
 80016ee:	bf00      	nop
 80016f0:	3748      	adds	r7, #72	@ 0x48
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40007000 	.word	0x40007000

080016fc <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800170c:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <MX_ADC_Init+0xac>)
 800170e:	4a27      	ldr	r2, [pc, #156]	@ (80017ac <MX_ADC_Init+0xb0>)
 8001710:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001712:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001718:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <MX_ADC_Init+0xac>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <MX_ADC_Init+0xac>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001730:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_ADC_Init+0xac>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc.Init.NbrOfConversion = 1;
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_ADC_Init+0xac>)
 800174c:	2201      	movs	r2, #1
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001752:	2200      	movs	r2, #0
 8001754:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <MX_ADC_Init+0xac>)
 800175a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800175e:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001766:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_ADC_Init+0xac>)
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001772:	f000 fb19 	bl	8001da8 <HAL_ADC_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC_Init+0x84>
		Error_Handler();
 800177c:	f000 f994 	bl	8001aa8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001780:	2304      	movs	r3, #4
 8001782:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001784:	2301      	movs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_ADC_Init+0xac>)
 8001792:	f000 fc4f 	bl	8002034 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC_Init+0xa4>
		Error_Handler();
 800179c:	f000 f984 	bl	8001aa8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000002c 	.word	0x2000002c
 80017ac:	40012400 	.word	0x40012400

080017b0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <MX_TIM2_Init+0x94>)
 80017f6:	f001 fdad 	bl	8003354 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001800:	f000 f952 	bl	8001aa8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001808:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <MX_TIM2_Init+0x94>)
 8001812:	f001 fdde 	bl	80033d2 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x70>
		Error_Handler();
 800181c:	f000 f944 	bl	8001aa8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_TIM2_Init+0x94>)
 800182e:	f001 ff95 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001838:	f000 f936 	bl	8001aa8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000080 	.word	0x20000080

08001848 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <MX_TIM3_Init+0x94>)
 8001866:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <MX_TIM3_Init+0x98>)
 8001868:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <MX_TIM3_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_TIM3_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <MX_TIM3_Init+0x94>)
 8001878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800187c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_TIM3_Init+0x94>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_TIM3_Init+0x94>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800188a:	4814      	ldr	r0, [pc, #80]	@ (80018dc <MX_TIM3_Init+0x94>)
 800188c:	f001 fd62 	bl	8003354 <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0x52>
		Error_Handler();
 8001896:	f000 f907 	bl	8001aa8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_TIM3_Init+0x94>)
 80018a8:	f001 fd93 	bl	80033d2 <HAL_TIM_ConfigClockSource>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80018b2:	f000 f8f9 	bl	8001aa8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80018be:	463b      	mov	r3, r7
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	@ (80018dc <MX_TIM3_Init+0x94>)
 80018c4:	f001 ff4a 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80018ce:	f000 f8eb 	bl	8001aa8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200000c0 	.word	0x200000c0
 80018e0:	40000400 	.word	0x40000400

080018e4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001902:	4a1e      	ldr	r2, [pc, #120]	@ (800197c <MX_TIM4_Init+0x98>)
 8001904:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_TIM4_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001918:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_TIM4_Init+0x94>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001926:	4814      	ldr	r0, [pc, #80]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001928:	f001 fd14 	bl	8003354 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM4_Init+0x52>
		Error_Handler();
 8001932:	f000 f8b9 	bl	8001aa8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	4619      	mov	r1, r3
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001944:	f001 fd45 	bl	80033d2 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM4_Init+0x6e>
		Error_Handler();
 800194e:	f000 f8ab 	bl	8001aa8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	@ (8001978 <MX_TIM4_Init+0x94>)
 8001960:	f001 fefc 	bl	800375c <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800196a:	f000 f89d 	bl	8001aa8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000100 	.word	0x20000100
 800197c:	40000800 	.word	0x40000800

08001980 <MX_TS_Init>:
/**
 * @brief TS Initialization Function
 * @param None
 * @retval None
 */
static void MX_TS_Init(void) {
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
	/* USER CODE END TS_Init 1 */
	/* USER CODE BEGIN TS_Init 2 */

	/* USER CODE END TS_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a3c      	ldr	r2, [pc, #240]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a36      	ldr	r2, [pc, #216]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b31      	ldr	r3, [pc, #196]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a30      	ldr	r2, [pc, #192]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b2e      	ldr	r3, [pc, #184]	@ (8001a98 <MX_GPIO_Init+0x10c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD4_Pin | LD3_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	21c0      	movs	r1, #192	@ 0xc0
 80019ee:	482b      	ldr	r0, [pc, #172]	@ (8001a9c <MX_GPIO_Init+0x110>)
 80019f0:	f000 fed4 	bl	800279c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SEG14_Pin SEG15_Pin SEG16_Pin SEG17_Pin
	 SEG18_Pin SEG19_Pin SEG20_Pin SEG21_Pin
	 SEG22_Pin SEG23_Pin */
	GPIO_InitStruct.Pin = SEG14_Pin | SEG15_Pin | SEG16_Pin | SEG17_Pin
 80019f4:	f640 73cf 	movw	r3, #4047	@ 0xfcf
 80019f8:	60fb      	str	r3, [r7, #12]
			| SEG18_Pin | SEG19_Pin | SEG20_Pin | SEG21_Pin | SEG22_Pin
			| SEG23_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001a06:	230b      	movs	r3, #11
 8001a08:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4823      	ldr	r0, [pc, #140]	@ (8001aa0 <MX_GPIO_Init+0x114>)
 8001a12:	f000 fd43 	bl	800249c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001a16:	2301      	movs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	481e      	ldr	r0, [pc, #120]	@ (8001aa4 <MX_GPIO_Init+0x118>)
 8001a2c:	f000 fd36 	bl	800249c <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin COM0_Pin
	 COM1_Pin COM2_Pin SEG12_Pin */
	GPIO_InitStruct.Pin = SEG0_Pin | SEG1_Pin | SEG2_Pin | COM0_Pin | COM1_Pin
 8001a30:	f248 730e 	movw	r3, #34574	@ 0x870e
 8001a34:	60fb      	str	r3, [r7, #12]
			| COM2_Pin | SEG12_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001a42:	230b      	movs	r3, #11
 8001a44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4815      	ldr	r0, [pc, #84]	@ (8001aa4 <MX_GPIO_Init+0x118>)
 8001a4e:	f000 fd25 	bl	800249c <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG6_Pin SEG7_Pin SEG8_Pin SEG9_Pin
	 SEG10_Pin SEG11_Pin SEG3_Pin SEG4_Pin
	 SEG5_Pin SEG13_Pin COM3_Pin */
	GPIO_InitStruct.Pin = SEG6_Pin | SEG7_Pin | SEG8_Pin | SEG9_Pin | SEG10_Pin
 8001a52:	f64f 7338 	movw	r3, #65336	@ 0xff38
 8001a56:	60fb      	str	r3, [r7, #12]
			| SEG11_Pin | SEG3_Pin | SEG4_Pin | SEG5_Pin | SEG13_Pin | COM3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001a64:	230b      	movs	r3, #11
 8001a66:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <MX_GPIO_Init+0x110>)
 8001a70:	f000 fd14 	bl	800249c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin;
 8001a74:	23c0      	movs	r3, #192	@ 0xc0
 8001a76:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4804      	ldr	r0, [pc, #16]	@ (8001a9c <MX_GPIO_Init+0x110>)
 8001a8c:	f000 fd06 	bl	800249c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <Error_Handler+0x8>

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ac4:	6253      	str	r3, [r2, #36]	@ 0x24
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6213      	str	r3, [r2, #32]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6253      	str	r3, [r2, #36]	@ 0x24
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b02:	2007      	movs	r0, #7
 8001b04:	f000 fc96 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800

08001b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <HAL_ADC_MspInit+0x74>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d123      	bne.n	8001b7e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a0e      	ldr	r2, [pc, #56]	@ (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8001b66:	2310      	movs	r3, #16
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <HAL_ADC_MspInit+0x7c>)
 8001b7a:	f000 fc8f 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	@ 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40012400 	.word	0x40012400
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000

08001b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bbe:	e022      	b.n	8001c06 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <HAL_TIM_Base_MspInit+0x80>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10c      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	4a10      	ldr	r2, [pc, #64]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
}
 8001be2:	e010      	b.n	8001c06 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c18 <HAL_TIM_Base_MspInit+0x84>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10b      	bne.n	8001c06 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_TIM_Base_MspInit+0x7c>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f000 f880 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <Reset_Handler>:
Reset_Handler:


/* Call the clock system initialization function.*/

    bl  SystemInit
 8001c80:	f7ff fff8 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480b      	ldr	r0, [pc, #44]	@ (8001cb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c86:	490c      	ldr	r1, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c88:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c9c:	4c09      	ldr	r4, [pc, #36]	@ (8001cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001caa:	f001 fdbd 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cae:	f7ff fc79 	bl	80015a4 <main>
  bx lr
 8001cb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cbc:	080038b4 	.word	0x080038b4
  ldr r2, =_sbss
 8001cc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cc4:	20000168 	.word	0x20000168

08001cc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_IRQHandler>

08001cca <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 fbad 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f80e 	bl	8001cfc <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	e001      	b.n	8001cf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cec:	f7ff fee2 	bl	8001ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_InitTick+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d022      	beq.n	8001d56 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_InitTick+0x6c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <HAL_InitTick+0x68>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fbac 	bl	8002482 <HAL_SYSTICK_Config>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10f      	bne.n	8001d50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	d809      	bhi.n	8001d4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d36:	2200      	movs	r2, #0
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d3e:	f000 fb84 	bl	800244a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <HAL_InitTick+0x70>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e004      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000000c 	.word	0x2000000c
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000008 	.word	0x20000008

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_IncTick+0x1c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <HAL_IncTick+0x20>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a03      	ldr	r2, [pc, #12]	@ (8001d8c <HAL_IncTick+0x1c>)
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000164 	.word	0x20000164
 8001d90:	2000000c 	.word	0x2000000c

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b02      	ldr	r3, [pc, #8]	@ (8001da4 <HAL_GetTick+0x10>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000164 	.word	0x20000164

08001da8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08e      	sub	sp, #56	@ 0x38
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e127      	b.n	8002018 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de4:	4b8e      	ldr	r3, [pc, #568]	@ (8002020 <HAL_ADC_Init+0x278>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a8d      	ldr	r2, [pc, #564]	@ (8002020 <HAL_ADC_Init+0x278>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	4b8b      	ldr	r3, [pc, #556]	@ (8002020 <HAL_ADC_Init+0x278>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fe89 	bl	8001b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 80ff 	bne.w	800200e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e18:	f023 0302 	bic.w	r3, r3, #2
 8001e1c:	f043 0202 	orr.w	r2, r3, #2
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001e24:	4b7f      	ldr	r3, [pc, #508]	@ (8002024 <HAL_ADC_Init+0x27c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	497c      	ldr	r1, [pc, #496]	@ (8002024 <HAL_ADC_Init+0x27c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e3e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e46:	4619      	mov	r1, r3
 8001e48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e4c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001e62:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	2302      	movs	r3, #2
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001e8a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d007      	beq.n	8001eaa <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb4:	2b40      	cmp	r3, #64	@ 0x40
 8001eb6:	d04f      	beq.n	8001f58 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001eca:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6912      	ldr	r2, [r2, #16]
 8001ed0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001ed4:	d003      	beq.n	8001ede <HAL_ADC_Init+0x136>
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6912      	ldr	r2, [r2, #16]
 8001eda:	2a01      	cmp	r2, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_ADC_Init+0x13c>
 8001ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ee2:	e000      	b.n	8001ee6 <HAL_ADC_Init+0x13e>
 8001ee4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001ee6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eea:	4313      	orrs	r3, r2
 8001eec:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d125      	bne.n	8001f44 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d114      	bne.n	8001f2c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001f0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	617a      	str	r2, [r7, #20]
  return result;
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f26:	4313      	orrs	r3, r2
 8001f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f2a:	e00b      	b.n	8001f44 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <HAL_ADC_Init+0x280>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4b33      	ldr	r3, [pc, #204]	@ (800202c <HAL_ADC_Init+0x284>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f74:	d003      	beq.n	8001f7e <HAL_ADC_Init+0x1d6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d119      	bne.n	8001fb2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8001f92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	fa92 f2a2 	rbit	r2, r2
 8001f9a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	fab2 f282 	clz	r2, r2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	fa03 f202 	lsl.w	r2, r3, r2
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fb0:	e007      	b.n	8001fc2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8001fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_ADC_Init+0x288>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d10b      	bne.n	8001fea <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	f023 0303 	bic.w	r3, r3, #3
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001fe8:	e014      	b.n	8002014 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f023 0312 	bic.w	r3, r3, #18
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800200c:	e002      	b.n	8002014 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002018:	4618      	mov	r0, r3
 800201a:	3738      	adds	r7, #56	@ 0x38
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	40012700 	.word	0x40012700
 8002028:	fcfc16ff 	.word	0xfcfc16ff
 800202c:	c0fff18d 	.word	0xc0fff18d
 8002030:	bf80fffe 	.word	0xbf80fffe

08002034 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x20>
 8002050:	2302      	movs	r3, #2
 8002052:	e134      	b.n	80022be <HAL_ADC_ConfigChannel+0x28a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b06      	cmp	r3, #6
 8002062:	d81c      	bhi.n	800209e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b05      	subs	r3, #5
 8002076:	221f      	movs	r2, #31
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	4019      	ands	r1, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3b05      	subs	r3, #5
 8002090:	fa00 f203 	lsl.w	r2, r0, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40
 800209c:	e07e      	b.n	800219c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d81c      	bhi.n	80020e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b23      	subs	r3, #35	@ 0x23
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	4019      	ands	r1, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	3b23      	subs	r3, #35	@ 0x23
 80020d2:	fa00 f203 	lsl.w	r2, r0, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020de:	e05d      	b.n	800219c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d81c      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b41      	subs	r3, #65	@ 0x41
 80020fa:	221f      	movs	r2, #31
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	4019      	ands	r1, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b41      	subs	r3, #65	@ 0x41
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002120:	e03c      	b.n	800219c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b18      	cmp	r3, #24
 8002128:	d81c      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	3b5f      	subs	r3, #95	@ 0x5f
 800213c:	221f      	movs	r2, #31
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	4019      	ands	r1, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b5f      	subs	r3, #95	@ 0x5f
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34
 8002162:	e01b      	b.n	800219c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b7d      	subs	r3, #125	@ 0x7d
 8002176:	221f      	movs	r2, #31
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b7d      	subs	r3, #125	@ 0x7d
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b09      	cmp	r3, #9
 80021a2:	d81a      	bhi.n	80021da <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6959      	ldr	r1, [r3, #20]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	2207      	movs	r2, #7
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	4019      	ands	r1, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6898      	ldr	r0, [r3, #8]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	615a      	str	r2, [r3, #20]
 80021d8:	e042      	b.n	8002260 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b13      	cmp	r3, #19
 80021e0:	d81c      	bhi.n	800221c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6919      	ldr	r1, [r3, #16]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	2207      	movs	r2, #7
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	4019      	ands	r1, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6898      	ldr	r0, [r3, #8]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	3b1e      	subs	r3, #30
 800220e:	fa00 f203 	lsl.w	r2, r0, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	e021      	b.n	8002260 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b1a      	cmp	r3, #26
 8002222:	d81c      	bhi.n	800225e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	3b3c      	subs	r3, #60	@ 0x3c
 8002236:	2207      	movs	r2, #7
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	4019      	ands	r1, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6898      	ldr	r0, [r3, #8]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	3b3c      	subs	r3, #60	@ 0x3c
 8002250:	fa00 f203 	lsl.w	r2, r0, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	e000      	b.n	8002260 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800225e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b10      	cmp	r3, #16
 8002266:	d003      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800226c:	2b11      	cmp	r3, #17
 800226e:	d121      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002270:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <HAL_ADC_ConfigChannel+0x294>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d11b      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_ADC_ConfigChannel+0x294>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_ADC_ConfigChannel+0x294>)
 8002282:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002286:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b10      	cmp	r3, #16
 800228e:	d111      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002290:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <HAL_ADC_ConfigChannel+0x298>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0e      	ldr	r2, [pc, #56]	@ (80022d0 <HAL_ADC_ConfigChannel+0x29c>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9a      	lsrs	r2, r3, #18
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80022a6:	e002      	b.n	80022ae <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f9      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40012700 	.word	0x40012700
 80022cc:	20000004 	.word	0x20000004
 80022d0:	431bde83 	.word	0x431bde83

080022d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	@ (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	@ (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	@ 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	@ 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002414:	f7ff ff90 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff49 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff5e 	bl	800231c <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff90 	bl	800238c <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5f 	bl	8002338 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffb0 	bl	80023f0 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024b2:	e154      	b.n	800275e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8146 	beq.w	8002758 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d005      	beq.n	80024e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d130      	bne.n	8002546 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800251a:	2201      	movs	r2, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0201 	and.w	r2, r3, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b03      	cmp	r3, #3
 8002550:	d017      	beq.n	8002582 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d123      	bne.n	80025d6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	6939      	ldr	r1, [r7, #16]
 80025d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0203 	and.w	r2, r3, #3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80a0 	beq.w	8002758 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002618:	4b58      	ldr	r3, [pc, #352]	@ (800277c <HAL_GPIO_Init+0x2e0>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a57      	ldr	r2, [pc, #348]	@ (800277c <HAL_GPIO_Init+0x2e0>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	4b55      	ldr	r3, [pc, #340]	@ (800277c <HAL_GPIO_Init+0x2e0>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002630:	4a53      	ldr	r2, [pc, #332]	@ (8002780 <HAL_GPIO_Init+0x2e4>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a4b      	ldr	r2, [pc, #300]	@ (8002784 <HAL_GPIO_Init+0x2e8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d019      	beq.n	8002690 <HAL_GPIO_Init+0x1f4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a4a      	ldr	r2, [pc, #296]	@ (8002788 <HAL_GPIO_Init+0x2ec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_GPIO_Init+0x1f0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a49      	ldr	r2, [pc, #292]	@ (800278c <HAL_GPIO_Init+0x2f0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_GPIO_Init+0x1ec>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a48      	ldr	r2, [pc, #288]	@ (8002790 <HAL_GPIO_Init+0x2f4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x1e8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a47      	ldr	r2, [pc, #284]	@ (8002794 <HAL_GPIO_Init+0x2f8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_Init+0x1e4>
 800267c:	2304      	movs	r3, #4
 800267e:	e008      	b.n	8002692 <HAL_GPIO_Init+0x1f6>
 8002680:	2305      	movs	r3, #5
 8002682:	e006      	b.n	8002692 <HAL_GPIO_Init+0x1f6>
 8002684:	2303      	movs	r3, #3
 8002686:	e004      	b.n	8002692 <HAL_GPIO_Init+0x1f6>
 8002688:	2302      	movs	r3, #2
 800268a:	e002      	b.n	8002692 <HAL_GPIO_Init+0x1f6>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_GPIO_Init+0x1f6>
 8002690:	2300      	movs	r3, #0
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	f002 0203 	and.w	r2, r2, #3
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	4093      	lsls	r3, r2
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026a2:	4937      	ldr	r1, [pc, #220]	@ (8002780 <HAL_GPIO_Init+0x2e4>)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b0:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026d4:	4a30      	ldr	r2, [pc, #192]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026da:	4b2f      	ldr	r3, [pc, #188]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026fe:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002704:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002728:	4a1b      	ldr	r2, [pc, #108]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272e:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002752:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <HAL_GPIO_Init+0x2fc>)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	f47f aea3 	bne.w	80024b4 <HAL_GPIO_Init+0x18>
  }
}
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40010000 	.word	0x40010000
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80027b8:	e003      	b.n	80027c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e31d      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027de:	4b94      	ldr	r3, [pc, #592]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e8:	4b91      	ldr	r3, [pc, #580]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d07b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b08      	cmp	r3, #8
 8002802:	d006      	beq.n	8002812 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d10f      	bne.n	800282a <HAL_RCC_OscConfig+0x5e>
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002810:	d10b      	bne.n	800282a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	4b87      	ldr	r3, [pc, #540]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d06a      	beq.n	80028f4 <HAL_RCC_OscConfig+0x128>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d166      	bne.n	80028f4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e2f7      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d106      	bne.n	8002840 <HAL_RCC_OscConfig+0x74>
 8002832:	4b7f      	ldr	r3, [pc, #508]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a7e      	ldr	r2, [pc, #504]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e02d      	b.n	800289c <HAL_RCC_OscConfig+0xd0>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x96>
 8002848:	4b79      	ldr	r3, [pc, #484]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a78      	ldr	r2, [pc, #480]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b76      	ldr	r3, [pc, #472]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a75      	ldr	r2, [pc, #468]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0xd0>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0xb8>
 800286a:	4b71      	ldr	r3, [pc, #452]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a70      	ldr	r2, [pc, #448]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6e      	ldr	r3, [pc, #440]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xd0>
 8002884:	4b6a      	ldr	r3, [pc, #424]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a69      	ldr	r2, [pc, #420]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b67      	ldr	r3, [pc, #412]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a66      	ldr	r2, [pc, #408]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fa76 	bl	8001d94 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff fa72 	bl	8001d94 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	@ 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e2ad      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028be:	4b5c      	ldr	r3, [pc, #368]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xe0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fa62 	bl	8001d94 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fa5e 	bl	8001d94 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e299      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e6:	4b52      	ldr	r3, [pc, #328]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x108>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d05a      	beq.n	80029b8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d005      	beq.n	8002914 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d119      	bne.n	8002942 <HAL_RCC_OscConfig+0x176>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002914:	4b46      	ldr	r3, [pc, #280]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_OscConfig+0x160>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e276      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b40      	ldr	r3, [pc, #256]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	493d      	ldr	r1, [pc, #244]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002940:	e03a      	b.n	80029b8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a34 <HAL_RCC_OscConfig+0x268>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7ff fa20 	bl	8001d94 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002958:	f7ff fa1c 	bl	8001d94 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e257      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296a:	4b31      	ldr	r3, [pc, #196]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	492a      	ldr	r1, [pc, #168]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
 800298a:	e015      	b.n	80029b8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298c:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <HAL_RCC_OscConfig+0x268>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7ff f9ff 	bl	8001d94 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299a:	f7ff f9fb 	bl	8001d94 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e236      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80b8 	beq.w	8002b36 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d170      	bne.n	8002aae <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029cc:	4b18      	ldr	r3, [pc, #96]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x218>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e21a      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d921      	bls.n	8002a38 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fc4b 	bl	8003294 <RCC_SetFlashLatencyFromMSIRange>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e208      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4906      	ldr	r1, [pc, #24]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	4901      	ldr	r1, [pc, #4]	@ (8002a30 <HAL_RCC_OscConfig+0x264>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
 8002a2e:	e020      	b.n	8002a72 <HAL_RCC_OscConfig+0x2a6>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a38:	4b99      	ldr	r3, [pc, #612]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4996      	ldr	r1, [pc, #600]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4a:	4b95      	ldr	r3, [pc, #596]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	4991      	ldr	r1, [pc, #580]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fc16 	bl	8003294 <RCC_SetFlashLatencyFromMSIRange>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e1d3      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	0b5b      	lsrs	r3, r3, #13
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a82:	4a87      	ldr	r2, [pc, #540]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002a84:	6892      	ldr	r2, [r2, #8]
 8002a86:	0912      	lsrs	r2, r2, #4
 8002a88:	f002 020f 	and.w	r2, r2, #15
 8002a8c:	4985      	ldr	r1, [pc, #532]	@ (8002ca4 <HAL_RCC_OscConfig+0x4d8>)
 8002a8e:	5c8a      	ldrb	r2, [r1, r2]
 8002a90:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a92:	4a85      	ldr	r2, [pc, #532]	@ (8002ca8 <HAL_RCC_OscConfig+0x4dc>)
 8002a94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a96:	4b85      	ldr	r3, [pc, #532]	@ (8002cac <HAL_RCC_OscConfig+0x4e0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f92e 	bl	8001cfc <HAL_InitTick>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d045      	beq.n	8002b36 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	e1b5      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d029      	beq.n	8002b0a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab6:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb0 <HAL_RCC_OscConfig+0x4e4>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff f96a 	bl	8001d94 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac4:	f7ff f966 	bl	8001d94 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1a1      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ad6:	4b72      	ldr	r3, [pc, #456]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	496c      	ldr	r1, [pc, #432]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	4967      	ldr	r1, [pc, #412]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b0a:	4b69      	ldr	r3, [pc, #420]	@ (8002cb0 <HAL_RCC_OscConfig+0x4e4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff f940 	bl	8001d94 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b18:	f7ff f93c 	bl	8001d94 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e177      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d030      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb4 <HAL_RCC_OscConfig+0x4e8>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7ff f920 	bl	8001d94 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b58:	f7ff f91c 	bl	8001d94 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e157      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x38c>
 8002b76:	e015      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b78:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb4 <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff f909 	bl	8001d94 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b86:	f7ff f905 	bl	8001d94 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e140      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b98:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80b5 	beq.w	8002d1c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10d      	bne.n	8002bde <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	4a36      	ldr	r2, [pc, #216]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6253      	str	r3, [r2, #36]	@ 0x24
 8002bce:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bde:	4b36      	ldr	r3, [pc, #216]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ec>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d118      	bne.n	8002c1c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bea:	4b33      	ldr	r3, [pc, #204]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ec>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a32      	ldr	r2, [pc, #200]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ec>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f8cd 	bl	8001d94 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfe:	f7ff f8c9 	bl	8001d94 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b64      	cmp	r3, #100	@ 0x64
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e104      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	4b29      	ldr	r3, [pc, #164]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ec>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x466>
 8002c24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c30:	e02d      	b.n	8002c8e <HAL_RCC_OscConfig+0x4c2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x488>
 8002c3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c44:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c46:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c50:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c52:	e01c      	b.n	8002c8e <HAL_RCC_OscConfig+0x4c2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4aa>
 8002c5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c66:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c72:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c74:	e00b      	b.n	8002c8e <HAL_RCC_OscConfig+0x4c2>
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c80:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c82:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	4a06      	ldr	r2, [pc, #24]	@ (8002ca0 <HAL_RCC_OscConfig+0x4d4>)
 8002c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c8c:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d024      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c96:	f7ff f87d 	bl	8001d94 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c9c:	e019      	b.n	8002cd2 <HAL_RCC_OscConfig+0x506>
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08003894 	.word	0x08003894
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	42470020 	.word	0x42470020
 8002cb4:	42470680 	.word	0x42470680
 8002cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7ff f86a 	bl	8001d94 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0a3      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd2:	4b54      	ldr	r3, [pc, #336]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4f0>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7ff f858 	bl	8001d94 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7ff f854 	bl	8001d94 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e08d      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cfe:	4b49      	ldr	r3, [pc, #292]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b44      	ldr	r3, [pc, #272]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	4a43      	ldr	r2, [pc, #268]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d079      	beq.n	8002e18 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d056      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d13b      	bne.n	8002daa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b3d      	ldr	r3, [pc, #244]	@ (8002e28 <HAL_RCC_OscConfig+0x65c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff f82c 	bl	8001d94 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7ff f828 	bl	8001d94 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e063      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d52:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5e:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	4319      	orrs	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	430b      	orrs	r3, r1
 8002d76:	492b      	ldr	r1, [pc, #172]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <HAL_RCC_OscConfig+0x65c>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff f807 	bl	8001d94 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7ff f803 	bl	8001d94 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03e      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d9c:	4b21      	ldr	r3, [pc, #132]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x5be>
 8002da8:	e036      	b.n	8002e18 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <HAL_RCC_OscConfig+0x65c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fff0 	bl	8001d94 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db8:	f7fe ffec 	bl	8001d94 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e027      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dca:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5ec>
 8002dd6:	e01f      	b.n	8002e18 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e01a      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <HAL_RCC_OscConfig+0x658>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d10d      	bne.n	8002e14 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	42470060 	.word	0x42470060

08002e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e11a      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b8f      	ldr	r3, [pc, #572]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d919      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x34>
 8002e54:	4b8a      	ldr	r3, [pc, #552]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a89      	ldr	r2, [pc, #548]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b87      	ldr	r3, [pc, #540]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 0201 	bic.w	r2, r3, #1
 8002e68:	4985      	ldr	r1, [pc, #532]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e70:	4b83      	ldr	r3, [pc, #524]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0f9      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	497a      	ldr	r1, [pc, #488]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 808e 	beq.w	8002fca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eb6:	4b73      	ldr	r3, [pc, #460]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d121      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0d7      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ece:	4b6d      	ldr	r3, [pc, #436]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d115      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0cb      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee6:	4b67      	ldr	r3, [pc, #412]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0bf      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0b7      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f06:	4b5f      	ldr	r3, [pc, #380]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	495c      	ldr	r1, [pc, #368]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f18:	f7fe ff3c 	bl	8001d94 <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe ff34 	bl	8001d94 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e09b      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f3e:	4b51      	ldr	r3, [pc, #324]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xfc>
 8002f4a:	e03e      	b.n	8002fca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d112      	bne.n	8002f7a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f56:	f7fe ff1d 	bl	8001d94 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e084      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b45      	ldr	r3, [pc, #276]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b0c      	cmp	r3, #12
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_ClockConfig+0x12a>
 8002f78:	e027      	b.n	8002fca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d11d      	bne.n	8002fbe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f84:	f7fe ff06 	bl	8001d94 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e06d      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x158>
 8002fa6:	e010      	b.n	8002fca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fef4 	bl	8001d94 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e05b      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fbe:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1ee      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fca:	4b2d      	ldr	r3, [pc, #180]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d219      	bcs.n	800300c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_ClockConfig+0x1be>
 8002fde:	4b28      	ldr	r3, [pc, #160]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a27      	ldr	r2, [pc, #156]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b25      	ldr	r3, [pc, #148]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0201 	bic.w	r2, r3, #1
 8002ff2:	4923      	ldr	r1, [pc, #140]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b21      	ldr	r3, [pc, #132]	@ (8003080 <HAL_RCC_ClockConfig+0x254>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e034      	b.n	8003076 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003018:	4b1a      	ldr	r3, [pc, #104]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4917      	ldr	r1, [pc, #92]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003036:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	490f      	ldr	r1, [pc, #60]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800304a:	f000 f823 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 800304e:	4602      	mov	r2, r0
 8003050:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <HAL_RCC_ClockConfig+0x258>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	490b      	ldr	r1, [pc, #44]	@ (8003088 <HAL_RCC_ClockConfig+0x25c>)
 800305c:	5ccb      	ldrb	r3, [r1, r3]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <HAL_RCC_ClockConfig+0x260>)
 8003064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003066:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <HAL_RCC_ClockConfig+0x264>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fe46 	bl	8001cfc <HAL_InitTick>
 8003070:	4603      	mov	r3, r0
 8003072:	72fb      	strb	r3, [r7, #11]

  return status;
 8003074:	7afb      	ldrb	r3, [r7, #11]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023c00 	.word	0x40023c00
 8003084:	40023800 	.word	0x40023800
 8003088:	08003894 	.word	0x08003894
 800308c:	20000004 	.word	0x20000004
 8003090:	20000008 	.word	0x20000008

08003094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003098:	b092      	sub	sp, #72	@ 0x48
 800309a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800309c:	4b79      	ldr	r3, [pc, #484]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d00d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x34>
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	f200 80d5 	bhi.w	800325c <HAL_RCC_GetSysClockFreq+0x1c8>
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x28>
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x2e>
 80030ba:	e0cf      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b72      	ldr	r3, [pc, #456]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80030be:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80030c0:	e0da      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030c2:	4b72      	ldr	r3, [pc, #456]	@ (800328c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80030c4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80030c6:	e0d7      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ca:	0c9b      	lsrs	r3, r3, #18
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80030d2:	5c9b      	ldrb	r3, [r3, r2]
 80030d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030d8:	0d9b      	lsrs	r3, r3, #22
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e2:	4b68      	ldr	r3, [pc, #416]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d05d      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f0:	2200      	movs	r2, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	4611      	mov	r1, r2
 80030f6:	4604      	mov	r4, r0
 80030f8:	460d      	mov	r5, r1
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0159      	lsls	r1, r3, #5
 8003108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310c:	0150      	lsls	r0, r2, #5
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4621      	mov	r1, r4
 8003114:	1a51      	subs	r1, r2, r1
 8003116:	6139      	str	r1, [r7, #16]
 8003118:	4629      	mov	r1, r5
 800311a:	eb63 0301 	sbc.w	r3, r3, r1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312c:	4659      	mov	r1, fp
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003136:	4651      	mov	r1, sl
 8003138:	018a      	lsls	r2, r1, #6
 800313a:	46d4      	mov	ip, sl
 800313c:	ebb2 080c 	subs.w	r8, r2, ip
 8003140:	4659      	mov	r1, fp
 8003142:	eb63 0901 	sbc.w	r9, r3, r1
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315a:	4690      	mov	r8, r2
 800315c:	4699      	mov	r9, r3
 800315e:	4623      	mov	r3, r4
 8003160:	eb18 0303 	adds.w	r3, r8, r3
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	462b      	mov	r3, r5
 8003168:	eb49 0303 	adc.w	r3, r9, r3
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317a:	4629      	mov	r1, r5
 800317c:	024b      	lsls	r3, r1, #9
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	4604      	mov	r4, r0
 8003184:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003188:	4601      	mov	r1, r0
 800318a:	024a      	lsls	r2, r1, #9
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	2200      	movs	r2, #0
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800319c:	f7fd faf6 	bl	800078c <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a8:	e055      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ac:	2200      	movs	r2, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031b2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b6:	4642      	mov	r2, r8
 80031b8:	464b      	mov	r3, r9
 80031ba:	f04f 0000 	mov.w	r0, #0
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	0159      	lsls	r1, r3, #5
 80031c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c8:	0150      	lsls	r0, r2, #5
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	46c4      	mov	ip, r8
 80031d0:	ebb2 0a0c 	subs.w	sl, r2, ip
 80031d4:	4640      	mov	r0, r8
 80031d6:	4649      	mov	r1, r9
 80031d8:	468c      	mov	ip, r1
 80031da:	eb63 0b0c 	sbc.w	fp, r3, ip
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f2:	ebb2 040a 	subs.w	r4, r2, sl
 80031f6:	eb63 050b 	sbc.w	r5, r3, fp
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	00eb      	lsls	r3, r5, #3
 8003204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003208:	00e2      	lsls	r2, r4, #3
 800320a:	4614      	mov	r4, r2
 800320c:	461d      	mov	r5, r3
 800320e:	4603      	mov	r3, r0
 8003210:	18e3      	adds	r3, r4, r3
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	eb45 0303 	adc.w	r3, r5, r3
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003228:	4629      	mov	r1, r5
 800322a:	028b      	lsls	r3, r1, #10
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	4604      	mov	r4, r0
 8003232:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003236:	4601      	mov	r1, r0
 8003238:	028a      	lsls	r2, r1, #10
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	2200      	movs	r2, #0
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	61fa      	str	r2, [r7, #28]
 8003246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324a:	f7fd fa9f 	bl	800078c <__aeabi_uldivmod>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4613      	mov	r3, r2
 8003254:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8003256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003258:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800325a:	e00d      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0b5b      	lsrs	r3, r3, #13
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326a:	3301      	adds	r3, #1
 800326c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003276:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800327a:	4618      	mov	r0, r3
 800327c:	3748      	adds	r7, #72	@ 0x48
 800327e:	46bd      	mov	sp, r7
 8003280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	007a1200 	.word	0x007a1200
 8003290:	08003888 	.word	0x08003888

08003294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032a0:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d12c      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032ac:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80032b8:	4b24      	ldr	r3, [pc, #144]	@ (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e016      	b.n	80032f2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c4:	4b20      	ldr	r3, [pc, #128]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6253      	str	r3, [r2, #36]	@ 0x24
 80032d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80032dc:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80032e4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	4a17      	ldr	r2, [pc, #92]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f0:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80032f8:	d105      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003300:	d101      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003302:	2301      	movs	r3, #1
 8003304:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0f      	ldr	r2, [pc, #60]	@ (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 0201 	bic.w	r2, r3, #1
 8003320:	490b      	ldr	r1, [pc, #44]	@ (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003328:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40007000 	.word	0x40007000
 8003350:	40023c00 	.word	0x40023c00

08003354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e031      	b.n	80033ca <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fe fc0a 	bl	8001b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f000 f8e4 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_ConfigClockSource+0x1c>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e0b4      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x186>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800340c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003414:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003426:	d03e      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xd4>
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342c:	f200 8087 	bhi.w	800353e <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003434:	f000 8086 	beq.w	8003544 <HAL_TIM_ConfigClockSource+0x172>
 8003438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343c:	d87f      	bhi.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
 800343e:	2b70      	cmp	r3, #112	@ 0x70
 8003440:	d01a      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0xa6>
 8003442:	2b70      	cmp	r3, #112	@ 0x70
 8003444:	d87b      	bhi.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
 8003446:	2b60      	cmp	r3, #96	@ 0x60
 8003448:	d050      	beq.n	80034ec <HAL_TIM_ConfigClockSource+0x11a>
 800344a:	2b60      	cmp	r3, #96	@ 0x60
 800344c:	d877      	bhi.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
 800344e:	2b50      	cmp	r3, #80	@ 0x50
 8003450:	d03c      	beq.n	80034cc <HAL_TIM_ConfigClockSource+0xfa>
 8003452:	2b50      	cmp	r3, #80	@ 0x50
 8003454:	d873      	bhi.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
 8003456:	2b40      	cmp	r3, #64	@ 0x40
 8003458:	d058      	beq.n	800350c <HAL_TIM_ConfigClockSource+0x13a>
 800345a:	2b40      	cmp	r3, #64	@ 0x40
 800345c:	d86f      	bhi.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
 800345e:	2b30      	cmp	r3, #48	@ 0x30
 8003460:	d064      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x15a>
 8003462:	2b30      	cmp	r3, #48	@ 0x30
 8003464:	d86b      	bhi.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
 8003466:	2b20      	cmp	r3, #32
 8003468:	d060      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x15a>
 800346a:	2b20      	cmp	r3, #32
 800346c:	d867      	bhi.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d05c      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x15a>
 8003472:	2b10      	cmp	r3, #16
 8003474:	d05a      	beq.n	800352c <HAL_TIM_ConfigClockSource+0x15a>
 8003476:	e062      	b.n	800353e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003488:	f000 f949 	bl	800371e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800349a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
      break;
 80034a4:	e04f      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	f000 f932 	bl	800371e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c8:	609a      	str	r2, [r3, #8]
      break;
 80034ca:	e03c      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d8:	461a      	mov	r2, r3
 80034da:	f000 f8a9 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2150      	movs	r1, #80	@ 0x50
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f900 	bl	80036ea <TIM_ITRx_SetConfig>
      break;
 80034ea:	e02c      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f8:	461a      	mov	r2, r3
 80034fa:	f000 f8c7 	bl	800368c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2160      	movs	r1, #96	@ 0x60
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f8f0 	bl	80036ea <TIM_ITRx_SetConfig>
      break;
 800350a:	e01c      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003518:	461a      	mov	r2, r3
 800351a:	f000 f889 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2140      	movs	r1, #64	@ 0x40
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f8e0 	bl	80036ea <TIM_ITRx_SetConfig>
      break;
 800352a:	e00c      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 f8d7 	bl	80036ea <TIM_ITRx_SetConfig>
      break;
 800353c:	e003      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      break;
 8003542:	e000      	b.n	8003546 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003544:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003576:	d007      	beq.n	8003588 <TIM_Base_SetConfig+0x28>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a28      	ldr	r2, [pc, #160]	@ (800361c <TIM_Base_SetConfig+0xbc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_Base_SetConfig+0x28>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a27      	ldr	r2, [pc, #156]	@ (8003620 <TIM_Base_SetConfig+0xc0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a0:	d013      	beq.n	80035ca <TIM_Base_SetConfig+0x6a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	@ (800361c <TIM_Base_SetConfig+0xbc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00f      	beq.n	80035ca <TIM_Base_SetConfig+0x6a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003620 <TIM_Base_SetConfig+0xc0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00b      	beq.n	80035ca <TIM_Base_SetConfig+0x6a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003624 <TIM_Base_SetConfig+0xc4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <TIM_Base_SetConfig+0x6a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003628 <TIM_Base_SetConfig+0xc8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_Base_SetConfig+0x6a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a19      	ldr	r2, [pc, #100]	@ (800362c <TIM_Base_SetConfig+0xcc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d108      	bne.n	80035dc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f043 0204 	orr.w	r2, r3, #4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40010800 	.word	0x40010800
 8003628:	40010c00 	.word	0x40010c00
 800362c:	40011000 	.word	0x40011000

08003630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0201 	bic.w	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 030a 	bic.w	r3, r3, #10
 800366c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f023 0210 	bic.w	r2, r3, #16
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	031b      	lsls	r3, r3, #12
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	621a      	str	r2, [r3, #32]
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	f043 0307 	orr.w	r3, r3, #7
 800370c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800371e:	b480      	push	{r7}
 8003720:	b087      	sub	sp, #28
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003738:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	021a      	lsls	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	431a      	orrs	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4313      	orrs	r3, r2
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	609a      	str	r2, [r3, #8]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e046      	b.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b6:	d00e      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a13      	ldr	r2, [pc, #76]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a12      	ldr	r2, [pc, #72]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a10      	ldr	r2, [pc, #64]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10c      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40010800 	.word	0x40010800

08003818 <memset>:
 8003818:	4603      	mov	r3, r0
 800381a:	4402      	add	r2, r0
 800381c:	4293      	cmp	r3, r2
 800381e:	d100      	bne.n	8003822 <memset+0xa>
 8003820:	4770      	bx	lr
 8003822:	f803 1b01 	strb.w	r1, [r3], #1
 8003826:	e7f9      	b.n	800381c <memset+0x4>

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	2600      	movs	r6, #0
 800382c:	4d0c      	ldr	r5, [pc, #48]	@ (8003860 <__libc_init_array+0x38>)
 800382e:	4c0d      	ldr	r4, [pc, #52]	@ (8003864 <__libc_init_array+0x3c>)
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	f000 f81a 	bl	8003870 <_init>
 800383c:	2600      	movs	r6, #0
 800383e:	4d0a      	ldr	r5, [pc, #40]	@ (8003868 <__libc_init_array+0x40>)
 8003840:	4c0a      	ldr	r4, [pc, #40]	@ (800386c <__libc_init_array+0x44>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	080038ac 	.word	0x080038ac
 8003864:	080038ac 	.word	0x080038ac
 8003868:	080038ac 	.word	0x080038ac
 800386c:	080038b0 	.word	0x080038b0

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
